{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/alt/lib/actions/index.js","node_modules/alt/lib/functions.js","node_modules/alt/lib/index.js","node_modules/alt/lib/store/AltStore.js","node_modules/alt/lib/store/StoreMixin.js","node_modules/alt/lib/store/index.js","node_modules/alt/lib/utils/AltUtils.js","node_modules/alt/lib/utils/StateFunctions.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/flux/index.js","node_modules/flux/lib/Dispatcher.js","node_modules/flux/node_modules/fbjs/lib/invariant.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/is-promise/index.js","node_modules/process/browser.js","node_modules/transmitter/dist/transmitter.js","node_modules/warning/browser.js","source/client/actions/FooterActions.js","source/client/actions/HomeActions.js","source/client/actions/MovieAddActions.js","source/client/actions/NavbarActions.js","source/client/actions/UserActions.js","source/client/alt.js","source/client/components/App.js","source/client/components/Footer.js","source/client/components/Home.js","source/client/components/MovieAdd.js","source/client/components/Navbar.js","source/client/components/UserProfile.js","source/client/components/sub-components/MovieCard.js","source/client/components/sub-components/MovieCommentsPanel.js","source/client/components/sub-components/MovieVotePanel.js","source/client/components/sub-components/NavbarUserMenu.js","source/client/components/sub-components/UserInfo.js","source/client/components/sub-components/UserRatedMovies.js","source/client/components/sub-components/UserRatedMoviesPanel.js","source/client/components/sub-components/UserReviews.js","source/client/components/sub-components/UserReviewsPanel.js","source/client/main.js","source/client/routes.js","source/client/stores/FooterStore.js","source/client/stores/HomeStore.js","source/client/stores/MovieAddStore.js","source/client/stores/NavbarStore.js","source/client/stores/UserStore.js","source/client/utilities/Helpers.js","source/client/utilities/RequesterTMDB.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxjnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvptOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports['default'] = makeAction;\r\n\r\nvar _functions = require('../functions');\r\n\r\nvar fn = _interopRequireWildcard(_functions);\r\n\r\nvar _AltUtils = require('../utils/AltUtils');\r\n\r\nvar utils = _interopRequireWildcard(_AltUtils);\r\n\r\nvar _isPromise = require('is-promise');\r\n\r\nvar _isPromise2 = _interopRequireDefault(_isPromise);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\r\n\r\nfunction makeAction(alt, namespace, name, implementation, obj) {\r\n  var id = utils.uid(alt._actionsRegistry, String(namespace) + '.' + String(name));\r\n  alt._actionsRegistry[id] = 1;\r\n\r\n  var data = { id: id, namespace: namespace, name: name };\r\n\r\n  var dispatch = function dispatch(payload) {\r\n    return alt.dispatch(id, payload, data);\r\n  };\r\n\r\n  // the action itself\r\n  var action = function action() {\r\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    var invocationResult = implementation.apply(obj, args);\r\n    var actionResult = invocationResult;\r\n\r\n    // async functions that return promises should not be dispatched\r\n    if (invocationResult !== undefined && !(0, _isPromise2['default'])(invocationResult)) {\r\n      if (fn.isFunction(invocationResult)) {\r\n        // inner function result should be returned as an action result\r\n        actionResult = invocationResult(dispatch, alt);\r\n      } else {\r\n        dispatch(invocationResult);\r\n      }\r\n    }\r\n\r\n    if (invocationResult === undefined) {\r\n      utils.warn('An action was called but nothing was dispatched');\r\n    }\r\n\r\n    return actionResult;\r\n  };\r\n  action.defer = function () {\r\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n      args[_key2] = arguments[_key2];\r\n    }\r\n\r\n    return setTimeout(function () {\r\n      return action.apply(null, args);\r\n    });\r\n  };\r\n  action.id = id;\r\n  action.data = data;\r\n\r\n  // ensure each reference is unique in the namespace\r\n  var container = alt.actions[namespace];\r\n  var namespaceId = utils.uid(container, name);\r\n  container[namespaceId] = action;\r\n\r\n  // generate a constant\r\n  var constant = utils.formatAsConstant(namespaceId);\r\n  container[constant] = id;\r\n\r\n  return action;\r\n}\r\nmodule.exports = exports['default'];","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.isMutableObject = isMutableObject;\r\nexports.eachObject = eachObject;\r\nexports.assign = assign;\r\nvar isFunction = exports.isFunction = function isFunction(x) {\r\n  return typeof x === 'function';\r\n};\r\n\r\nfunction isMutableObject(target) {\r\n  var Ctor = target.constructor;\r\n\r\n  return !!target && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && !Object.isFrozen(target) && (Ctor instanceof Ctor || target.type === 'AltStore');\r\n}\r\n\r\nfunction eachObject(f, o) {\r\n  o.forEach(function (from) {\r\n    Object.keys(Object(from)).forEach(function (key) {\r\n      f(key, from[key]);\r\n    });\r\n  });\r\n}\r\n\r\nfunction assign(target) {\r\n  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    source[_key - 1] = arguments[_key];\r\n  }\r\n\r\n  eachObject(function (key, value) {\r\n    return target[key] = value;\r\n  }, source);\r\n  return target;\r\n}","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _flux = require('flux');\r\n\r\nvar _StateFunctions = require('./utils/StateFunctions');\r\n\r\nvar StateFunctions = _interopRequireWildcard(_StateFunctions);\r\n\r\nvar _functions = require('./functions');\r\n\r\nvar fn = _interopRequireWildcard(_functions);\r\n\r\nvar _store = require('./store');\r\n\r\nvar store = _interopRequireWildcard(_store);\r\n\r\nvar _AltUtils = require('./utils/AltUtils');\r\n\r\nvar utils = _interopRequireWildcard(_AltUtils);\r\n\r\nvar _actions = require('./actions');\r\n\r\nvar _actions2 = _interopRequireDefault(_actions);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /* global window */\r\n\r\n\r\nvar Alt = function () {\r\n  function Alt() {\r\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n    _classCallCheck(this, Alt);\r\n\r\n    this.config = config;\r\n    this.serialize = config.serialize || JSON.stringify;\r\n    this.deserialize = config.deserialize || JSON.parse;\r\n    this.dispatcher = config.dispatcher || new _flux.Dispatcher();\r\n    this.batchingFunction = config.batchingFunction || function (callback) {\r\n      return callback();\r\n    };\r\n    this.actions = { global: {} };\r\n    this.stores = {};\r\n    this.storeTransforms = config.storeTransforms || [];\r\n    this.trapAsync = false;\r\n    this._actionsRegistry = {};\r\n    this._initSnapshot = {};\r\n    this._lastSnapshot = {};\r\n  }\r\n\r\n  Alt.prototype.dispatch = function () {\r\n    function dispatch(action, data, details) {\r\n      var _this = this;\r\n\r\n      this.batchingFunction(function () {\r\n        var id = Math.random().toString(18).substr(2, 16);\r\n\r\n        // support straight dispatching of FSA-style actions\r\n        if (action.hasOwnProperty('type') && action.hasOwnProperty('payload')) {\r\n          var fsaDetails = {\r\n            id: action.type,\r\n            namespace: action.type,\r\n            name: action.type\r\n          };\r\n          return _this.dispatcher.dispatch(utils.fsa(id, action.type, action.payload, fsaDetails));\r\n        }\r\n\r\n        if (action.id && action.dispatch) {\r\n          return utils.dispatch(id, action, data, _this);\r\n        }\r\n\r\n        return _this.dispatcher.dispatch(utils.fsa(id, action, data, details));\r\n      });\r\n    }\r\n\r\n    return dispatch;\r\n  }();\r\n\r\n  Alt.prototype.createUnsavedStore = function () {\r\n    function createUnsavedStore(StoreModel) {\r\n      var key = StoreModel.displayName || '';\r\n      store.createStoreConfig(this.config, StoreModel);\r\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\r\n\r\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      return fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\r\n    }\r\n\r\n    return createUnsavedStore;\r\n  }();\r\n\r\n  Alt.prototype.createStore = function () {\r\n    function createStore(StoreModel, iden) {\r\n      var key = iden || StoreModel.displayName || StoreModel.name || '';\r\n      store.createStoreConfig(this.config, StoreModel);\r\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\r\n\r\n      /* istanbul ignore next */\r\n      if (module.hot) delete this.stores[key];\r\n\r\n      if (this.stores[key] || !key) {\r\n        if (this.stores[key]) {\r\n          utils.warn('A store named ' + String(key) + ' already exists, double check your store ' + 'names or pass in your own custom identifier for each store');\r\n        } else {\r\n          utils.warn('Store name was not specified');\r\n        }\r\n\r\n        key = utils.uid(this.stores, key);\r\n      }\r\n\r\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\r\n        args[_key2 - 2] = arguments[_key2];\r\n      }\r\n\r\n      var storeInstance = fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\r\n\r\n      this.stores[key] = storeInstance;\r\n      StateFunctions.saveInitialSnapshot(this, key);\r\n\r\n      return storeInstance;\r\n    }\r\n\r\n    return createStore;\r\n  }();\r\n\r\n  Alt.prototype.generateActions = function () {\r\n    function generateActions() {\r\n      var actions = { name: 'global' };\r\n\r\n      for (var _len3 = arguments.length, actionNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\r\n        actionNames[_key3] = arguments[_key3];\r\n      }\r\n\r\n      return this.createActions(actionNames.reduce(function (obj, action) {\r\n        obj[action] = utils.dispatchIdentity;\r\n        return obj;\r\n      }, actions));\r\n    }\r\n\r\n    return generateActions;\r\n  }();\r\n\r\n  Alt.prototype.createAction = function () {\r\n    function createAction(name, implementation, obj) {\r\n      return (0, _actions2['default'])(this, 'global', name, implementation, obj);\r\n    }\r\n\r\n    return createAction;\r\n  }();\r\n\r\n  Alt.prototype.createActions = function () {\r\n    function createActions(ActionsClass) {\r\n      var _this3 = this;\r\n\r\n      var exportObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\r\n\r\n      var actions = {};\r\n      var key = utils.uid(this._actionsRegistry, ActionsClass.displayName || ActionsClass.name || 'Unknown');\r\n\r\n      if (fn.isFunction(ActionsClass)) {\r\n        fn.assign(actions, utils.getPrototypeChain(ActionsClass));\r\n\r\n        var ActionsGenerator = function (_ActionsClass) {\r\n          _inherits(ActionsGenerator, _ActionsClass);\r\n\r\n          function ActionsGenerator() {\r\n            _classCallCheck(this, ActionsGenerator);\r\n\r\n            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\r\n              args[_key5] = arguments[_key5];\r\n            }\r\n\r\n            return _possibleConstructorReturn(this, _ActionsClass.call.apply(_ActionsClass, [this].concat(args)));\r\n          }\r\n\r\n          ActionsGenerator.prototype.generateActions = function () {\r\n            function generateActions() {\r\n              for (var _len6 = arguments.length, actionNames = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\r\n                actionNames[_key6] = arguments[_key6];\r\n              }\r\n\r\n              actionNames.forEach(function (actionName) {\r\n                actions[actionName] = utils.dispatchIdentity;\r\n              });\r\n            }\r\n\r\n            return generateActions;\r\n          }();\r\n\r\n          return ActionsGenerator;\r\n        }(ActionsClass);\r\n\r\n        for (var _len4 = arguments.length, argsForConstructor = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\r\n          argsForConstructor[_key4 - 2] = arguments[_key4];\r\n        }\r\n\r\n        fn.assign(actions, new (Function.prototype.bind.apply(ActionsGenerator, [null].concat(argsForConstructor)))());\r\n      } else {\r\n        fn.assign(actions, ActionsClass);\r\n      }\r\n\r\n      this.actions[key] = this.actions[key] || {};\r\n\r\n      fn.eachObject(function (actionName, action) {\r\n        if (!fn.isFunction(action)) {\r\n          exportObj[actionName] = action;\r\n          return;\r\n        }\r\n\r\n        // create the action\r\n        exportObj[actionName] = (0, _actions2['default'])(_this3, key, actionName, action, exportObj);\r\n\r\n        // generate a constant\r\n        var constant = utils.formatAsConstant(actionName);\r\n        exportObj[constant] = exportObj[actionName].id;\r\n      }, [actions]);\r\n\r\n      return exportObj;\r\n    }\r\n\r\n    return createActions;\r\n  }();\r\n\r\n  Alt.prototype.takeSnapshot = function () {\r\n    function takeSnapshot() {\r\n      for (var _len7 = arguments.length, storeNames = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\r\n        storeNames[_key7] = arguments[_key7];\r\n      }\r\n\r\n      var state = StateFunctions.snapshot(this, storeNames);\r\n      fn.assign(this._lastSnapshot, state);\r\n      return this.serialize(state);\r\n    }\r\n\r\n    return takeSnapshot;\r\n  }();\r\n\r\n  Alt.prototype.rollback = function () {\r\n    function rollback() {\r\n      StateFunctions.setAppState(this, this.serialize(this._lastSnapshot), function (storeInst) {\r\n        storeInst.lifecycle('rollback');\r\n        storeInst.emitChange();\r\n      });\r\n    }\r\n\r\n    return rollback;\r\n  }();\r\n\r\n  Alt.prototype.recycle = function () {\r\n    function recycle() {\r\n      for (var _len8 = arguments.length, storeNames = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\r\n        storeNames[_key8] = arguments[_key8];\r\n      }\r\n\r\n      var initialSnapshot = storeNames.length ? StateFunctions.filterSnapshots(this, this._initSnapshot, storeNames) : this._initSnapshot;\r\n\r\n      StateFunctions.setAppState(this, this.serialize(initialSnapshot), function (storeInst) {\r\n        storeInst.lifecycle('init');\r\n        storeInst.emitChange();\r\n      });\r\n    }\r\n\r\n    return recycle;\r\n  }();\r\n\r\n  Alt.prototype.flush = function () {\r\n    function flush() {\r\n      var state = this.serialize(StateFunctions.snapshot(this));\r\n      this.recycle();\r\n      return state;\r\n    }\r\n\r\n    return flush;\r\n  }();\r\n\r\n  Alt.prototype.bootstrap = function () {\r\n    function bootstrap(data) {\r\n      StateFunctions.setAppState(this, data, function (storeInst, state) {\r\n        storeInst.lifecycle('bootstrap', state);\r\n        storeInst.emitChange();\r\n      });\r\n    }\r\n\r\n    return bootstrap;\r\n  }();\r\n\r\n  Alt.prototype.prepare = function () {\r\n    function prepare(storeInst, payload) {\r\n      var data = {};\r\n      if (!storeInst.displayName) {\r\n        throw new ReferenceError('Store provided does not have a name');\r\n      }\r\n      data[storeInst.displayName] = payload;\r\n      return this.serialize(data);\r\n    }\r\n\r\n    return prepare;\r\n  }();\r\n\r\n  // Instance type methods for injecting alt into your application as context\r\n\r\n  Alt.prototype.addActions = function () {\r\n    function addActions(name, ActionsClass) {\r\n      for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\r\n        args[_key9 - 2] = arguments[_key9];\r\n      }\r\n\r\n      this.actions[name] = Array.isArray(ActionsClass) ? this.generateActions.apply(this, ActionsClass) : this.createActions.apply(this, [ActionsClass].concat(args));\r\n    }\r\n\r\n    return addActions;\r\n  }();\r\n\r\n  Alt.prototype.addStore = function () {\r\n    function addStore(name, StoreModel) {\r\n      for (var _len10 = arguments.length, args = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\r\n        args[_key10 - 2] = arguments[_key10];\r\n      }\r\n\r\n      this.createStore.apply(this, [StoreModel, name].concat(args));\r\n    }\r\n\r\n    return addStore;\r\n  }();\r\n\r\n  Alt.prototype.getActions = function () {\r\n    function getActions(name) {\r\n      return this.actions[name];\r\n    }\r\n\r\n    return getActions;\r\n  }();\r\n\r\n  Alt.prototype.getStore = function () {\r\n    function getStore(name) {\r\n      return this.stores[name];\r\n    }\r\n\r\n    return getStore;\r\n  }();\r\n\r\n  Alt.debug = function () {\r\n    function debug(name, alt, win) {\r\n      var key = 'alt.js.org';\r\n      var context = win;\r\n      if (!context && typeof window !== 'undefined') {\r\n        context = window;\r\n      }\r\n      if (typeof context !== 'undefined') {\r\n        context[key] = context[key] || [];\r\n        context[key].push({ name: name, alt: alt });\r\n      }\r\n      return alt;\r\n    }\r\n\r\n    return debug;\r\n  }();\r\n\r\n  return Alt;\r\n}();\r\n\r\nexports['default'] = Alt;\r\nmodule.exports = exports['default'];","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _functions = require('../functions');\r\n\r\nvar fn = _interopRequireWildcard(_functions);\r\n\r\nvar _transmitter = require('transmitter');\r\n\r\nvar _transmitter2 = _interopRequireDefault(_transmitter);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nvar AltStore = function () {\r\n  function AltStore(alt, model, state, StoreModel) {\r\n    var _this = this;\r\n\r\n    _classCallCheck(this, AltStore);\r\n\r\n    var lifecycleEvents = model.lifecycleEvents;\r\n    this.transmitter = (0, _transmitter2['default'])();\r\n    this.lifecycle = function (event, x) {\r\n      if (lifecycleEvents[event]) lifecycleEvents[event].publish(x);\r\n    };\r\n    this.state = state;\r\n\r\n    this.alt = alt;\r\n    this.preventDefault = false;\r\n    this.displayName = model.displayName;\r\n    this.boundListeners = model.boundListeners;\r\n    this.StoreModel = StoreModel;\r\n    this.reduce = model.reduce || function (x) {\r\n      return x;\r\n    };\r\n    this.subscriptions = [];\r\n\r\n    var output = model.output || function (x) {\r\n      return x;\r\n    };\r\n\r\n    this.emitChange = function () {\r\n      return _this.transmitter.publish(output(_this.state));\r\n    };\r\n\r\n    var handleDispatch = function handleDispatch(f, payload) {\r\n      try {\r\n        return f();\r\n      } catch (e) {\r\n        if (model.handlesOwnErrors) {\r\n          _this.lifecycle('error', {\r\n            error: e,\r\n            payload: payload,\r\n            state: _this.state\r\n          });\r\n          return false;\r\n        }\r\n\r\n        throw e;\r\n      }\r\n    };\r\n\r\n    fn.assign(this, model.publicMethods);\r\n\r\n    // Register dispatcher\r\n    this.dispatchToken = alt.dispatcher.register(function (payload) {\r\n      _this.preventDefault = false;\r\n\r\n      _this.lifecycle('beforeEach', {\r\n        payload: payload,\r\n        state: _this.state\r\n      });\r\n\r\n      var actionHandlers = model.actionListeners[payload.action];\r\n\r\n      if (actionHandlers || model.otherwise) {\r\n        var result = void 0;\r\n\r\n        if (actionHandlers) {\r\n          result = handleDispatch(function () {\r\n            return actionHandlers.filter(Boolean).every(function (handler) {\r\n              return handler.call(model, payload.data, payload.action) !== false;\r\n            });\r\n          }, payload);\r\n        } else {\r\n          result = handleDispatch(function () {\r\n            return model.otherwise(payload.data, payload.action);\r\n          }, payload);\r\n        }\r\n\r\n        if (result !== false && !_this.preventDefault) _this.emitChange();\r\n      }\r\n\r\n      if (model.reduce) {\r\n        handleDispatch(function () {\r\n          var value = model.reduce(_this.state, payload);\r\n          if (value !== undefined) _this.state = value;\r\n        }, payload);\r\n        if (!_this.preventDefault) _this.emitChange();\r\n      }\r\n\r\n      _this.lifecycle('afterEach', {\r\n        payload: payload,\r\n        state: _this.state\r\n      });\r\n    });\r\n\r\n    this.lifecycle('init');\r\n  }\r\n\r\n  AltStore.prototype.listen = function () {\r\n    function listen(cb) {\r\n      var _this2 = this;\r\n\r\n      if (!fn.isFunction(cb)) throw new TypeError('listen expects a function');\r\n\r\n      var _transmitter$subscrib = this.transmitter.subscribe(cb);\r\n\r\n      var dispose = _transmitter$subscrib.dispose;\r\n\r\n      this.subscriptions.push({ cb: cb, dispose: dispose });\r\n      return function () {\r\n        _this2.lifecycle('unlisten');\r\n        dispose();\r\n      };\r\n    }\r\n\r\n    return listen;\r\n  }();\r\n\r\n  AltStore.prototype.unlisten = function () {\r\n    function unlisten(cb) {\r\n      this.lifecycle('unlisten');\r\n      this.subscriptions.filter(function (subscription) {\r\n        return subscription.cb === cb;\r\n      }).forEach(function (subscription) {\r\n        return subscription.dispose();\r\n      });\r\n    }\r\n\r\n    return unlisten;\r\n  }();\r\n\r\n  AltStore.prototype.getState = function () {\r\n    function getState() {\r\n      return this.StoreModel.config.getState.call(this, this.state);\r\n    }\r\n\r\n    return getState;\r\n  }();\r\n\r\n  return AltStore;\r\n}();\r\n\r\nexports['default'] = AltStore;\r\nmodule.exports = exports['default'];","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _transmitter = require('transmitter');\r\n\r\nvar _transmitter2 = _interopRequireDefault(_transmitter);\r\n\r\nvar _functions = require('../functions');\r\n\r\nvar fn = _interopRequireWildcard(_functions);\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar StoreMixin = {\r\n  waitFor: function () {\r\n    function waitFor() {\r\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\r\n        sources[_key] = arguments[_key];\r\n      }\r\n\r\n      if (!sources.length) {\r\n        throw new ReferenceError('Dispatch tokens not provided');\r\n      }\r\n\r\n      var sourcesArray = sources;\r\n      if (sources.length === 1) {\r\n        sourcesArray = Array.isArray(sources[0]) ? sources[0] : sources;\r\n      }\r\n\r\n      var tokens = sourcesArray.map(function (source) {\r\n        return source.dispatchToken || source;\r\n      });\r\n\r\n      this.dispatcher.waitFor(tokens);\r\n    }\r\n\r\n    return waitFor;\r\n  }(),\r\n  exportAsync: function () {\r\n    function exportAsync(asyncMethods) {\r\n      this.registerAsync(asyncMethods);\r\n    }\r\n\r\n    return exportAsync;\r\n  }(),\r\n  registerAsync: function () {\r\n    function registerAsync(asyncDef) {\r\n      var _this = this;\r\n\r\n      var loadCounter = 0;\r\n\r\n      var asyncMethods = fn.isFunction(asyncDef) ? asyncDef(this.alt) : asyncDef;\r\n\r\n      var toExport = Object.keys(asyncMethods).reduce(function (publicMethods, methodName) {\r\n        var desc = asyncMethods[methodName];\r\n        var spec = fn.isFunction(desc) ? desc(_this) : desc;\r\n\r\n        var validHandlers = ['success', 'error', 'loading'];\r\n        validHandlers.forEach(function (handler) {\r\n          if (spec[handler] && !spec[handler].id) {\r\n            throw new Error(String(handler) + ' handler must be an action function');\r\n          }\r\n        });\r\n\r\n        publicMethods[methodName] = function () {\r\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n            args[_key2] = arguments[_key2];\r\n          }\r\n\r\n          var state = _this.getInstance().getState();\r\n          var value = spec.local && spec.local.apply(spec, [state].concat(args));\r\n          var shouldFetch = spec.shouldFetch ? spec.shouldFetch.apply(spec, [state].concat(args))\r\n          /*eslint-disable*/\r\n          : value == null;\r\n          /*eslint-enable*/\r\n          var intercept = spec.interceptResponse || function (x) {\r\n            return x;\r\n          };\r\n\r\n          var makeActionHandler = function () {\r\n            function makeActionHandler(action, isError) {\r\n              return function (x) {\r\n                var fire = function () {\r\n                  function fire() {\r\n                    loadCounter -= 1;\r\n                    action(intercept(x, action, args));\r\n                    if (isError) throw x;\r\n                    return x;\r\n                  }\r\n\r\n                  return fire;\r\n                }();\r\n                return _this.alt.trapAsync ? function () {\r\n                  return fire();\r\n                } : fire();\r\n              };\r\n            }\r\n\r\n            return makeActionHandler;\r\n          }();\r\n\r\n          // if we don't have it in cache then fetch it\r\n          if (shouldFetch) {\r\n            loadCounter += 1;\r\n            /* istanbul ignore else */\r\n            if (spec.loading) spec.loading(intercept(null, spec.loading, args));\r\n            return spec.remote.apply(spec, [state].concat(args)).then(makeActionHandler(spec.success), makeActionHandler(spec.error, 1));\r\n          }\r\n\r\n          // otherwise emit the change now\r\n          _this.emitChange();\r\n          return value;\r\n        };\r\n\r\n        return publicMethods;\r\n      }, {});\r\n\r\n      this.exportPublicMethods(toExport);\r\n      this.exportPublicMethods({\r\n        isLoading: function () {\r\n          function isLoading() {\r\n            return loadCounter > 0;\r\n          }\r\n\r\n          return isLoading;\r\n        }()\r\n      });\r\n    }\r\n\r\n    return registerAsync;\r\n  }(),\r\n  exportPublicMethods: function () {\r\n    function exportPublicMethods(methods) {\r\n      var _this2 = this;\r\n\r\n      fn.eachObject(function (methodName, value) {\r\n        if (!fn.isFunction(value)) {\r\n          throw new TypeError('exportPublicMethods expects a function');\r\n        }\r\n\r\n        _this2.publicMethods[methodName] = value;\r\n      }, [methods]);\r\n    }\r\n\r\n    return exportPublicMethods;\r\n  }(),\r\n  emitChange: function () {\r\n    function emitChange() {\r\n      this.getInstance().emitChange();\r\n    }\r\n\r\n    return emitChange;\r\n  }(),\r\n  on: function () {\r\n    function on(lifecycleEvent, handler) {\r\n      if (lifecycleEvent === 'error') this.handlesOwnErrors = true;\r\n      var bus = this.lifecycleEvents[lifecycleEvent] || (0, _transmitter2['default'])();\r\n      this.lifecycleEvents[lifecycleEvent] = bus;\r\n      return bus.subscribe(handler.bind(this));\r\n    }\r\n\r\n    return on;\r\n  }(),\r\n  bindAction: function () {\r\n    function bindAction(symbol, handler) {\r\n      if (!symbol) {\r\n        throw new ReferenceError('Invalid action reference passed in');\r\n      }\r\n      if (!fn.isFunction(handler)) {\r\n        throw new TypeError('bindAction expects a function');\r\n      }\r\n\r\n      // You can pass in the constant or the function itself\r\n      var key = symbol.id ? symbol.id : symbol;\r\n      this.actionListeners[key] = this.actionListeners[key] || [];\r\n      this.actionListeners[key].push(handler.bind(this));\r\n      this.boundListeners.push(key);\r\n    }\r\n\r\n    return bindAction;\r\n  }(),\r\n  bindActions: function () {\r\n    function bindActions(actions) {\r\n      var _this3 = this;\r\n\r\n      fn.eachObject(function (action, symbol) {\r\n        var matchFirstCharacter = /./;\r\n        var assumedEventHandler = action.replace(matchFirstCharacter, function (x) {\r\n          return 'on' + String(x[0].toUpperCase());\r\n        });\r\n\r\n        if (_this3[action] && _this3[assumedEventHandler]) {\r\n          // If you have both action and onAction\r\n          throw new ReferenceError('You have multiple action handlers bound to an action: ' + (String(action) + ' and ' + String(assumedEventHandler)));\r\n        }\r\n\r\n        var handler = _this3[action] || _this3[assumedEventHandler];\r\n        if (handler) {\r\n          _this3.bindAction(symbol, handler);\r\n        }\r\n      }, [actions]);\r\n    }\r\n\r\n    return bindActions;\r\n  }(),\r\n  bindListeners: function () {\r\n    function bindListeners(obj) {\r\n      var _this4 = this;\r\n\r\n      fn.eachObject(function (methodName, symbol) {\r\n        var listener = _this4[methodName];\r\n\r\n        if (!listener) {\r\n          throw new ReferenceError(String(methodName) + ' defined but does not exist in ' + String(_this4.displayName));\r\n        }\r\n\r\n        if (Array.isArray(symbol)) {\r\n          symbol.forEach(function (action) {\r\n            _this4.bindAction(action, listener);\r\n          });\r\n        } else {\r\n          _this4.bindAction(symbol, listener);\r\n        }\r\n      }, [obj]);\r\n    }\r\n\r\n    return bindListeners;\r\n  }()\r\n};\r\n\r\nexports['default'] = StoreMixin;\r\nmodule.exports = exports['default'];","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.createStoreConfig = createStoreConfig;\r\nexports.transformStore = transformStore;\r\nexports.createStoreFromObject = createStoreFromObject;\r\nexports.createStoreFromClass = createStoreFromClass;\r\n\r\nvar _AltUtils = require('../utils/AltUtils');\r\n\r\nvar utils = _interopRequireWildcard(_AltUtils);\r\n\r\nvar _functions = require('../functions');\r\n\r\nvar fn = _interopRequireWildcard(_functions);\r\n\r\nvar _AltStore = require('./AltStore');\r\n\r\nvar _AltStore2 = _interopRequireDefault(_AltStore);\r\n\r\nvar _StoreMixin = require('./StoreMixin');\r\n\r\nvar _StoreMixin2 = _interopRequireDefault(_StoreMixin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nfunction doSetState(store, storeInstance, state) {\r\n  if (!state) {\r\n    return;\r\n  }\r\n\r\n  var config = storeInstance.StoreModel.config;\r\n\r\n\r\n  var nextState = fn.isFunction(state) ? state(storeInstance.state) : state;\r\n\r\n  storeInstance.state = config.setState.call(store, storeInstance.state, nextState);\r\n\r\n  if (!store.alt.dispatcher.isDispatching()) {\r\n    store.emitChange();\r\n  }\r\n}\r\n\r\nfunction createPrototype(proto, alt, key, extras) {\r\n  return fn.assign(proto, _StoreMixin2['default'], {\r\n    displayName: key,\r\n    alt: alt,\r\n    dispatcher: alt.dispatcher,\r\n    preventDefault: function () {\r\n      function preventDefault() {\r\n        this.getInstance().preventDefault = true;\r\n      }\r\n\r\n      return preventDefault;\r\n    }(),\r\n\r\n    boundListeners: [],\r\n    lifecycleEvents: {},\r\n    actionListeners: {},\r\n    publicMethods: {},\r\n    handlesOwnErrors: false\r\n  }, extras);\r\n}\r\n\r\nfunction createStoreConfig(globalConfig, StoreModel) {\r\n  StoreModel.config = fn.assign({\r\n    getState: function () {\r\n      function getState(state) {\r\n        if (Array.isArray(state)) {\r\n          return state.slice();\r\n        } else if (fn.isMutableObject(state)) {\r\n          return fn.assign({}, state);\r\n        }\r\n\r\n        return state;\r\n      }\r\n\r\n      return getState;\r\n    }(),\r\n    setState: function () {\r\n      function setState(currentState, nextState) {\r\n        if (fn.isMutableObject(nextState)) {\r\n          return fn.assign(currentState, nextState);\r\n        }\r\n        return nextState;\r\n      }\r\n\r\n      return setState;\r\n    }()\r\n  }, globalConfig, StoreModel.config);\r\n}\r\n\r\nfunction transformStore(transforms, StoreModel) {\r\n  return transforms.reduce(function (Store, transform) {\r\n    return transform(Store);\r\n  }, StoreModel);\r\n}\r\n\r\nfunction createStoreFromObject(alt, StoreModel, key) {\r\n  var storeInstance = void 0;\r\n\r\n  var StoreProto = createPrototype({}, alt, key, fn.assign({\r\n    getInstance: function () {\r\n      function getInstance() {\r\n        return storeInstance;\r\n      }\r\n\r\n      return getInstance;\r\n    }(),\r\n    setState: function () {\r\n      function setState(nextState) {\r\n        doSetState(this, storeInstance, nextState);\r\n      }\r\n\r\n      return setState;\r\n    }()\r\n  }, StoreModel));\r\n\r\n  // bind the store listeners\r\n  /* istanbul ignore else */\r\n  if (StoreProto.bindListeners) {\r\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.bindListeners);\r\n  }\r\n  /* istanbul ignore else */\r\n  if (StoreProto.observe) {\r\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.observe(alt));\r\n  }\r\n\r\n  // bind the lifecycle events\r\n  /* istanbul ignore else */\r\n  if (StoreProto.lifecycle) {\r\n    fn.eachObject(function (eventName, event) {\r\n      _StoreMixin2['default'].on.call(StoreProto, eventName, event);\r\n    }, [StoreProto.lifecycle]);\r\n  }\r\n\r\n  // create the instance and fn.assign the public methods to the instance\r\n  storeInstance = fn.assign(new _AltStore2['default'](alt, StoreProto, StoreProto.state !== undefined ? StoreProto.state : {}, StoreModel), StoreProto.publicMethods, {\r\n    displayName: key,\r\n    config: StoreModel.config\r\n  });\r\n\r\n  return storeInstance;\r\n}\r\n\r\nfunction createStoreFromClass(alt, StoreModel, key) {\r\n  var storeInstance = void 0;\r\n  var config = StoreModel.config;\r\n\r\n  // Creating a class here so we don't overload the provided store's\r\n  // prototype with the mixin behaviour and I'm extending from StoreModel\r\n  // so we can inherit any extensions from the provided store.\r\n\r\n  var Store = function (_StoreModel) {\r\n    _inherits(Store, _StoreModel);\r\n\r\n    function Store() {\r\n      _classCallCheck(this, Store);\r\n\r\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n        args[_key2] = arguments[_key2];\r\n      }\r\n\r\n      return _possibleConstructorReturn(this, _StoreModel.call.apply(_StoreModel, [this].concat(args)));\r\n    }\r\n\r\n    return Store;\r\n  }(StoreModel);\r\n\r\n  createPrototype(Store.prototype, alt, key, {\r\n    type: 'AltStore',\r\n    getInstance: function () {\r\n      function getInstance() {\r\n        return storeInstance;\r\n      }\r\n\r\n      return getInstance;\r\n    }(),\r\n    setState: function () {\r\n      function setState(nextState) {\r\n        doSetState(this, storeInstance, nextState);\r\n      }\r\n\r\n      return setState;\r\n    }()\r\n  });\r\n\r\n  for (var _len = arguments.length, argsForClass = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\r\n    argsForClass[_key - 3] = arguments[_key];\r\n  }\r\n\r\n  var store = new (Function.prototype.bind.apply(Store, [null].concat(argsForClass)))();\r\n\r\n  /* istanbul ignore next */\r\n  if (config.bindListeners) store.bindListeners(config.bindListeners);\r\n  /* istanbul ignore next */\r\n  if (config.datasource) store.registerAsync(config.datasource);\r\n\r\n  storeInstance = fn.assign(new _AltStore2['default'](alt, store, store.state !== undefined ? store.state : store, StoreModel), utils.getInternalMethods(StoreModel), config.publicMethods, { displayName: key });\r\n\r\n  return storeInstance;\r\n}","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nexports.getInternalMethods = getInternalMethods;\r\nexports.getPrototypeChain = getPrototypeChain;\r\nexports.warn = warn;\r\nexports.uid = uid;\r\nexports.formatAsConstant = formatAsConstant;\r\nexports.dispatchIdentity = dispatchIdentity;\r\nexports.fsa = fsa;\r\nexports.dispatch = dispatch;\r\n\r\nvar _functions = require('../functions');\r\n\r\nvar fn = _interopRequireWildcard(_functions);\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\r\n\r\n/*eslint-disable*/\r\nvar builtIns = Object.getOwnPropertyNames(NoopClass);\r\nvar builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);\r\n/*eslint-enable*/\r\n\r\nfunction getInternalMethods(Obj, isProto) {\r\n  var excluded = isProto ? builtInProto : builtIns;\r\n  var obj = isProto ? Obj.prototype : Obj;\r\n  return Object.getOwnPropertyNames(obj).reduce(function (value, m) {\r\n    if (excluded.indexOf(m) !== -1) {\r\n      return value;\r\n    }\r\n\r\n    value[m] = obj[m];\r\n    return value;\r\n  }, {});\r\n}\r\n\r\nfunction getPrototypeChain(Obj) {\r\n  var methods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\r\n\r\n  return Obj === Function.prototype ? methods : getPrototypeChain(Object.getPrototypeOf(Obj), fn.assign(getInternalMethods(Obj, true), methods));\r\n}\r\n\r\nfunction warn(msg) {\r\n  /* istanbul ignore else */\r\n  /*eslint-disable*/\r\n  if (typeof console !== 'undefined') {\r\n    console.warn(new ReferenceError(msg));\r\n  }\r\n  /*eslint-enable*/\r\n}\r\n\r\nfunction uid(container, name) {\r\n  var count = 0;\r\n  var key = name;\r\n  while (Object.hasOwnProperty.call(container, key)) {\r\n    key = name + String(++count);\r\n  }\r\n  return key;\r\n}\r\n\r\nfunction formatAsConstant(name) {\r\n  return name.replace(/[a-z]([A-Z])/g, function (i) {\r\n    return String(i[0]) + '_' + String(i[1].toLowerCase());\r\n  }).toUpperCase();\r\n}\r\n\r\nfunction dispatchIdentity(x) {\r\n  if (x === undefined) return null;\r\n\r\n  for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    a[_key - 1] = arguments[_key];\r\n  }\r\n\r\n  return a.length ? [x].concat(a) : x;\r\n}\r\n\r\nfunction fsa(id, type, payload, details) {\r\n  return {\r\n    type: type,\r\n    payload: payload,\r\n    meta: _extends({\r\n      dispatchId: id\r\n    }, details),\r\n\r\n    id: id,\r\n    action: type,\r\n    data: payload,\r\n    details: details\r\n  };\r\n}\r\n\r\nfunction dispatch(id, actionObj, payload, alt) {\r\n  var data = actionObj.dispatch(payload);\r\n  if (data === undefined) return null;\r\n\r\n  var type = actionObj.id;\r\n  var namespace = type;\r\n  var name = type;\r\n  var details = { id: type, namespace: namespace, name: name };\r\n\r\n  var dispatchLater = function dispatchLater(x) {\r\n    return alt.dispatch(type, x, details);\r\n  };\r\n\r\n  if (fn.isFunction(data)) return data(dispatchLater, alt);\r\n\r\n  // XXX standardize this\r\n  return alt.dispatcher.dispatch(fsa(id, type, data, details));\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction NoopClass() {}","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.setAppState = setAppState;\r\nexports.snapshot = snapshot;\r\nexports.saveInitialSnapshot = saveInitialSnapshot;\r\nexports.filterSnapshots = filterSnapshots;\r\n\r\nvar _functions = require('../functions');\r\n\r\nvar fn = _interopRequireWildcard(_functions);\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\r\n\r\nfunction setAppState(instance, data, onStore) {\r\n  var obj = instance.deserialize(data);\r\n  fn.eachObject(function (key, value) {\r\n    var store = instance.stores[key];\r\n    if (store) {\r\n      (function () {\r\n        var config = store.StoreModel.config;\r\n\r\n        var state = store.state;\r\n        if (config.onDeserialize) obj[key] = config.onDeserialize(value) || value;\r\n        if (fn.isMutableObject(state)) {\r\n          fn.eachObject(function (k) {\r\n            return delete state[k];\r\n          }, [state]);\r\n          fn.assign(state, obj[key]);\r\n        } else {\r\n          store.state = obj[key];\r\n        }\r\n        onStore(store, store.state);\r\n      })();\r\n    }\r\n  }, [obj]);\r\n}\r\n\r\nfunction snapshot(instance) {\r\n  var storeNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\r\n\r\n  var stores = storeNames.length ? storeNames : Object.keys(instance.stores);\r\n  return stores.reduce(function (obj, storeHandle) {\r\n    var storeName = storeHandle.displayName || storeHandle;\r\n    var store = instance.stores[storeName];\r\n    var config = store.StoreModel.config;\r\n\r\n    store.lifecycle('snapshot');\r\n    var customSnapshot = config.onSerialize && config.onSerialize(store.state);\r\n    obj[storeName] = customSnapshot ? customSnapshot : store.getState();\r\n    return obj;\r\n  }, {});\r\n}\r\n\r\nfunction saveInitialSnapshot(instance, key) {\r\n  var state = instance.deserialize(instance.serialize(instance.stores[key].state));\r\n  instance._initSnapshot[key] = state;\r\n  instance._lastSnapshot[key] = state;\r\n}\r\n\r\nfunction filterSnapshots(instance, state, stores) {\r\n  return stores.reduce(function (obj, store) {\r\n    var storeName = store.displayName || store;\r\n    if (!state[storeName]) {\r\n      throw new ReferenceError(String(storeName) + ' is not a valid store');\r\n    }\r\n    obj[storeName] = state[storeName];\r\n    return obj;\r\n  }, {});\r\n}","var pSlice = Array.prototype.slice;\r\nvar objectKeys = require('./lib/keys.js');\r\nvar isArguments = require('./lib/is_arguments.js');\r\n\r\nvar deepEqual = module.exports = function (actual, expected, opts) {\r\n  if (!opts) opts = {};\r\n  // 7.1. All identical values are equivalent, as determined by ===.\r\n  if (actual === expected) {\r\n    return true;\r\n\r\n  } else if (actual instanceof Date && expected instanceof Date) {\r\n    return actual.getTime() === expected.getTime();\r\n\r\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\r\n  // equivalence is determined by ==.\r\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\r\n    return opts.strict ? actual === expected : actual == expected;\r\n\r\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\r\n  // determined by having the same number of owned properties (as verified\r\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\r\n  // (although not necessarily the same order), equivalent values for every\r\n  // corresponding key, and an identical 'prototype' property. Note: this\r\n  // accounts for both named and indexed properties on Arrays.\r\n  } else {\r\n    return objEquiv(actual, expected, opts);\r\n  }\r\n}\r\n\r\nfunction isUndefinedOrNull(value) {\r\n  return value === null || value === undefined;\r\n}\r\n\r\nfunction isBuffer (x) {\r\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\r\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\r\n    return false;\r\n  }\r\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\r\n  return true;\r\n}\r\n\r\nfunction objEquiv(a, b, opts) {\r\n  var i, key;\r\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\r\n    return false;\r\n  // an identical 'prototype' property.\r\n  if (a.prototype !== b.prototype) return false;\r\n  //~~~I've managed to break Object.keys through screwy arguments passing.\r\n  //   Converting to array solves the problem.\r\n  if (isArguments(a)) {\r\n    if (!isArguments(b)) {\r\n      return false;\r\n    }\r\n    a = pSlice.call(a);\r\n    b = pSlice.call(b);\r\n    return deepEqual(a, b, opts);\r\n  }\r\n  if (isBuffer(a)) {\r\n    if (!isBuffer(b)) {\r\n      return false;\r\n    }\r\n    if (a.length !== b.length) return false;\r\n    for (i = 0; i < a.length; i++) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n  try {\r\n    var ka = objectKeys(a),\r\n        kb = objectKeys(b);\r\n  } catch (e) {//happens when one is a string literal and the other isn't\r\n    return false;\r\n  }\r\n  // having the same number of owned properties (keys incorporates\r\n  // hasOwnProperty)\r\n  if (ka.length != kb.length)\r\n    return false;\r\n  //the same set of keys (although not necessarily the same order),\r\n  ka.sort();\r\n  kb.sort();\r\n  //~~~cheap key test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    if (ka[i] != kb[i])\r\n      return false;\r\n  }\r\n  //equivalent values for every corresponding key, and\r\n  //~~~possibly expensive deep test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    key = ka[i];\r\n    if (!deepEqual(a[key], b[key], opts)) return false;\r\n  }\r\n  return typeof a === typeof b;\r\n}\r\n","var supportsArgumentsClass = (function(){\r\n  return Object.prototype.toString.call(arguments)\r\n})() == '[object Arguments]';\r\n\r\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\r\n\r\nexports.supported = supported;\r\nfunction supported(object) {\r\n  return Object.prototype.toString.call(object) == '[object Arguments]';\r\n};\r\n\r\nexports.unsupported = unsupported;\r\nfunction unsupported(object){\r\n  return object &&\r\n    typeof object == 'object' &&\r\n    typeof object.length == 'number' &&\r\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\r\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\r\n    false;\r\n};\r\n","exports = module.exports = typeof Object.keys === 'function'\r\n  ? Object.keys : shim;\r\n\r\nexports.shim = shim;\r\nfunction shim (obj) {\r\n  var keys = [];\r\n  for (var key in obj) keys.push(key);\r\n  return keys;\r\n}\r\n","/**\r\n * Copyright (c) 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n */\r\n\r\nmodule.exports.Dispatcher = require('./lib/Dispatcher');\r\n","/**\r\n * Copyright (c) 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule Dispatcher\r\n * \r\n * @preventMunge\r\n */\r\n\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\nvar _prefix = 'ID_';\r\n\r\n/**\r\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\r\n * different from generic pub-sub systems in two ways:\r\n *\r\n *   1) Callbacks are not subscribed to particular events. Every payload is\r\n *      dispatched to every registered callback.\r\n *   2) Callbacks can be deferred in whole or part until other callbacks have\r\n *      been executed.\r\n *\r\n * For example, consider this hypothetical flight destination form, which\r\n * selects a default city when a country is selected:\r\n *\r\n *   var flightDispatcher = new Dispatcher();\r\n *\r\n *   // Keeps track of which country is selected\r\n *   var CountryStore = {country: null};\r\n *\r\n *   // Keeps track of which city is selected\r\n *   var CityStore = {city: null};\r\n *\r\n *   // Keeps track of the base flight price of the selected city\r\n *   var FlightPriceStore = {price: null}\r\n *\r\n * When a user changes the selected city, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'city-update',\r\n *     selectedCity: 'paris'\r\n *   });\r\n *\r\n * This payload is digested by `CityStore`:\r\n *\r\n *   flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'city-update') {\r\n *       CityStore.city = payload.selectedCity;\r\n *     }\r\n *   });\r\n *\r\n * When the user selects a country, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'country-update',\r\n *     selectedCountry: 'australia'\r\n *   });\r\n *\r\n * This payload is digested by both stores:\r\n *\r\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       CountryStore.country = payload.selectedCountry;\r\n *     }\r\n *   });\r\n *\r\n * When the callback to update `CountryStore` is registered, we save a reference\r\n * to the returned token. Using this token with `waitFor()`, we can guarantee\r\n * that `CountryStore` is updated before the callback that updates `CityStore`\r\n * needs to query its data.\r\n *\r\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       // `CountryStore.country` may not be updated.\r\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\r\n *       // `CountryStore.country` is now guaranteed to be updated.\r\n *\r\n *       // Select the default city for the new country\r\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\r\n *     }\r\n *   });\r\n *\r\n * The usage of `waitFor()` can be chained, for example:\r\n *\r\n *   FlightPriceStore.dispatchToken =\r\n *     flightDispatcher.register(function(payload) {\r\n *       switch (payload.actionType) {\r\n *         case 'country-update':\r\n *         case 'city-update':\r\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\r\n *           FlightPriceStore.price =\r\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\r\n *           break;\r\n *     }\r\n *   });\r\n *\r\n * The `country-update` payload will be guaranteed to invoke the stores'\r\n * registered callbacks in order: `CountryStore`, `CityStore`, then\r\n * `FlightPriceStore`.\r\n */\r\n\r\nvar Dispatcher = (function () {\r\n  function Dispatcher() {\r\n    _classCallCheck(this, Dispatcher);\r\n\r\n    this._callbacks = {};\r\n    this._isDispatching = false;\r\n    this._isHandled = {};\r\n    this._isPending = {};\r\n    this._lastID = 1;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be invoked with every dispatched payload. Returns\r\n   * a token that can be used with `waitFor()`.\r\n   */\r\n\r\n  Dispatcher.prototype.register = function register(callback) {\r\n    var id = _prefix + this._lastID++;\r\n    this._callbacks[id] = callback;\r\n    return id;\r\n  };\r\n\r\n  /**\r\n   * Removes a callback based on its token.\r\n   */\r\n\r\n  Dispatcher.prototype.unregister = function unregister(id) {\r\n    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\r\n    delete this._callbacks[id];\r\n  };\r\n\r\n  /**\r\n   * Waits for the callbacks specified to be invoked before continuing execution\r\n   * of the current callback. This method should only be used by a callback in\r\n   * response to a dispatched payload.\r\n   */\r\n\r\n  Dispatcher.prototype.waitFor = function waitFor(ids) {\r\n    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;\r\n    for (var ii = 0; ii < ids.length; ii++) {\r\n      var id = ids[ii];\r\n      if (this._isPending[id]) {\r\n        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;\r\n        continue;\r\n      }\r\n      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\r\n      this._invokeCallback(id);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Dispatches a payload to all registered callbacks.\r\n   */\r\n\r\n  Dispatcher.prototype.dispatch = function dispatch(payload) {\r\n    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\r\n    this._startDispatching(payload);\r\n    try {\r\n      for (var id in this._callbacks) {\r\n        if (this._isPending[id]) {\r\n          continue;\r\n        }\r\n        this._invokeCallback(id);\r\n      }\r\n    } finally {\r\n      this._stopDispatching();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Is this Dispatcher currently dispatching.\r\n   */\r\n\r\n  Dispatcher.prototype.isDispatching = function isDispatching() {\r\n    return this._isDispatching;\r\n  };\r\n\r\n  /**\r\n   * Call the callback stored with the given id. Also do some internal\r\n   * bookkeeping.\r\n   *\r\n   * @internal\r\n   */\r\n\r\n  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {\r\n    this._isPending[id] = true;\r\n    this._callbacks[id](this._pendingPayload);\r\n    this._isHandled[id] = true;\r\n  };\r\n\r\n  /**\r\n   * Set up bookkeeping needed when dispatching.\r\n   *\r\n   * @internal\r\n   */\r\n\r\n  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {\r\n    for (var id in this._callbacks) {\r\n      this._isPending[id] = false;\r\n      this._isHandled[id] = false;\r\n    }\r\n    this._pendingPayload = payload;\r\n    this._isDispatching = true;\r\n  };\r\n\r\n  /**\r\n   * Clear bookkeeping used for dispatching.\r\n   *\r\n   * @internal\r\n   */\r\n\r\n  Dispatcher.prototype._stopDispatching = function _stopDispatching() {\r\n    delete this._pendingPayload;\r\n    this._isDispatching = false;\r\n  };\r\n\r\n  return Dispatcher;\r\n})();\r\n\r\nmodule.exports = Dispatcher;","/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule invariant\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\r\n\r\nvar invariant = function (condition, format, a, b, c, d, e, f) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (format === undefined) {\r\n      throw new Error('invariant requires an error message argument');\r\n    }\r\n  }\r\n\r\n  if (!condition) {\r\n    var error;\r\n    if (format === undefined) {\r\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\r\n    } else {\r\n      var args = [a, b, c, d, e, f];\r\n      var argIndex = 0;\r\n      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {\r\n        return args[argIndex++];\r\n      }));\r\n    }\r\n\r\n    error.framesToPop = 1; // we don't care about invariant's own frame\r\n    throw error;\r\n  }\r\n};\r\n\r\nmodule.exports = invariant;","/**\r\n * Indicates that navigation was caused by a call to history.push.\r\n */\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\nvar PUSH = 'PUSH';\r\n\r\nexports.PUSH = PUSH;\r\n/**\r\n * Indicates that navigation was caused by a call to history.replace.\r\n */\r\nvar REPLACE = 'REPLACE';\r\n\r\nexports.REPLACE = REPLACE;\r\n/**\r\n * Indicates that navigation was caused by some other action such\r\n * as using a browser's back/forward buttons and/or manually manipulating\r\n * the URL in a browser's location bar. This is the default.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\r\n * for more information.\r\n */\r\nvar POP = 'POP';\r\n\r\nexports.POP = POP;\r\nexports['default'] = {\r\n  PUSH: PUSH,\r\n  REPLACE: REPLACE,\r\n  POP: POP\r\n};","\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports.loopAsync = loopAsync;\r\n\r\nfunction loopAsync(turns, work, callback) {\r\n  var currentTurn = 0;\r\n  var isDone = false;\r\n\r\n  function done() {\r\n    isDone = true;\r\n    callback.apply(this, arguments);\r\n  }\r\n\r\n  function next() {\r\n    if (isDone) return;\r\n\r\n    if (currentTurn < turns) {\r\n      work.call(this, currentTurn++, next, done);\r\n    } else {\r\n      done.apply(this, arguments);\r\n    }\r\n  }\r\n\r\n  next();\r\n}","/*eslint-disable no-empty */\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\nexports.saveState = saveState;\r\nexports.readState = readState;\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar _warning = require('warning');\r\n\r\nvar _warning2 = _interopRequireDefault(_warning);\r\n\r\nvar KeyPrefix = '@@History/';\r\nvar QuotaExceededError = 'QuotaExceededError';\r\nvar SecurityError = 'SecurityError';\r\n\r\nfunction createKey(key) {\r\n  return KeyPrefix + key;\r\n}\r\n\r\nfunction saveState(key, state) {\r\n  try {\r\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\r\n  } catch (error) {\r\n    if (error.name === SecurityError) {\r\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\r\n      // attempt to access window.sessionStorage.\r\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\r\n\r\n      return;\r\n    }\r\n\r\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\r\n      // Safari \"private mode\" throws QuotaExceededError.\r\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\r\n\r\n      return;\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction readState(key) {\r\n  var json = undefined;\r\n  try {\r\n    json = window.sessionStorage.getItem(createKey(key));\r\n  } catch (error) {\r\n    if (error.name === SecurityError) {\r\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\r\n      // attempt to access window.sessionStorage.\r\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (json) {\r\n    try {\r\n      return JSON.parse(json);\r\n    } catch (error) {\r\n      // Ignore invalid JSON.\r\n    }\r\n  }\r\n\r\n  return null;\r\n}","'use strict';\r\n\r\nexports.__esModule = true;\r\nexports.addEventListener = addEventListener;\r\nexports.removeEventListener = removeEventListener;\r\nexports.getHashPath = getHashPath;\r\nexports.replaceHashPath = replaceHashPath;\r\nexports.getWindowPath = getWindowPath;\r\nexports.go = go;\r\nexports.getUserConfirmation = getUserConfirmation;\r\nexports.supportsHistory = supportsHistory;\r\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\r\n\r\nfunction addEventListener(node, event, listener) {\r\n  if (node.addEventListener) {\r\n    node.addEventListener(event, listener, false);\r\n  } else {\r\n    node.attachEvent('on' + event, listener);\r\n  }\r\n}\r\n\r\nfunction removeEventListener(node, event, listener) {\r\n  if (node.removeEventListener) {\r\n    node.removeEventListener(event, listener, false);\r\n  } else {\r\n    node.detachEvent('on' + event, listener);\r\n  }\r\n}\r\n\r\nfunction getHashPath() {\r\n  // We can't use window.location.hash here because it's not\r\n  // consistent across browsers - Firefox will pre-decode it!\r\n  return window.location.href.split('#')[1] || '';\r\n}\r\n\r\nfunction replaceHashPath(path) {\r\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\r\n}\r\n\r\nfunction getWindowPath() {\r\n  return window.location.pathname + window.location.search + window.location.hash;\r\n}\r\n\r\nfunction go(n) {\r\n  if (n) window.history.go(n);\r\n}\r\n\r\nfunction getUserConfirmation(message, callback) {\r\n  callback(window.confirm(message));\r\n}\r\n\r\n/**\r\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\r\n *\r\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\r\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\r\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\r\n */\r\n\r\nfunction supportsHistory() {\r\n  var ua = navigator.userAgent;\r\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\r\n    return false;\r\n  }\r\n  // FIXME: Work around our browser history not working correctly on Chrome\r\n  // iOS: https://github.com/rackt/react-router/issues/2565\r\n  if (ua.indexOf('CriOS') !== -1) {\r\n    return false;\r\n  }\r\n  return window.history && 'pushState' in window.history;\r\n}\r\n\r\n/**\r\n * Returns false if using go(n) with hash history causes a full page reload.\r\n */\r\n\r\nfunction supportsGoWithoutReloadUsingHash() {\r\n  var ua = navigator.userAgent;\r\n  return ua.indexOf('Firefox') === -1;\r\n}","'use strict';\r\n\r\nexports.__esModule = true;\r\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\r\nexports.canUseDOM = canUseDOM;","'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar _invariant = require('invariant');\r\n\r\nvar _invariant2 = _interopRequireDefault(_invariant);\r\n\r\nvar _Actions = require('./Actions');\r\n\r\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\r\n\r\nvar _DOMUtils = require('./DOMUtils');\r\n\r\nvar _DOMStateStorage = require('./DOMStateStorage');\r\n\r\nvar _createDOMHistory = require('./createDOMHistory');\r\n\r\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\r\n\r\nvar _parsePath = require('./parsePath');\r\n\r\nvar _parsePath2 = _interopRequireDefault(_parsePath);\r\n\r\n/**\r\n * Creates and returns a history object that uses HTML5's history API\r\n * (pushState, replaceState, and the popstate event) to manage history.\r\n * This is the recommended method of managing history in browsers because\r\n * it provides the cleanest URLs.\r\n *\r\n * Note: In browsers that do not support the HTML5 history API full\r\n * page reloads will be used to preserve URLs.\r\n */\r\nfunction createBrowserHistory() {\r\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\r\n\r\n  var forceRefresh = options.forceRefresh;\r\n\r\n  var isSupported = _DOMUtils.supportsHistory();\r\n  var useRefresh = !isSupported || forceRefresh;\r\n\r\n  function getCurrentLocation(historyState) {\r\n    historyState = historyState || window.history.state || {};\r\n\r\n    var path = _DOMUtils.getWindowPath();\r\n    var _historyState = historyState;\r\n    var key = _historyState.key;\r\n\r\n    var state = undefined;\r\n    if (key) {\r\n      state = _DOMStateStorage.readState(key);\r\n    } else {\r\n      state = null;\r\n      key = history.createKey();\r\n\r\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\r\n    }\r\n\r\n    var location = _parsePath2['default'](path);\r\n\r\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\r\n  }\r\n\r\n  function startPopStateListener(_ref) {\r\n    var transitionTo = _ref.transitionTo;\r\n\r\n    function popStateListener(event) {\r\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\r\n\r\n      transitionTo(getCurrentLocation(event.state));\r\n    }\r\n\r\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\r\n\r\n    return function () {\r\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\r\n    };\r\n  }\r\n\r\n  function finishTransition(location) {\r\n    var basename = location.basename;\r\n    var pathname = location.pathname;\r\n    var search = location.search;\r\n    var hash = location.hash;\r\n    var state = location.state;\r\n    var action = location.action;\r\n    var key = location.key;\r\n\r\n    if (action === _Actions.POP) return; // Nothing to do.\r\n\r\n    _DOMStateStorage.saveState(key, state);\r\n\r\n    var path = (basename || '') + pathname + search + hash;\r\n    var historyState = {\r\n      key: key\r\n    };\r\n\r\n    if (action === _Actions.PUSH) {\r\n      if (useRefresh) {\r\n        window.location.href = path;\r\n        return false; // Prevent location update.\r\n      } else {\r\n          window.history.pushState(historyState, null, path);\r\n        }\r\n    } else {\r\n      // REPLACE\r\n      if (useRefresh) {\r\n        window.location.replace(path);\r\n        return false; // Prevent location update.\r\n      } else {\r\n          window.history.replaceState(historyState, null, path);\r\n        }\r\n    }\r\n  }\r\n\r\n  var history = _createDOMHistory2['default'](_extends({}, options, {\r\n    getCurrentLocation: getCurrentLocation,\r\n    finishTransition: finishTransition,\r\n    saveState: _DOMStateStorage.saveState\r\n  }));\r\n\r\n  var listenerCount = 0,\r\n      stopPopStateListener = undefined;\r\n\r\n  function listenBefore(listener) {\r\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\r\n\r\n    var unlisten = history.listenBefore(listener);\r\n\r\n    return function () {\r\n      unlisten();\r\n\r\n      if (--listenerCount === 0) stopPopStateListener();\r\n    };\r\n  }\r\n\r\n  function listen(listener) {\r\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\r\n\r\n    var unlisten = history.listen(listener);\r\n\r\n    return function () {\r\n      unlisten();\r\n\r\n      if (--listenerCount === 0) stopPopStateListener();\r\n    };\r\n  }\r\n\r\n  // deprecated\r\n  function registerTransitionHook(hook) {\r\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\r\n\r\n    history.registerTransitionHook(hook);\r\n  }\r\n\r\n  // deprecated\r\n  function unregisterTransitionHook(hook) {\r\n    history.unregisterTransitionHook(hook);\r\n\r\n    if (--listenerCount === 0) stopPopStateListener();\r\n  }\r\n\r\n  return _extends({}, history, {\r\n    listenBefore: listenBefore,\r\n    listen: listen,\r\n    registerTransitionHook: registerTransitionHook,\r\n    unregisterTransitionHook: unregisterTransitionHook\r\n  });\r\n}\r\n\r\nexports['default'] = createBrowserHistory;\r\nmodule.exports = exports['default'];","'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar _invariant = require('invariant');\r\n\r\nvar _invariant2 = _interopRequireDefault(_invariant);\r\n\r\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\r\n\r\nvar _DOMUtils = require('./DOMUtils');\r\n\r\nvar _createHistory = require('./createHistory');\r\n\r\nvar _createHistory2 = _interopRequireDefault(_createHistory);\r\n\r\nfunction createDOMHistory(options) {\r\n  var history = _createHistory2['default'](_extends({\r\n    getUserConfirmation: _DOMUtils.getUserConfirmation\r\n  }, options, {\r\n    go: _DOMUtils.go\r\n  }));\r\n\r\n  function listen(listener) {\r\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\r\n\r\n    return history.listen(listener);\r\n  }\r\n\r\n  return _extends({}, history, {\r\n    listen: listen\r\n  });\r\n}\r\n\r\nexports['default'] = createDOMHistory;\r\nmodule.exports = exports['default'];","//import warning from 'warning'\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar _deepEqual = require('deep-equal');\r\n\r\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\r\n\r\nvar _AsyncUtils = require('./AsyncUtils');\r\n\r\nvar _Actions = require('./Actions');\r\n\r\nvar _createLocation2 = require('./createLocation');\r\n\r\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\r\n\r\nvar _runTransitionHook = require('./runTransitionHook');\r\n\r\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\r\n\r\nvar _parsePath = require('./parsePath');\r\n\r\nvar _parsePath2 = _interopRequireDefault(_parsePath);\r\n\r\nvar _deprecate = require('./deprecate');\r\n\r\nvar _deprecate2 = _interopRequireDefault(_deprecate);\r\n\r\nfunction createRandomKey(length) {\r\n  return Math.random().toString(36).substr(2, length);\r\n}\r\n\r\nfunction locationsAreEqual(a, b) {\r\n  return a.pathname === b.pathname && a.search === b.search &&\r\n  //a.action === b.action && // Different action !== location change.\r\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\r\n}\r\n\r\nvar DefaultKeyLength = 6;\r\n\r\nfunction createHistory() {\r\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n  var getCurrentLocation = options.getCurrentLocation;\r\n  var finishTransition = options.finishTransition;\r\n  var saveState = options.saveState;\r\n  var go = options.go;\r\n  var keyLength = options.keyLength;\r\n  var getUserConfirmation = options.getUserConfirmation;\r\n\r\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\r\n\r\n  var transitionHooks = [];\r\n\r\n  function listenBefore(hook) {\r\n    transitionHooks.push(hook);\r\n\r\n    return function () {\r\n      transitionHooks = transitionHooks.filter(function (item) {\r\n        return item !== hook;\r\n      });\r\n    };\r\n  }\r\n\r\n  var allKeys = [];\r\n  var changeListeners = [];\r\n  var location = undefined;\r\n\r\n  function getCurrent() {\r\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\r\n      return allKeys.indexOf(pendingLocation.key);\r\n    } else if (location) {\r\n      return allKeys.indexOf(location.key);\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  function updateLocation(newLocation) {\r\n    var current = getCurrent();\r\n\r\n    location = newLocation;\r\n\r\n    if (location.action === _Actions.PUSH) {\r\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\r\n    } else if (location.action === _Actions.REPLACE) {\r\n      allKeys[current] = location.key;\r\n    }\r\n\r\n    changeListeners.forEach(function (listener) {\r\n      listener(location);\r\n    });\r\n  }\r\n\r\n  function listen(listener) {\r\n    changeListeners.push(listener);\r\n\r\n    if (location) {\r\n      listener(location);\r\n    } else {\r\n      var _location = getCurrentLocation();\r\n      allKeys = [_location.key];\r\n      updateLocation(_location);\r\n    }\r\n\r\n    return function () {\r\n      changeListeners = changeListeners.filter(function (item) {\r\n        return item !== listener;\r\n      });\r\n    };\r\n  }\r\n\r\n  function confirmTransitionTo(location, callback) {\r\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\r\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\r\n        if (result != null) {\r\n          done(result);\r\n        } else {\r\n          next();\r\n        }\r\n      });\r\n    }, function (message) {\r\n      if (getUserConfirmation && typeof message === 'string') {\r\n        getUserConfirmation(message, function (ok) {\r\n          callback(ok !== false);\r\n        });\r\n      } else {\r\n        callback(message !== false);\r\n      }\r\n    });\r\n  }\r\n\r\n  var pendingLocation = undefined;\r\n\r\n  function transitionTo(nextLocation) {\r\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\r\n\r\n    pendingLocation = nextLocation;\r\n\r\n    confirmTransitionTo(nextLocation, function (ok) {\r\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\r\n\r\n      if (ok) {\r\n        // treat PUSH to current path like REPLACE to be consistent with browsers\r\n        if (nextLocation.action === _Actions.PUSH) {\r\n          var prevPath = createPath(location);\r\n          var nextPath = createPath(nextLocation);\r\n\r\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\r\n        }\r\n\r\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\r\n      } else if (location && nextLocation.action === _Actions.POP) {\r\n        var prevIndex = allKeys.indexOf(location.key);\r\n        var nextIndex = allKeys.indexOf(nextLocation.key);\r\n\r\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\r\n      }\r\n    });\r\n  }\r\n\r\n  function push(location) {\r\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\r\n  }\r\n\r\n  function replace(location) {\r\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\r\n  }\r\n\r\n  function goBack() {\r\n    go(-1);\r\n  }\r\n\r\n  function goForward() {\r\n    go(1);\r\n  }\r\n\r\n  function createKey() {\r\n    return createRandomKey(keyLength);\r\n  }\r\n\r\n  function createPath(location) {\r\n    if (location == null || typeof location === 'string') return location;\r\n\r\n    var pathname = location.pathname;\r\n    var search = location.search;\r\n    var hash = location.hash;\r\n\r\n    var result = pathname;\r\n\r\n    if (search) result += search;\r\n\r\n    if (hash) result += hash;\r\n\r\n    return result;\r\n  }\r\n\r\n  function createHref(location) {\r\n    return createPath(location);\r\n  }\r\n\r\n  function createLocation(location, action) {\r\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\r\n\r\n    if (typeof action === 'object') {\r\n      //warning(\r\n      //  false,\r\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\r\n      //  'location descriptor instead'\r\n      //)\r\n\r\n      if (typeof location === 'string') location = _parsePath2['default'](location);\r\n\r\n      location = _extends({}, location, { state: action });\r\n\r\n      action = key;\r\n      key = arguments[3] || createKey();\r\n    }\r\n\r\n    return _createLocation3['default'](location, action, key);\r\n  }\r\n\r\n  // deprecated\r\n  function setState(state) {\r\n    if (location) {\r\n      updateLocationState(location, state);\r\n      updateLocation(location);\r\n    } else {\r\n      updateLocationState(getCurrentLocation(), state);\r\n    }\r\n  }\r\n\r\n  function updateLocationState(location, state) {\r\n    location.state = _extends({}, location.state, state);\r\n    saveState(location.key, location.state);\r\n  }\r\n\r\n  // deprecated\r\n  function registerTransitionHook(hook) {\r\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\r\n  }\r\n\r\n  // deprecated\r\n  function unregisterTransitionHook(hook) {\r\n    transitionHooks = transitionHooks.filter(function (item) {\r\n      return item !== hook;\r\n    });\r\n  }\r\n\r\n  // deprecated\r\n  function pushState(state, path) {\r\n    if (typeof path === 'string') path = _parsePath2['default'](path);\r\n\r\n    push(_extends({ state: state }, path));\r\n  }\r\n\r\n  // deprecated\r\n  function replaceState(state, path) {\r\n    if (typeof path === 'string') path = _parsePath2['default'](path);\r\n\r\n    replace(_extends({ state: state }, path));\r\n  }\r\n\r\n  return {\r\n    listenBefore: listenBefore,\r\n    listen: listen,\r\n    transitionTo: transitionTo,\r\n    push: push,\r\n    replace: replace,\r\n    go: go,\r\n    goBack: goBack,\r\n    goForward: goForward,\r\n    createKey: createKey,\r\n    createPath: createPath,\r\n    createHref: createHref,\r\n    createLocation: createLocation,\r\n\r\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\r\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\r\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\r\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\r\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\r\n  };\r\n}\r\n\r\nexports['default'] = createHistory;\r\nmodule.exports = exports['default'];","//import warning from 'warning'\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar _Actions = require('./Actions');\r\n\r\nvar _parsePath = require('./parsePath');\r\n\r\nvar _parsePath2 = _interopRequireDefault(_parsePath);\r\n\r\nfunction createLocation() {\r\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\r\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\r\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\r\n\r\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\r\n\r\n  if (typeof location === 'string') location = _parsePath2['default'](location);\r\n\r\n  if (typeof action === 'object') {\r\n    //warning(\r\n    //  false,\r\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\r\n    //  'location descriptor instead'\r\n    //)\r\n\r\n    location = _extends({}, location, { state: action });\r\n\r\n    action = key || _Actions.POP;\r\n    key = _fourthArg;\r\n  }\r\n\r\n  var pathname = location.pathname || '/';\r\n  var search = location.search || '';\r\n  var hash = location.hash || '';\r\n  var state = location.state || null;\r\n\r\n  return {\r\n    pathname: pathname,\r\n    search: search,\r\n    hash: hash,\r\n    state: state,\r\n    action: action,\r\n    key: key\r\n  };\r\n}\r\n\r\nexports['default'] = createLocation;\r\nmodule.exports = exports['default'];","//import warning from 'warning'\r\n\r\n\"use strict\";\r\n\r\nexports.__esModule = true;\r\nfunction deprecate(fn) {\r\n  return fn;\r\n  //return function () {\r\n  //  warning(false, '[history] ' + message)\r\n  //  return fn.apply(this, arguments)\r\n  //}\r\n}\r\n\r\nexports[\"default\"] = deprecate;\r\nmodule.exports = exports[\"default\"];","\"use strict\";\r\n\r\nexports.__esModule = true;\r\nfunction extractPath(string) {\r\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\r\n\r\n  if (match == null) return string;\r\n\r\n  return string.substring(match[0].length);\r\n}\r\n\r\nexports[\"default\"] = extractPath;\r\nmodule.exports = exports[\"default\"];","'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar _warning = require('warning');\r\n\r\nvar _warning2 = _interopRequireDefault(_warning);\r\n\r\nvar _extractPath = require('./extractPath');\r\n\r\nvar _extractPath2 = _interopRequireDefault(_extractPath);\r\n\r\nfunction parsePath(path) {\r\n  var pathname = _extractPath2['default'](path);\r\n  var search = '';\r\n  var hash = '';\r\n\r\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\r\n\r\n  var hashIndex = pathname.indexOf('#');\r\n  if (hashIndex !== -1) {\r\n    hash = pathname.substring(hashIndex);\r\n    pathname = pathname.substring(0, hashIndex);\r\n  }\r\n\r\n  var searchIndex = pathname.indexOf('?');\r\n  if (searchIndex !== -1) {\r\n    search = pathname.substring(searchIndex);\r\n    pathname = pathname.substring(0, searchIndex);\r\n  }\r\n\r\n  if (pathname === '') pathname = '/';\r\n\r\n  return {\r\n    pathname: pathname,\r\n    search: search,\r\n    hash: hash\r\n  };\r\n}\r\n\r\nexports['default'] = parsePath;\r\nmodule.exports = exports['default'];","'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar _warning = require('warning');\r\n\r\nvar _warning2 = _interopRequireDefault(_warning);\r\n\r\nfunction runTransitionHook(hook, location, callback) {\r\n  var result = hook(location, callback);\r\n\r\n  if (hook.length < 2) {\r\n    // Assume the hook runs synchronously and automatically\r\n    // call the callback with the return value.\r\n    callback(result);\r\n  } else {\r\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\r\n  }\r\n}\r\n\r\nexports['default'] = runTransitionHook;\r\nmodule.exports = exports['default'];","/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\r\n\r\nvar invariant = function(condition, format, a, b, c, d, e, f) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (format === undefined) {\r\n      throw new Error('invariant requires an error message argument');\r\n    }\r\n  }\r\n\r\n  if (!condition) {\r\n    var error;\r\n    if (format === undefined) {\r\n      error = new Error(\r\n        'Minified exception occurred; use the non-minified dev environment ' +\r\n        'for the full error message and additional helpful warnings.'\r\n      );\r\n    } else {\r\n      var args = [a, b, c, d, e, f];\r\n      var argIndex = 0;\r\n      error = new Error(\r\n        format.replace(/%s/g, function() { return args[argIndex++]; })\r\n      );\r\n      error.name = 'Invariant Violation';\r\n    }\r\n\r\n    error.framesToPop = 1; // we don't care about invariant's own frame\r\n    throw error;\r\n  }\r\n};\r\n\r\nmodule.exports = invariant;\r\n","module.exports = isPromise;\r\n\r\nfunction isPromise(obj) {\r\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\r\n}\r\n","// shim for using process in browser\r\nvar process = module.exports = {};\r\n\r\n// cached from whatever global is present so that test runners that stub it\r\n// don't break things.  But we need to wrap it in a try catch in case it is\r\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\r\n// function because try/catches deoptimize in certain engines.\r\n\r\nvar cachedSetTimeout;\r\nvar cachedClearTimeout;\r\n\r\nfunction defaultSetTimout() {\r\n    throw new Error('setTimeout has not been defined');\r\n}\r\nfunction defaultClearTimeout () {\r\n    throw new Error('clearTimeout has not been defined');\r\n}\r\n(function () {\r\n    try {\r\n        if (typeof setTimeout === 'function') {\r\n            cachedSetTimeout = setTimeout;\r\n        } else {\r\n            cachedSetTimeout = defaultSetTimout;\r\n        }\r\n    } catch (e) {\r\n        cachedSetTimeout = defaultSetTimout;\r\n    }\r\n    try {\r\n        if (typeof clearTimeout === 'function') {\r\n            cachedClearTimeout = clearTimeout;\r\n        } else {\r\n            cachedClearTimeout = defaultClearTimeout;\r\n        }\r\n    } catch (e) {\r\n        cachedClearTimeout = defaultClearTimeout;\r\n    }\r\n} ())\r\nfunction runTimeout(fun) {\r\n    if (cachedSetTimeout === setTimeout) {\r\n        //normal enviroments in sane situations\r\n        return setTimeout(fun, 0);\r\n    }\r\n    // if setTimeout wasn't available but was latter defined\r\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\r\n        cachedSetTimeout = setTimeout;\r\n        return setTimeout(fun, 0);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedSetTimeout(fun, 0);\r\n    } catch(e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\r\n            return cachedSetTimeout.call(null, fun, 0);\r\n        } catch(e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\r\n            return cachedSetTimeout.call(this, fun, 0);\r\n        }\r\n    }\r\n\r\n\r\n}\r\nfunction runClearTimeout(marker) {\r\n    if (cachedClearTimeout === clearTimeout) {\r\n        //normal enviroments in sane situations\r\n        return clearTimeout(marker);\r\n    }\r\n    // if clearTimeout wasn't available but was latter defined\r\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\r\n        cachedClearTimeout = clearTimeout;\r\n        return clearTimeout(marker);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedClearTimeout(marker);\r\n    } catch (e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\r\n            return cachedClearTimeout.call(null, marker);\r\n        } catch (e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\r\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\r\n            return cachedClearTimeout.call(this, marker);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\nvar queue = [];\r\nvar draining = false;\r\nvar currentQueue;\r\nvar queueIndex = -1;\r\n\r\nfunction cleanUpNextTick() {\r\n    if (!draining || !currentQueue) {\r\n        return;\r\n    }\r\n    draining = false;\r\n    if (currentQueue.length) {\r\n        queue = currentQueue.concat(queue);\r\n    } else {\r\n        queueIndex = -1;\r\n    }\r\n    if (queue.length) {\r\n        drainQueue();\r\n    }\r\n}\r\n\r\nfunction drainQueue() {\r\n    if (draining) {\r\n        return;\r\n    }\r\n    var timeout = runTimeout(cleanUpNextTick);\r\n    draining = true;\r\n\r\n    var len = queue.length;\r\n    while(len) {\r\n        currentQueue = queue;\r\n        queue = [];\r\n        while (++queueIndex < len) {\r\n            if (currentQueue) {\r\n                currentQueue[queueIndex].run();\r\n            }\r\n        }\r\n        queueIndex = -1;\r\n        len = queue.length;\r\n    }\r\n    currentQueue = null;\r\n    draining = false;\r\n    runClearTimeout(timeout);\r\n}\r\n\r\nprocess.nextTick = function (fun) {\r\n    var args = new Array(arguments.length - 1);\r\n    if (arguments.length > 1) {\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            args[i - 1] = arguments[i];\r\n        }\r\n    }\r\n    queue.push(new Item(fun, args));\r\n    if (queue.length === 1 && !draining) {\r\n        runTimeout(drainQueue);\r\n    }\r\n};\r\n\r\n// v8 likes predictible objects\r\nfunction Item(fun, array) {\r\n    this.fun = fun;\r\n    this.array = array;\r\n}\r\nItem.prototype.run = function () {\r\n    this.fun.apply(null, this.array);\r\n};\r\nprocess.title = 'browser';\r\nprocess.browser = true;\r\nprocess.env = {};\r\nprocess.argv = [];\r\nprocess.version = ''; // empty string to avoid regexp issues\r\nprocess.versions = {};\r\n\r\nfunction noop() {}\r\n\r\nprocess.on = noop;\r\nprocess.addListener = noop;\r\nprocess.once = noop;\r\nprocess.off = noop;\r\nprocess.removeListener = noop;\r\nprocess.removeAllListeners = noop;\r\nprocess.emit = noop;\r\nprocess.prependListener = noop;\r\nprocess.prependOnceListener = noop;\r\n\r\nprocess.listeners = function (name) { return [] }\r\n\r\nprocess.binding = function (name) {\r\n    throw new Error('process.binding is not supported');\r\n};\r\n\r\nprocess.cwd = function () { return '/' };\r\nprocess.chdir = function (dir) {\r\n    throw new Error('process.chdir is not supported');\r\n};\r\nprocess.umask = function() { return 0; };\r\n","\"use strict\";\r\n\r\nfunction transmitter() {\r\n  var subscriptions = [];\r\n  var nowDispatching = false;\r\n  var toUnsubscribe = {};\r\n\r\n  var unsubscribe = function unsubscribe(onChange) {\r\n    var id = subscriptions.indexOf(onChange);\r\n    if (id < 0) return;\r\n    if (nowDispatching) {\r\n      toUnsubscribe[id] = onChange;\r\n      return;\r\n    }\r\n    subscriptions.splice(id, 1);\r\n  };\r\n\r\n  var subscribe = function subscribe(onChange) {\r\n    var id = subscriptions.push(onChange);\r\n    var dispose = function dispose() {\r\n      return unsubscribe(onChange);\r\n    };\r\n    return { dispose: dispose };\r\n  };\r\n\r\n  var publish = function publish() {\r\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    nowDispatching = true;\r\n    try {\r\n      subscriptions.forEach(function (subscription, id) {\r\n        return toUnsubscribe[id] || subscription.apply(undefined, args);\r\n      });\r\n    } finally {\r\n      nowDispatching = false;\r\n      Object.keys(toUnsubscribe).forEach(function (id) {\r\n        return unsubscribe(toUnsubscribe[id]);\r\n      });\r\n      toUnsubscribe = {};\r\n    }\r\n  };\r\n\r\n  return {\r\n    publish: publish,\r\n    subscribe: subscribe,\r\n    $subscriptions: subscriptions\r\n  };\r\n}\r\n\r\nmodule.exports = transmitter;","/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Similar to invariant but only logs a warning if the condition is not met.\r\n * This can be used to log issues in development environments in critical\r\n * paths. Removing the logging code for production environments will keep the\r\n * same logic and follow the same code paths.\r\n */\r\n\r\nvar warning = function() {};\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  warning = function(condition, format, args) {\r\n    var len = arguments.length;\r\n    args = new Array(len > 2 ? len - 2 : 0);\r\n    for (var key = 2; key < len; key++) {\r\n      args[key - 2] = arguments[key];\r\n    }\r\n    if (format === undefined) {\r\n      throw new Error(\r\n        '`warning(condition, format, ...args)` requires a warning ' +\r\n        'message argument'\r\n      );\r\n    }\r\n\r\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\r\n      throw new Error(\r\n        'The warning format should be able to uniquely identify this ' +\r\n        'warning. Please, use a more descriptive format than: ' + format\r\n      );\r\n    }\r\n\r\n    if (!condition) {\r\n      var argIndex = 0;\r\n      var message = 'Warning: ' +\r\n        format.replace(/%s/g, function() {\r\n          return args[argIndex++];\r\n        });\r\n      if (typeof console !== 'undefined') {\r\n        console.error(message);\r\n      }\r\n      try {\r\n        // This error was thrown as a convenience so that you can use this stack\r\n        // to find the callsite that caused this warning to fire.\r\n        throw new Error(message);\r\n      } catch(x) {}\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = warning;\r\n","import alt from '../alt'\r\n\r\nclass FooterActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'getFiveRecentMoviesSuccess'\r\n    )\r\n  }\r\n\r\n  getFiveRecentMovies () {\r\n    let request = {\r\n      method: 'get',\r\n      url: '/api/movies/five-recent'\r\n    }\r\n    $.ajax(request)\r\n      .done(data => this.getFiveRecentMoviesSuccess(data))\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(FooterActions)\r\n","import alt from '../alt'\r\nimport TMDB from '../utilities/RequesterTMDB'\r\n\r\nclass HomeActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'getTopTenMoviesSuccess',\r\n      'getTopTenMoviesFail'\r\n    )\r\n  }\r\n\r\n  getTopTenMovies () {\r\n    let request = {\r\n      url: '/api/movies/top-ten',\r\n      method: 'get'\r\n    }\r\n    $.ajax(request)\r\n      .done(payload => {\r\n        let tmdbPromises = []\r\n        for (let movie of payload) {\r\n          tmdbPromises.push(TMDB.getMoviePoster(movie.name))\r\n        }\r\n\r\n        Promise.all(tmdbPromises).then((promises) => {\r\n          let movies = []\r\n          for (let i = 0; i < payload.length; i++) {\r\n            let movieData = {\r\n              _id: payload[i]._id,\r\n              name: payload[i].name,\r\n              description: payload[i].description,\r\n              genres: payload[i].genres,\r\n              moviePosterUrl: promises[i].posterUrl\r\n            }\r\n            movies.push(movieData)\r\n          }\r\n          this.getTopTenMoviesSuccess(movies)\r\n        })\r\n      })\r\n      .fail(err => this.getTopTenMoviesFail(err))\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(HomeActions)\r\n","import alt from '../alt'\r\n\r\nclass MovieAddActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleNameChange',\r\n      'handleDescriptionChange',\r\n      'handleGenresChange',\r\n      'nameValidationFail',\r\n      'genresValidationFail',\r\n      'addMovieSuccess',\r\n      'addMovieFail'\r\n    )\r\n  }\r\n\r\n  addMovie (data) {\r\n    let request = {\r\n      url: '/api/movies/add',\r\n      method: 'post',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n    $.ajax(request)\r\n      .done(() => this.addMovieSuccess())\r\n      .fail((err) => this.addMovieFail(err))\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(MovieAddActions)\r\n","import alt from '../alt'\r\n\r\nclass NavbarActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'updateAjaxAnimation'\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(NavbarActions)\r\n","import alt from '../alt'\r\n\r\nclass UserActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'loginUserSuccess',\r\n      'loginUserFail',\r\n      'logoutUserSuccess'\r\n    )\r\n  }\r\n\r\n  loginUser () {\r\n    let request = {\r\n      url: '/user/login',\r\n      method: 'post',\r\n      data: JSON.stringify({ username: 'admin', password: 'admin' }),\r\n      contentType: 'application/json'\r\n    }\r\n    $.ajax(request)\r\n      .done(data => this.loginUserSuccess(data))\r\n      .fail(err => this.loginUserFail(err))\r\n\r\n    return true\r\n  }\r\n\r\n  logoutUser () {\r\n    let request = {\r\n      url: '/user/logout',\r\n      method: 'post'\r\n    }\r\n    $.ajax(request)\r\n      .done(() => this.logoutUserSuccess())\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(UserActions)\r\n","import Alt from 'alt'\r\n\r\nexport default new Alt()\r\n","import React from 'react'\r\n\r\nimport Navbar from './Navbar'\r\nimport Footer from './Footer'\r\n\r\nimport UserStore from '../stores/UserStore'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nexport default class App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n    UserActions.loginUser()\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        {this.props.children}\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router'\r\n\r\nimport FooterStore from '../stores/FooterStore'\r\nimport FooterActions from '../actions/FooterActions'\r\n\r\nexport default class Footer extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = FooterStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FooterStore.listen(this.onChange)\r\n\r\n    FooterActions.getFiveRecentMovies()\r\n    this.interval = setInterval(() => FooterActions.getFiveRecentMovies(), 30000)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FooterStore.unlisten(this.onChange)\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  render () {\r\n    let mostRecentMovies = this.state.mostRecentMovies.map(movie => {\r\n      return (\r\n        <li key={movie._id}>\r\n          <Link to={`/...`}>{movie.name}</Link>\r\n        </li>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <footer>\r\n        <div className='container'>\r\n          <div className='row'>\r\n            <div className='col-sm-5'>\r\n              <h3 className='lead'>\r\n                <strong>Information</strong> and\r\n                <strong> Copyright</strong>\r\n              </h3>\r\n              <p>\r\n                Powered by\r\n                <strong> Express</strong>\r\n                <strong> MongoDB</strong> and\r\n                <strong> React</strong>\r\n              </p>\r\n              <p>@ 2017 Softuni.</p>\r\n            </div>\r\n            <div className='col-sm-4 hidden-xs'>\r\n              <h3 className='lead'>\r\n                <strong>Newest</strong> 5 Movies\r\n              </h3>\r\n              <ul className='list-inline'>\r\n                {mostRecentMovies}\r\n              </ul>\r\n            </div>\r\n            <div className='col-sm-3'>\r\n              <h3 className='lead'>Author</h3>\r\n              <a href='https://github.com/achobanov'>\r\n                <strong> Alex Chobanov</strong>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport HomeActions from '../actions/HomeActions'\r\nimport HomeStore from '../stores/HomeStore'\r\n\r\nimport MovieCard from './sub-components/MovieCard'\r\n\r\nexport default class Home extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = HomeStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    HomeStore.listen(this.onChange)\r\n\r\n    HomeActions.getTopTenMovies()\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    HomeStore.unlisten(this.change)\r\n  }\r\n\r\n  render () {\r\n    let movies = this.state.topTenMovies.map((movie, index) => {\r\n      return (\r\n        <MovieCard key={movie._id}\r\n          movie={movie}\r\n          index={index} />\r\n\r\n      )\r\n    })\r\n    return (\r\n      <div className='container'>\r\n        <h3 className='text-center'>Welcome to\r\n          <strong> Movie Database</strong>\r\n        </h3>\r\n        <div className='list-group'>\r\n          {movies}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport MovieAddActions from '../actions/MovieAddActions'\r\nimport MovieAddStore from '../stores/MovieAddStore'\r\n\r\nexport default class AddMovie extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = MovieAddStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    console.log('Movie add listener attached.')\r\n    MovieAddStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    MovieAddStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    let name = this.state.name.trim()\r\n    let genres = this.state.genres\r\n    if (!name) {\r\n      MovieAddActions.nameValidationFail()\r\n    }\r\n    if (genres.length === 0) {\r\n      MovieAddActions.genresValidationFail()\r\n    }\r\n\r\n    if (name) {\r\n      let data = {\r\n        name: this.state.name,\r\n        description: this.state.description,\r\n        genres: this.state.genres\r\n      }\r\n      MovieAddActions.addMovie(data)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container'>\r\n        <div className='row flipInX animated'>\r\n          <div className='col-sm-8'>\r\n            <div className='panel panel-default'>\r\n              <div className='panel-heading'>Add Movie</div>\r\n              <div className='panel-body'>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                  <div className={'form-group ' + this.state.nameValidationState}>\r\n                    <label className='control-label'>Name</label>\r\n                    <input type='text' className='form-control' ref='nameTextField'\r\n                      value={this.state.name}\r\n                      onChange={MovieAddActions.handleNameChange} autoFocus />\r\n                    <span className='help-block'>{this.state.helpBlock}</span>\r\n                  </div>\r\n                  <div className='form-group'>\r\n                    <label className='control-label'>Description</label>\r\n                    <textarea className='form-control'\r\n                      rows='5'\r\n                      value={this.state.description}\r\n                      onChange={MovieAddActions.handleDescriptionChange} />\r\n                  </div>\r\n                  <div className={'form-group ' + this.state.genresValidationState}>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='action' value='Action'\r\n                        checked={this.state.genres.indexOf('Action') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='action'>Action</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='horror' value='Horror'\r\n                        checked={this.state.genres.indexOf('Horror') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='horror'>Horror</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='sci-fi' value='Sci-fi'\r\n                        checked={this.state.genres.indexOf('Sci-fi') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='sci-fi'>Sci-fi</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='fantasy' value='Fantasy'\r\n                        checked={this.state.genres.indexOf('Fantasy') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='fantasy'>Fantasy</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='romance' value='Romance'\r\n                        checked={this.state.genres.indexOf('Romance') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='romance'>Romance</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='thriller' value='Thriller'\r\n                        checked={this.state.genres.indexOf('Thriller') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='thriller'>Thriller</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='adventure' value='Adventure'\r\n                        checked={this.state.genres.indexOf('Adventure') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='adventure'>Adventure</label>\r\n                    </div>\r\n                  </div>\r\n                  <button type='submit' className='btn btn-primary'>Submit</button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router'\r\n\r\nimport NavbarActions from '../actions/NavbarActions'\r\nimport NavbarStore from '../stores/NavbarStore'\r\n\r\nimport NavbarUserMenu from './sub-components/NavbarUserMenu'\r\n\r\nexport default class Navbar extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = NavbarStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    NavbarStore.listen(this.onChange)\r\n\r\n    $(document).ajaxStart(() => NavbarActions.updateAjaxAnimation('fadeIn'))\r\n    $(document).ajaxComplete(() => NavbarActions.updateAjaxAnimation('fadeOut'))\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    NavbarStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let navbarUserMenu = <NavbarUserMenu userData={this.props.userData} />\r\n    return (\r\n      <nav className='navbar navbar-default navbar-static-top'>\r\n        <div className='navbar-header'>\r\n          <button type='button'\r\n            className='navbar-toggle collapsed'\r\n            data-toggle='collapse'\r\n            data-target='#navbar'>\r\n            <span className='sr-only'>Toggle navigation</span>\r\n            <span className='icon-bar' />\r\n            <span className='icon-bar' />\r\n            <span className='icon-bar' />\r\n          </button>\r\n          <Link to='/' className='navbar-brand'>\r\n            <span\r\n              style={{'opacity': 1}}\r\n              ref='triangles'\r\n              className={'triangles animated' + this.state.ajaxAnimationClass}>\r\n              <div className='tri invert' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n            </span>\r\n            MDB\r\n          </Link>\r\n        </div>\r\n        <div id='navbar' className='navbar-collapse collapse'>\r\n          <ul className='nav navbar-nav'>\r\n            <li>\r\n              <Link to='/'>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/movie/add'>Add Movie</Link>\r\n            </li>\r\n          </ul>\r\n          {navbarUserMenu}\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport UserStore from '../stores/UserStore'\r\nimport UserInfo from './sub-components/UserInfo'\r\nimport UserVotedMovies from './sub-components/UserRatedMovies'\r\nimport UserReviews from './sub-components/UserReviews'\r\n\r\nexport default class UserProfile extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let nodes = {}\r\n    nodes.roles = this.state.roles.map((role, index) => {\r\n      return (\r\n        <h4 key={index} className='lead'>\r\n          <strong>{role}</strong>\r\n        </h4>\r\n      )\r\n    })\r\n    return (\r\n      <div>\r\n        <UserInfo name={this.state.name}\r\n          roles={this.state.roles}\r\n          information={this.state.information} />\r\n        <UserVotedMovies votes={this.state.votes} />\r\n        <UserReviews reviews={this.props.reviews} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router'\r\n\r\nimport Helpers from '../../utilities/Helpers'\r\n\r\nexport default class MovieCard extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showVotePanel: false,\r\n      showCommentsPanel: false\r\n    }\r\n  }\r\n\r\n  toggleCommentsPanel () {\r\n    this.setState(prevState => ({\r\n      showCommentsPanel: !prevState.showCommentsPanel,\r\n      showVotePanel: false\r\n    }))\r\n  }\r\n\r\n  toggleVotePanel () {\r\n    this.setState(prevState => ({\r\n      showVotePanel: !prevState.showVotePanel,\r\n      showCommentsPanel: false\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    let nodes = Helpers.nodesMovieCard(\r\n      this.state,\r\n      this.props,\r\n      this.toggleCommentsPanel.bind(this),\r\n      this.toggleVotePanel.bind(this)\r\n    )\r\n\r\n    return (\r\n      <div className='animated fadeIn'>\r\n        <div className='media movie'>\r\n          <span className='position pull-left'>{this.props.index + 1}</span>\r\n          <div className='pull-left thumb-lg'>\r\n            {nodes.poster}\r\n          </div>\r\n          <div className='media-body'>\r\n            <h4 className='media-heading'>\r\n              <Link to={`/movie/${this.props.movie._id}/${this.props.movie.name}`}>\r\n                {this.props.movie.name}\r\n              </Link>\r\n            </h4>\r\n            <small>Genres: {nodes.genres}</small>\r\n            <br />\r\n            <p>{this.props.movie.description}</p>\r\n            <span className='votes'>Votes:\r\n              {/* <strong>{this.state.movieVotes}</strong> */}\r\n            </span>\r\n            {/* {nodes.rating} */}\r\n          </div>\r\n          {nodes.panelToggles}\r\n        </div>\r\n        {nodes.votePanel}\r\n        {nodes.commentsPanel}\r\n        <div id='clear' />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class MovieCommentsPanel extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='list-group'>\r\n        <h3 className='col-sm-3'>Comments: </h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class MovieVotePanel extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='col-sm-4 col-xs-offset-8 list-group-item animated fadeIn vote'>\r\n        <div className='media'>\r\n          <div className='media-body'>\r\n            Hello from MovieVotePanel\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router'\r\n\r\nimport UserActions from '../../actions/UserActions'\r\nimport UserStore from '../../stores/UserStore'\r\n\r\nexport default class NavbarUserMenu extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let userMenu\r\n    if (!this.state.loggedInUserId) {\r\n      userMenu = (\r\n        <ul className='nav navbar-nav pull-right'>\r\n          <li>\r\n            <a href='/user/login' onClick={UserActions.loginUser}>Login</a>\r\n          </li>\r\n          <li>\r\n            <Link to='/user/register'>Register</Link>\r\n          </li>\r\n        </ul>\r\n      )\r\n    } else {\r\n      userMenu = (\r\n        <ul className='nav navbar-nav pull-right'>\r\n          <li>\r\n            <Link to={`/user/profile/${this.state.loggedInUserId}`}>Profile</Link>\r\n          </li>\r\n          <li>\r\n            <a href='#' onClick={UserActions.logoutUser}>Logout</a>\r\n          </li>\r\n        </ul>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {userMenu}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class UserProfileInfo extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n  }\r\n\r\n  render () {\r\n    let roles\r\n    if (this.props.roles) {\r\n      roles = this.props.roles.map((role, index) => {\r\n        return (\r\n          <h4 key={index} className='lead'>\r\n            <strong>{role}</strong>\r\n          </h4>\r\n        )\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div className='container profile-container'>\r\n        <div className='profile-img'>\r\n          <img src='/images/user-default.png' />\r\n        </div>\r\n        <div className='profile-info clearfix'>\r\n          <h2><strong>{ this.props.name }</strong></h2>\r\n          <h4 className='lead'>Roles:</h4>\r\n          { roles }\r\n          <p>{ this.props.information }</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport UserRatedMoviesPanel from './UserRatedMoviesPanel'\r\n\r\nexport default class UserVotedMovies extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showRatedMoviesPanel: false\r\n    }\r\n  }\r\n\r\n  toggleRatedMovies () {\r\n    this.setState(prevState => ({\r\n      showRatedMoviesPanel: !prevState.showRatedMoviesPanel\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container profile-container'>\r\n        <div className='profile-stats clearfix'>\r\n          <ul>\r\n            <li>\r\n              <span className='stats-number'>{this.props.votes ? this.props.votes.length : 0}</span>Votes\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className='pull-right btn-group'>\r\n          <a className='btn btn-primary' onClick={this.toggleRatedMovies.bind(this)}>\r\n            {this.state.showRatedMoviesPanel ? 'Hide' : 'Rated Movies'}\r\n          </a>\r\n        </div>\r\n        {this.state.showRatedMoviesPanel ? <UserRatedMoviesPanel movies={this.props.votes} /> : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport MovieCard from './MovieCard'\r\n\r\nexport default class UserVotedMoviesPanel extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='list-group'>\r\n        Hello from UserVotedMoviesPanel\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport UserReviewsPanel from './UserReviewsPanel'\r\n\r\nexport default class UserReviews extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showReviewsPanel: false\r\n    }\r\n  }\r\n\r\n  toggleReviews () {\r\n    this.setState(prevState => ({\r\n      showReviewsPanel: !prevState.showReviewsPanel\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container profile-container'>\r\n        <div className='profile-stats clearfix'>\r\n          <ul>\r\n            <li>\r\n              <span className='stats-number'>{this.props.reviews ? this.props.reviews.length : 0}</span>Reviews\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className='pull-right btn-group'>\r\n          <a className='btn btn-primary' onClick={this.toggleReviews.bind(this)}>\r\n            {this.state.showReviewsPanel ? 'Hide' : 'Reviews'}\r\n          </a>\r\n        </div>\r\n        {this.state.showReviewsPanel ? <UserReviewsPanel reviews={this.props.reviews} /> : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class UserReviewsPanel extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container'>\r\n        <div className='list-group'>\r\n          Hello from UserReviewsPanel\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Router from 'react-router';\r\nimport ReactDOM from 'react-dom';\r\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\r\n\r\nimport routes from './routes';\r\n\r\nlet history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>{ routes }</Router>,\r\n    document.getElementById('app')\r\n);","import React from 'react'\r\nimport { Route } from 'react-router'\r\n\r\nimport App from './components/App'\r\nimport Home from './components/Home'\r\nimport MovieAdd from './components/MovieAdd'\r\nimport UserProfile from './components/UserProfile'\r\n\r\nexport default (\r\n  <Route component={App}>\r\n    <Route path='/' component={Home} />\r\n    <Route path='/movie/Add' component={MovieAdd} />\r\n    <Route path='/user/profile/:userId' component={UserProfile} />\r\n  </Route>\r\n)\r\n","import alt from '../alt'\r\nimport FooterActions from '../actions/FooterActions'\r\n\r\nclass FooterStore {\r\n  constructor () {\r\n    this.bindActions(FooterActions)\r\n\r\n    this.mostRecentMovies = []\r\n  }\r\n\r\n  onGetFiveRecentMoviesSuccess (data) {\r\n    this.mostRecentMovies = data\r\n  }\r\n}\r\n\r\nexport default alt.createStore(FooterStore)\r\n","import alt from '../alt'\r\nimport HomeActions from '../actions/HomeActions'\r\n\r\nclass HomeStore {\r\n  constructor () {\r\n    this.bindActions(HomeActions)\r\n\r\n    this.topTenMovies = []\r\n  }\r\n\r\n  onGetTopTenMoviesSuccess (movies) {\r\n    this.topTenMovies = movies\r\n  }\r\n\r\n  onGetTopTenMoviesFail (err) {\r\n    console.log('Could connect to DB', err)\r\n  }\r\n}\r\n\r\nexport default alt.createStore(HomeStore)\r\n","import alt from '../alt'\r\nimport MovieAddActions from '../actions/MovieAddActions'\r\nimport Helpers from '../utilities/Helpers'\r\n\r\nclass MovieAddStore {\r\n  constructor () {\r\n    this.bindActions(MovieAddActions)\r\n\r\n    this.name = ''\r\n    this.description = ''\r\n    this.genres = []\r\n    this.moviePosterUrl = ''\r\n    this.genresValidationState = ''\r\n    this.nameValidationState = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onAddMovieSuccess () {\r\n    console.log('Added movie!')\r\n  }\r\n\r\n  onAddMovieFail (err) {\r\n    console.log('Failed to add movie', err)\r\n  }\r\n\r\n  onGetMoviePosterSuccess (data) {\r\n    this.moviePosterUrl = data.posterUrl\r\n  }\r\n\r\n  onGetMoviePosterFail (err) {\r\n    console.log('Could not get movie post', err)\r\n  }\r\n\r\n  onHandleNameChange (e) {\r\n    this.name = e.target.value\r\n    this.nameValidationState = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onHandleDescriptionChange (e) {\r\n    this.description = e.target.value\r\n    this.genresValidationState = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onHandleGenresChange (e) {\r\n    let genreValue = e.target.value\r\n    if (this.genres.indexOf(genreValue) !== -1) {\r\n      this.genres = Helpers.removeFromArray(genreValue, this.genres)\r\n      e.target.setAttribute('checked', 'true')\r\n    } else {\r\n      this.genres = Helpers.appendToArray(genreValue, this.genres)\r\n      e.target.setAttribute('checked', 'false')\r\n    }\r\n    this.genresValidationState = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onNameValidationFail () {\r\n    this.nameValidationState = 'has-error'\r\n    this.helpBlock = 'Enter movie name'\r\n  }\r\n\r\n  onGenresValidationFail () {\r\n    this.genresValidationState = 'has-error'\r\n    this.helpBlock = 'Select at least one movie genre'\r\n  }\r\n}\r\n\r\nexport default alt.createStore(MovieAddStore)\r\n","import alt from '../alt'\r\nimport NavbarActions from '../actions/NavbarActions'\r\n\r\nclass NavbarStore {\r\n  constructor () {\r\n    this.bindActions(NavbarActions)\r\n\r\n    this.ajaxAnimationClass = ''\r\n  }\r\n\r\n  onUpdateAjaxAnimation (animationClass) {\r\n    this.ajaxAnimationClass = animationClass\r\n  }\r\n}\r\n\r\nexport default alt.createStore(NavbarStore)\r\n","import alt from '../alt'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nclass UserStore {\r\n  constructor () {\r\n    this.bindActions(UserActions)\r\n\r\n    this.loggedInUserId = ''\r\n    this.username = ''\r\n    this.roles = []\r\n  }\r\n\r\n  onLoginUserSuccess (user) {\r\n    this.loggedInUserId = user._id\r\n    this.username = user.username\r\n    this.roles = user.roles\r\n  }\r\n\r\n  onLoginUserFail () {\r\n    console.log('Failed login attempt')\r\n  }\r\n\r\n  onLogoutUserSuccess () {\r\n    this.loggedInUserId = ''\r\n    this.username = ''\r\n    this.roles = []\r\n  }\r\n}\r\n\r\nexport default alt.createStore(UserStore)\r\n","import React from 'react'\r\nimport { Link } from 'react-router'\r\n\r\nimport MovieVotePanel from '../components/sub-components/MovieVotePanel'\r\nimport MovieCommentsPanel from '../components/sub-components/MovieCommentsPanel'\r\n\r\nexport default class Helpers {\r\n  static appendToArray (value, array) {\r\n    array.push(value)\r\n\r\n    return array\r\n  }\r\n\r\n  static prependToArray (value, array) {\r\n    array.unshift(value)\r\n\r\n    return array\r\n  }\r\n\r\n  static removeFromArray (value, array) {\r\n    let index = array.indexOf(value)\r\n    if (index !== 1) {\r\n      array.splice(index, 1)\r\n    }\r\n\r\n    return array\r\n  }\r\n\r\n  static nodesMovieCard (state, props, toggleCommentsPanel, toggleVotePanel) {\r\n    let nodes = {}\r\n    if (state.showCommentsPanel) {\r\n      nodes.commentsPanel = <MovieCommentsPanel movieId={props.movie._id} />\r\n    }\r\n    if (state.showVotePanel) {\r\n      nodes.votePanel = <MovieVotePanel movieId={props.movie._id} />\r\n    }\r\n\r\n    nodes.panelToggles = (\r\n      <div className='pull-right btn-group'>\r\n        <a className='btn btn-primary'\r\n          onClick={toggleCommentsPanel} >\r\n          {state.showCommentsPanel ? 'Hide' : 'Comments'}\r\n        </a>\r\n        <a className='btn btn-primary'\r\n          onClick={toggleVotePanel} >\r\n          {state.showVotePanel ? 'Hide' : 'Vote'}\r\n        </a>\r\n        <Link to={`/movie/${props.movie._id}/review/add`} className='btn btn-warning'>Write review</Link>\r\n      </div>\r\n    )\r\n\r\n    nodes.genres = props.movie.genres.map(genre => {\r\n      return (\r\n        <strong key={props.movie._id + genre}>{genre}</strong>\r\n      )\r\n    })\r\n\r\n    if (props.movie.moviePosterUrl) {\r\n      nodes.poster = (\r\n        <img className='media-object' src={props.movie.moviePosterUrl} />\r\n      )\r\n    }\r\n\r\n    return nodes\r\n  }\r\n}\r\n","const API_KEY = '71aabd79c7082bcacabc96877ac7238b'\r\nconst SEARCH_BASE_URL = 'https://api.themoviedb.org/3/search/movie'\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500'\r\nconst UNVERIFIED_MOVIE_POSTER_URL = '/images/movie-unverified.png'\r\nconst MISSING_DATA_POSTER_URL = '/images/movie-missing-data.jpg'\r\n\r\nexport default class RequesterTMDB {\r\n  static getMoviePoster (movieName) {\r\n    return new Promise((resolve, reject) => {\r\n      let request = {\r\n        method: 'get',\r\n        url: `${SEARCH_BASE_URL}?api_key=${API_KEY}&query=${movieName}`\r\n      }\r\n      $.ajax(request)\r\n        .done(tmdbResponse => {\r\n          // console.log('TMDB response', tmdbResponse)\r\n          if (tmdbResponse.total_results === 0) {\r\n            resolve({ posterUrl: UNVERIFIED_MOVIE_POSTER_URL })\r\n            return\r\n          }\r\n\r\n          let posterPath = tmdbResponse.results[0].poster_path\r\n          if (posterPath === null) {\r\n            resolve({ posterUrl: MISSING_DATA_POSTER_URL })\r\n            return\r\n          }\r\n          resolve({ posterUrl: `${POSTER_BASE_URL}/${posterPath}` })\r\n        })\r\n        .fail(err => {\r\n          reject({\r\n            clientMessage: 'Request failed',\r\n            error: err\r\n          })\r\n        })\r\n    })\r\n  }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYWx0L2xpYi9hY3Rpb25zL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2FsdC9saWIvZnVuY3Rpb25zLmpzIiwibm9kZV9tb2R1bGVzL2FsdC9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYWx0L2xpYi9zdG9yZS9BbHRTdG9yZS5qcyIsIm5vZGVfbW9kdWxlcy9hbHQvbGliL3N0b3JlL1N0b3JlTWl4aW4uanMiLCJub2RlX21vZHVsZXMvYWx0L2xpYi9zdG9yZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hbHQvbGliL3V0aWxzL0FsdFV0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2FsdC9saWIvdXRpbHMvU3RhdGVGdW5jdGlvbnMuanMiLCJub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9pc19hcmd1bWVudHMuanMiLCJub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9saWIva2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9mbHV4L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2ZsdXgvbGliL0Rpc3BhdGNoZXIuanMiLCJub2RlX21vZHVsZXMvZmx1eC9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL0FjdGlvbnMuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvQXN5bmNVdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9ET01TdGF0ZVN0b3JhZ2UuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvRE9NVXRpbHMuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvY3JlYXRlRE9NSGlzdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9jcmVhdGVIaXN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL2NyZWF0ZUxvY2F0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL2RlcHJlY2F0ZS5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9leHRyYWN0UGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9wYXJzZVBhdGguanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvcnVuVHJhbnNpdGlvbkhvb2suanMiLCJub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvaXMtcHJvbWlzZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdHJhbnNtaXR0ZXIvZGlzdC90cmFuc21pdHRlci5qcyIsIm5vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJzb3VyY2VcXGNsaWVudFxcYWN0aW9uc1xcRm9vdGVyQWN0aW9ucy5qcyIsInNvdXJjZVxcY2xpZW50XFxhY3Rpb25zXFxIb21lQWN0aW9ucy5qcyIsInNvdXJjZVxcY2xpZW50XFxhY3Rpb25zXFxNb3ZpZUFkZEFjdGlvbnMuanMiLCJzb3VyY2VcXGNsaWVudFxcYWN0aW9uc1xcTmF2YmFyQWN0aW9ucy5qcyIsInNvdXJjZVxcY2xpZW50XFxhY3Rpb25zXFxVc2VyQWN0aW9ucy5qcyIsInNvdXJjZVxcY2xpZW50XFxhbHQuanMiLCJzb3VyY2VcXGNsaWVudFxcY29tcG9uZW50c1xcQXBwLmpzIiwic291cmNlXFxjbGllbnRcXGNvbXBvbmVudHNcXEZvb3Rlci5qcyIsInNvdXJjZVxcY2xpZW50XFxjb21wb25lbnRzXFxIb21lLmpzIiwic291cmNlXFxjbGllbnRcXGNvbXBvbmVudHNcXE1vdmllQWRkLmpzIiwic291cmNlXFxjbGllbnRcXGNvbXBvbmVudHNcXE5hdmJhci5qcyIsInNvdXJjZVxcY2xpZW50XFxjb21wb25lbnRzXFxVc2VyUHJvZmlsZS5qcyIsInNvdXJjZVxcY2xpZW50XFxjb21wb25lbnRzXFxzdWItY29tcG9uZW50c1xcTW92aWVDYXJkLmpzIiwic291cmNlXFxjbGllbnRcXGNvbXBvbmVudHNcXHN1Yi1jb21wb25lbnRzXFxNb3ZpZUNvbW1lbnRzUGFuZWwuanMiLCJzb3VyY2VcXGNsaWVudFxcY29tcG9uZW50c1xcc3ViLWNvbXBvbmVudHNcXE1vdmllVm90ZVBhbmVsLmpzIiwic291cmNlXFxjbGllbnRcXGNvbXBvbmVudHNcXHN1Yi1jb21wb25lbnRzXFxOYXZiYXJVc2VyTWVudS5qcyIsInNvdXJjZVxcY2xpZW50XFxjb21wb25lbnRzXFxzdWItY29tcG9uZW50c1xcVXNlckluZm8uanMiLCJzb3VyY2VcXGNsaWVudFxcY29tcG9uZW50c1xcc3ViLWNvbXBvbmVudHNcXFVzZXJSYXRlZE1vdmllcy5qcyIsInNvdXJjZVxcY2xpZW50XFxjb21wb25lbnRzXFxzdWItY29tcG9uZW50c1xcVXNlclJhdGVkTW92aWVzUGFuZWwuanMiLCJzb3VyY2VcXGNsaWVudFxcY29tcG9uZW50c1xcc3ViLWNvbXBvbmVudHNcXFVzZXJSZXZpZXdzLmpzIiwic291cmNlXFxjbGllbnRcXGNvbXBvbmVudHNcXHN1Yi1jb21wb25lbnRzXFxVc2VyUmV2aWV3c1BhbmVsLmpzIiwic291cmNlXFxjbGllbnRcXG1haW4uanMiLCJzb3VyY2VcXGNsaWVudFxccm91dGVzLmpzIiwic291cmNlXFxjbGllbnRcXHN0b3Jlc1xcRm9vdGVyU3RvcmUuanMiLCJzb3VyY2VcXGNsaWVudFxcc3RvcmVzXFxIb21lU3RvcmUuanMiLCJzb3VyY2VcXGNsaWVudFxcc3RvcmVzXFxNb3ZpZUFkZFN0b3JlLmpzIiwic291cmNlXFxjbGllbnRcXHN0b3Jlc1xcTmF2YmFyU3RvcmUuanMiLCJzb3VyY2VcXGNsaWVudFxcc3RvcmVzXFxVc2VyU3RvcmUuanMiLCJzb3VyY2VcXGNsaWVudFxcdXRpbGl0aWVzXFxIZWxwZXJzLmpzIiwic291cmNlXFxjbGllbnRcXHV0aWxpdGllc1xcUmVxdWVzdGVyVE1EQi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeFhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25OQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDdE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDNURBOzs7Ozs7OztJQUVNLGE7QUFDSiwyQkFBZTtBQUFBOztBQUNiLFNBQUssZUFBTCxDQUNFLDRCQURGO0FBR0Q7Ozs7MENBRXNCO0FBQUE7O0FBQ3JCLFVBQUksVUFBVTtBQUNaLGdCQUFRLEtBREk7QUFFWixhQUFLO0FBRk8sT0FBZDtBQUlBLFFBQUUsSUFBRixDQUFPLE9BQVAsRUFDRyxJQURILENBQ1E7QUFBQSxlQUFRLE1BQUssMEJBQUwsQ0FBZ0MsSUFBaEMsQ0FBUjtBQUFBLE9BRFI7O0FBR0EsYUFBTyxJQUFQO0FBQ0Q7Ozs7OztrQkFHWSxjQUFJLGFBQUosQ0FBa0IsYUFBbEIsQzs7Ozs7Ozs7Ozs7QUNyQmY7Ozs7QUFDQTs7Ozs7Ozs7SUFFTSxXO0FBQ0oseUJBQWU7QUFBQTs7QUFDYixTQUFLLGVBQUwsQ0FDRSx3QkFERixFQUVFLHFCQUZGO0FBSUQ7Ozs7c0NBRWtCO0FBQUE7O0FBQ2pCLFVBQUksVUFBVTtBQUNaLGFBQUsscUJBRE87QUFFWixnQkFBUTtBQUZJLE9BQWQ7QUFJQSxRQUFFLElBQUYsQ0FBTyxPQUFQLEVBQ0csSUFESCxDQUNRLG1CQUFXO0FBQ2YsWUFBSSxlQUFlLEVBQW5CO0FBRGU7QUFBQTtBQUFBOztBQUFBO0FBRWYsK0JBQWtCLE9BQWxCLDhIQUEyQjtBQUFBLGdCQUFsQixLQUFrQjs7QUFDekIseUJBQWEsSUFBYixDQUFrQix3QkFBSyxjQUFMLENBQW9CLE1BQU0sSUFBMUIsQ0FBbEI7QUFDRDtBQUpjO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTWYsZ0JBQVEsR0FBUixDQUFZLFlBQVosRUFBMEIsSUFBMUIsQ0FBK0IsVUFBQyxRQUFELEVBQWM7QUFDM0MsY0FBSSxTQUFTLEVBQWI7QUFDQSxlQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksUUFBUSxNQUE1QixFQUFvQyxHQUFwQyxFQUF5QztBQUN2QyxnQkFBSSxZQUFZO0FBQ2QsbUJBQUssUUFBUSxDQUFSLEVBQVcsR0FERjtBQUVkLG9CQUFNLFFBQVEsQ0FBUixFQUFXLElBRkg7QUFHZCwyQkFBYSxRQUFRLENBQVIsRUFBVyxXQUhWO0FBSWQsc0JBQVEsUUFBUSxDQUFSLEVBQVcsTUFKTDtBQUtkLDhCQUFnQixTQUFTLENBQVQsRUFBWTtBQUxkLGFBQWhCO0FBT0EsbUJBQU8sSUFBUCxDQUFZLFNBQVo7QUFDRDtBQUNELGdCQUFLLHNCQUFMLENBQTRCLE1BQTVCO0FBQ0QsU0FiRDtBQWNELE9BckJILEVBc0JHLElBdEJILENBc0JRO0FBQUEsZUFBTyxNQUFLLG1CQUFMLENBQXlCLEdBQXpCLENBQVA7QUFBQSxPQXRCUjs7QUF3QkEsYUFBTyxJQUFQO0FBQ0Q7Ozs7OztrQkFHWSxjQUFJLGFBQUosQ0FBa0IsV0FBbEIsQzs7Ozs7Ozs7Ozs7QUM1Q2Y7Ozs7Ozs7O0lBRU0sZTtBQUNKLDZCQUFlO0FBQUE7O0FBQ2IsU0FBSyxlQUFMLENBQ0Usa0JBREYsRUFFRSx5QkFGRixFQUdFLG9CQUhGLEVBSUUsb0JBSkYsRUFLRSxzQkFMRixFQU1FLGlCQU5GLEVBT0UsY0FQRjtBQVNEOzs7OzZCQUVTLEksRUFBTTtBQUFBOztBQUNkLFVBQUksVUFBVTtBQUNaLGFBQUssaUJBRE87QUFFWixnQkFBUSxNQUZJO0FBR1osY0FBTSxLQUFLLFNBQUwsQ0FBZSxJQUFmLENBSE07QUFJWixxQkFBYTtBQUpELE9BQWQ7QUFNQSxRQUFFLElBQUYsQ0FBTyxPQUFQLEVBQ0csSUFESCxDQUNRO0FBQUEsZUFBTSxNQUFLLGVBQUwsRUFBTjtBQUFBLE9BRFIsRUFFRyxJQUZILENBRVEsVUFBQyxHQUFEO0FBQUEsZUFBUyxNQUFLLFlBQUwsQ0FBa0IsR0FBbEIsQ0FBVDtBQUFBLE9BRlI7O0FBSUEsYUFBTyxJQUFQO0FBQ0Q7Ozs7OztrQkFHWSxjQUFJLGFBQUosQ0FBa0IsZUFBbEIsQzs7Ozs7Ozs7O0FDOUJmOzs7Ozs7OztJQUVNLGEsR0FDSix5QkFBZTtBQUFBOztBQUNiLE9BQUssZUFBTCxDQUNFLHFCQURGO0FBR0QsQzs7a0JBR1ksY0FBSSxhQUFKLENBQWtCLGFBQWxCLEM7Ozs7Ozs7Ozs7O0FDVmY7Ozs7Ozs7O0lBRU0sVztBQUNKLHlCQUFlO0FBQUE7O0FBQ2IsU0FBSyxlQUFMLENBQ0Usa0JBREYsRUFFRSxlQUZGLEVBR0UsbUJBSEY7QUFLRDs7OztnQ0FFWTtBQUFBOztBQUNYLFVBQUksVUFBVTtBQUNaLGFBQUssYUFETztBQUVaLGdCQUFRLE1BRkk7QUFHWixjQUFNLEtBQUssU0FBTCxDQUFlLEVBQUUsVUFBVSxPQUFaLEVBQXFCLFVBQVUsT0FBL0IsRUFBZixDQUhNO0FBSVoscUJBQWE7QUFKRCxPQUFkO0FBTUEsUUFBRSxJQUFGLENBQU8sT0FBUCxFQUNHLElBREgsQ0FDUTtBQUFBLGVBQVEsTUFBSyxnQkFBTCxDQUFzQixJQUF0QixDQUFSO0FBQUEsT0FEUixFQUVHLElBRkgsQ0FFUTtBQUFBLGVBQU8sTUFBSyxhQUFMLENBQW1CLEdBQW5CLENBQVA7QUFBQSxPQUZSOztBQUlBLGFBQU8sSUFBUDtBQUNEOzs7aUNBRWE7QUFBQTs7QUFDWixVQUFJLFVBQVU7QUFDWixhQUFLLGNBRE87QUFFWixnQkFBUTtBQUZJLE9BQWQ7QUFJQSxRQUFFLElBQUYsQ0FBTyxPQUFQLEVBQ0csSUFESCxDQUNRO0FBQUEsZUFBTSxPQUFLLGlCQUFMLEVBQU47QUFBQSxPQURSOztBQUdBLGFBQU8sSUFBUDtBQUNEOzs7Ozs7a0JBR1ksY0FBSSxhQUFKLENBQWtCLFdBQWxCLEM7Ozs7Ozs7OztBQ3JDZjs7Ozs7O2tCQUVlLG1COzs7Ozs7Ozs7OztBQ0ZmOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQixHOzs7QUFDbkIsZUFBYSxLQUFiLEVBQW9CO0FBQUE7O0FBQUEsMEdBQ1osS0FEWTs7QUFHbEIsVUFBSyxLQUFMLEdBQWEsb0JBQVUsUUFBVixFQUFiOztBQUVBLFVBQUssUUFBTCxHQUFnQixNQUFLLFFBQUwsQ0FBYyxJQUFkLE9BQWhCO0FBTGtCO0FBTW5COzs7OzZCQUVTLEssRUFBTztBQUNmLFdBQUssUUFBTCxDQUFjLEtBQWQ7QUFDRDs7O3dDQUVvQjtBQUNuQiwwQkFBVSxNQUFWLENBQWlCLEtBQUssUUFBdEI7QUFDQSw0QkFBWSxTQUFaO0FBQ0Q7OzsyQ0FFdUI7QUFDdEIsMEJBQVUsUUFBVixDQUFtQixLQUFLLFFBQXhCO0FBQ0Q7Ozs2QkFFUztBQUNSLGFBQ0U7QUFBQTtBQUFBO0FBQ0UsNkRBREY7QUFFRyxhQUFLLEtBQUwsQ0FBVyxRQUZkO0FBR0U7QUFIRixPQURGO0FBT0Q7Ozs7RUE5QjhCLGdCQUFNLFM7O2tCQUFsQixHOzs7Ozs7Ozs7OztBQ1JyQjs7OztBQUNBOztBQUVBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQixNOzs7QUFDbkIsa0JBQWEsS0FBYixFQUFvQjtBQUFBOztBQUFBLGdIQUNaLEtBRFk7O0FBR2xCLFVBQUssS0FBTCxHQUFhLHNCQUFZLFFBQVosRUFBYjs7QUFFQSxVQUFLLFFBQUwsR0FBZ0IsTUFBSyxRQUFMLENBQWMsSUFBZCxPQUFoQjtBQUxrQjtBQU1uQjs7Ozs2QkFFUyxLLEVBQU87QUFDZixXQUFLLFFBQUwsQ0FBYyxLQUFkO0FBQ0Q7Ozt3Q0FFb0I7QUFDbkIsNEJBQVksTUFBWixDQUFtQixLQUFLLFFBQXhCOztBQUVBLDhCQUFjLG1CQUFkO0FBQ0EsV0FBSyxRQUFMLEdBQWdCLFlBQVk7QUFBQSxlQUFNLHdCQUFjLG1CQUFkLEVBQU47QUFBQSxPQUFaLEVBQXVELEtBQXZELENBQWhCO0FBQ0Q7OzsyQ0FFdUI7QUFDdEIsNEJBQVksUUFBWixDQUFxQixLQUFLLFFBQTFCO0FBQ0Esb0JBQWMsS0FBSyxRQUFuQjtBQUNEOzs7NkJBRVM7QUFDUixVQUFJLG1CQUFtQixLQUFLLEtBQUwsQ0FBVyxnQkFBWCxDQUE0QixHQUE1QixDQUFnQyxpQkFBUztBQUM5RCxlQUNFO0FBQUE7QUFBQSxZQUFJLEtBQUssTUFBTSxHQUFmO0FBQ0U7QUFBQTtBQUFBLGNBQU0sVUFBTjtBQUFtQixrQkFBTTtBQUF6QjtBQURGLFNBREY7QUFLRCxPQU5zQixDQUF2Qjs7QUFRQSxhQUNFO0FBQUE7QUFBQTtBQUNFO0FBQUE7QUFBQSxZQUFLLFdBQVUsV0FBZjtBQUNFO0FBQUE7QUFBQSxjQUFLLFdBQVUsS0FBZjtBQUNFO0FBQUE7QUFBQSxnQkFBSyxXQUFVLFVBQWY7QUFDRTtBQUFBO0FBQUEsa0JBQUksV0FBVSxNQUFkO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkFERjtBQUFBO0FBRUU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUZGLGVBREY7QUFLRTtBQUFBO0FBQUE7QUFBQTtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBRkY7QUFHRTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQUhGO0FBQUE7QUFJRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSkYsZUFMRjtBQVdFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFYRixhQURGO0FBY0U7QUFBQTtBQUFBLGdCQUFLLFdBQVUsb0JBQWY7QUFDRTtBQUFBO0FBQUEsa0JBQUksV0FBVSxNQUFkO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkFERjtBQUFBO0FBQUEsZUFERjtBQUlFO0FBQUE7QUFBQSxrQkFBSSxXQUFVLGFBQWQ7QUFDRztBQURIO0FBSkYsYUFkRjtBQXNCRTtBQUFBO0FBQUEsZ0JBQUssV0FBVSxVQUFmO0FBQ0U7QUFBQTtBQUFBLGtCQUFJLFdBQVUsTUFBZDtBQUFBO0FBQUEsZUFERjtBQUVFO0FBQUE7QUFBQSxrQkFBRyxNQUFLLDhCQUFSO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBRkY7QUF0QkY7QUFERjtBQURGLE9BREY7QUFtQ0Q7Ozs7RUFyRWlDLGdCQUFNLFM7O2tCQUFyQixNOzs7Ozs7Ozs7OztBQ05yQjs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7Ozs7Ozs7O0lBRXFCLEk7OztBQUNuQixnQkFBYSxLQUFiLEVBQW9CO0FBQUE7O0FBQUEsNEdBQ1osS0FEWTs7QUFHbEIsVUFBSyxLQUFMLEdBQWEsb0JBQVUsUUFBVixFQUFiOztBQUVBLFVBQUssUUFBTCxHQUFnQixNQUFLLFFBQUwsQ0FBYyxJQUFkLE9BQWhCO0FBTGtCO0FBTW5COzs7OzZCQUVTLEssRUFBTztBQUNmLFdBQUssUUFBTCxDQUFjLEtBQWQ7QUFDRDs7O3dDQUVvQjtBQUNuQiwwQkFBVSxNQUFWLENBQWlCLEtBQUssUUFBdEI7O0FBRUEsNEJBQVksZUFBWjtBQUNEOzs7MkNBRXVCO0FBQ3RCLDBCQUFVLFFBQVYsQ0FBbUIsS0FBSyxNQUF4QjtBQUNEOzs7NkJBRVM7QUFDUixVQUFJLFNBQVMsS0FBSyxLQUFMLENBQVcsWUFBWCxDQUF3QixHQUF4QixDQUE0QixVQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWtCO0FBQ3pELGVBQ0UscURBQVcsS0FBSyxNQUFNLEdBQXRCO0FBQ0UsaUJBQU8sS0FEVDtBQUVFLGlCQUFPLEtBRlQsR0FERjtBQU1ELE9BUFksQ0FBYjtBQVFBLGFBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSxXQUFmO0FBQ0U7QUFBQTtBQUFBLFlBQUksV0FBVSxhQUFkO0FBQUE7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREYsU0FERjtBQUlFO0FBQUE7QUFBQSxZQUFLLFdBQVUsWUFBZjtBQUNHO0FBREg7QUFKRixPQURGO0FBVUQ7Ozs7RUExQytCLGdCQUFNLFM7O2tCQUFuQixJOzs7Ozs7Ozs7OztBQ1ByQjs7OztBQUVBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQixROzs7QUFDbkIsb0JBQWEsS0FBYixFQUFvQjtBQUFBOztBQUFBLG9IQUNaLEtBRFk7O0FBR2xCLFVBQUssS0FBTCxHQUFhLHdCQUFjLFFBQWQsRUFBYjs7QUFFQSxVQUFLLFFBQUwsR0FBZ0IsTUFBSyxRQUFMLENBQWMsSUFBZCxPQUFoQjtBQUxrQjtBQU1uQjs7Ozs2QkFFUyxLLEVBQU87QUFDZixXQUFLLFFBQUwsQ0FBYyxLQUFkO0FBQ0Q7Ozt3Q0FFb0I7QUFDbkIsY0FBUSxHQUFSLENBQVksOEJBQVo7QUFDQSw4QkFBYyxNQUFkLENBQXFCLEtBQUssUUFBMUI7QUFDRDs7OzJDQUV1QjtBQUN0Qiw4QkFBYyxRQUFkLENBQXVCLEtBQUssUUFBNUI7QUFDRDs7O2lDQUVhLEMsRUFBRztBQUNmLFFBQUUsY0FBRjs7QUFFQSxVQUFJLE9BQU8sS0FBSyxLQUFMLENBQVcsSUFBWCxDQUFnQixJQUFoQixFQUFYO0FBQ0EsVUFBSSxTQUFTLEtBQUssS0FBTCxDQUFXLE1BQXhCO0FBQ0EsVUFBSSxDQUFDLElBQUwsRUFBVztBQUNULGtDQUFnQixrQkFBaEI7QUFDRDtBQUNELFVBQUksT0FBTyxNQUFQLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCLGtDQUFnQixvQkFBaEI7QUFDRDs7QUFFRCxVQUFJLElBQUosRUFBVTtBQUNSLFlBQUksT0FBTztBQUNULGdCQUFNLEtBQUssS0FBTCxDQUFXLElBRFI7QUFFVCx1QkFBYSxLQUFLLEtBQUwsQ0FBVyxXQUZmO0FBR1Qsa0JBQVEsS0FBSyxLQUFMLENBQVc7QUFIVixTQUFYO0FBS0Esa0NBQWdCLFFBQWhCLENBQXlCLElBQXpCO0FBQ0Q7QUFDRjs7OzZCQUVTO0FBQ1IsYUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFVLFdBQWY7QUFDRTtBQUFBO0FBQUEsWUFBSyxXQUFVLHNCQUFmO0FBQ0U7QUFBQTtBQUFBLGNBQUssV0FBVSxVQUFmO0FBQ0U7QUFBQTtBQUFBLGdCQUFLLFdBQVUscUJBQWY7QUFDRTtBQUFBO0FBQUEsa0JBQUssV0FBVSxlQUFmO0FBQUE7QUFBQSxlQURGO0FBRUU7QUFBQTtBQUFBLGtCQUFLLFdBQVUsWUFBZjtBQUNFO0FBQUE7QUFBQSxvQkFBTSxVQUFVLEtBQUssWUFBTCxDQUFrQixJQUFsQixDQUF1QixJQUF2QixDQUFoQjtBQUNFO0FBQUE7QUFBQSxzQkFBSyxXQUFXLGdCQUFnQixLQUFLLEtBQUwsQ0FBVyxtQkFBM0M7QUFDRTtBQUFBO0FBQUEsd0JBQU8sV0FBVSxlQUFqQjtBQUFBO0FBQUEscUJBREY7QUFFRSw2REFBTyxNQUFLLE1BQVosRUFBbUIsV0FBVSxjQUE3QixFQUE0QyxLQUFJLGVBQWhEO0FBQ0UsNkJBQU8sS0FBSyxLQUFMLENBQVcsSUFEcEI7QUFFRSxnQ0FBVSwwQkFBZ0IsZ0JBRjVCLEVBRThDLGVBRjlDLEdBRkY7QUFLRTtBQUFBO0FBQUEsd0JBQU0sV0FBVSxZQUFoQjtBQUE4QiwyQkFBSyxLQUFMLENBQVc7QUFBekM7QUFMRixtQkFERjtBQVFFO0FBQUE7QUFBQSxzQkFBSyxXQUFVLFlBQWY7QUFDRTtBQUFBO0FBQUEsd0JBQU8sV0FBVSxlQUFqQjtBQUFBO0FBQUEscUJBREY7QUFFRSxnRUFBVSxXQUFVLGNBQXBCO0FBQ0UsNEJBQUssR0FEUDtBQUVFLDZCQUFPLEtBQUssS0FBTCxDQUFXLFdBRnBCO0FBR0UsZ0NBQVUsMEJBQWdCLHVCQUg1QjtBQUZGLG1CQVJGO0FBZUU7QUFBQTtBQUFBLHNCQUFLLFdBQVcsZ0JBQWdCLEtBQUssS0FBTCxDQUFXLHFCQUEzQztBQUNFO0FBQUE7QUFBQSx3QkFBSyxXQUFVLDBCQUFmO0FBQ0UsK0RBQU8sTUFBSyxVQUFaLEVBQXVCLE1BQUssUUFBNUIsRUFBcUMsSUFBRyxRQUF4QyxFQUFpRCxPQUFNLFFBQXZEO0FBQ0UsaUNBQVMsS0FBSyxLQUFMLENBQVcsTUFBWCxDQUFrQixPQUFsQixDQUEwQixRQUExQixNQUF3QyxDQUFDLENBRHBEO0FBRUUsa0NBQVUsMEJBQWdCLGtCQUY1QixHQURGO0FBSUU7QUFBQTtBQUFBLDBCQUFPLFNBQVEsUUFBZjtBQUFBO0FBQUE7QUFKRixxQkFERjtBQU9FO0FBQUE7QUFBQSx3QkFBSyxXQUFVLDBCQUFmO0FBQ0UsK0RBQU8sTUFBSyxVQUFaLEVBQXVCLE1BQUssUUFBNUIsRUFBcUMsSUFBRyxRQUF4QyxFQUFpRCxPQUFNLFFBQXZEO0FBQ0UsaUNBQVMsS0FBSyxLQUFMLENBQVcsTUFBWCxDQUFrQixPQUFsQixDQUEwQixRQUExQixNQUF3QyxDQUFDLENBRHBEO0FBRUUsa0NBQVUsMEJBQWdCLGtCQUY1QixHQURGO0FBSUU7QUFBQTtBQUFBLDBCQUFPLFNBQVEsUUFBZjtBQUFBO0FBQUE7QUFKRixxQkFQRjtBQWFFO0FBQUE7QUFBQSx3QkFBSyxXQUFVLDBCQUFmO0FBQ0UsK0RBQU8sTUFBSyxVQUFaLEVBQXVCLE1BQUssUUFBNUIsRUFBcUMsSUFBRyxRQUF4QyxFQUFpRCxPQUFNLFFBQXZEO0FBQ0UsaUNBQVMsS0FBSyxLQUFMLENBQVcsTUFBWCxDQUFrQixPQUFsQixDQUEwQixRQUExQixNQUF3QyxDQUFDLENBRHBEO0FBRUUsa0NBQVUsMEJBQWdCLGtCQUY1QixHQURGO0FBSUU7QUFBQTtBQUFBLDBCQUFPLFNBQVEsUUFBZjtBQUFBO0FBQUE7QUFKRixxQkFiRjtBQW1CRTtBQUFBO0FBQUEsd0JBQUssV0FBVSwwQkFBZjtBQUNFLCtEQUFPLE1BQUssVUFBWixFQUF1QixNQUFLLFFBQTVCLEVBQXFDLElBQUcsU0FBeEMsRUFBa0QsT0FBTSxTQUF4RDtBQUNFLGlDQUFTLEtBQUssS0FBTCxDQUFXLE1BQVgsQ0FBa0IsT0FBbEIsQ0FBMEIsU0FBMUIsTUFBeUMsQ0FBQyxDQURyRDtBQUVFLGtDQUFVLDBCQUFnQixrQkFGNUIsR0FERjtBQUlFO0FBQUE7QUFBQSwwQkFBTyxTQUFRLFNBQWY7QUFBQTtBQUFBO0FBSkYscUJBbkJGO0FBeUJFO0FBQUE7QUFBQSx3QkFBSyxXQUFVLDBCQUFmO0FBQ0UsK0RBQU8sTUFBSyxVQUFaLEVBQXVCLE1BQUssUUFBNUIsRUFBcUMsSUFBRyxTQUF4QyxFQUFrRCxPQUFNLFNBQXhEO0FBQ0UsaUNBQVMsS0FBSyxLQUFMLENBQVcsTUFBWCxDQUFrQixPQUFsQixDQUEwQixTQUExQixNQUF5QyxDQUFDLENBRHJEO0FBRUUsa0NBQVUsMEJBQWdCLGtCQUY1QixHQURGO0FBSUU7QUFBQTtBQUFBLDBCQUFPLFNBQVEsU0FBZjtBQUFBO0FBQUE7QUFKRixxQkF6QkY7QUErQkU7QUFBQTtBQUFBLHdCQUFLLFdBQVUsMEJBQWY7QUFDRSwrREFBTyxNQUFLLFVBQVosRUFBdUIsTUFBSyxRQUE1QixFQUFxQyxJQUFHLFVBQXhDLEVBQW1ELE9BQU0sVUFBekQ7QUFDRSxpQ0FBUyxLQUFLLEtBQUwsQ0FBVyxNQUFYLENBQWtCLE9BQWxCLENBQTBCLFVBQTFCLE1BQTBDLENBQUMsQ0FEdEQ7QUFFRSxrQ0FBVSwwQkFBZ0Isa0JBRjVCLEdBREY7QUFJRTtBQUFBO0FBQUEsMEJBQU8sU0FBUSxVQUFmO0FBQUE7QUFBQTtBQUpGLHFCQS9CRjtBQXFDRTtBQUFBO0FBQUEsd0JBQUssV0FBVSwwQkFBZjtBQUNFLCtEQUFPLE1BQUssVUFBWixFQUF1QixNQUFLLFFBQTVCLEVBQXFDLElBQUcsV0FBeEMsRUFBb0QsT0FBTSxXQUExRDtBQUNFLGlDQUFTLEtBQUssS0FBTCxDQUFXLE1BQVgsQ0FBa0IsT0FBbEIsQ0FBMEIsV0FBMUIsTUFBMkMsQ0FBQyxDQUR2RDtBQUVFLGtDQUFVLDBCQUFnQixrQkFGNUIsR0FERjtBQUlFO0FBQUE7QUFBQSwwQkFBTyxTQUFRLFdBQWY7QUFBQTtBQUFBO0FBSkY7QUFyQ0YsbUJBZkY7QUEyREU7QUFBQTtBQUFBLHNCQUFRLE1BQUssUUFBYixFQUFzQixXQUFVLGlCQUFoQztBQUFBO0FBQUE7QUEzREY7QUFERjtBQUZGO0FBREY7QUFERjtBQURGLE9BREY7QUEwRUQ7Ozs7RUF2SG1DLGdCQUFNLFM7O2tCQUF2QixROzs7Ozs7Ozs7OztBQ0xyQjs7OztBQUNBOztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7Ozs7Ozs7O0lBRXFCLE07OztBQUNuQixrQkFBYSxLQUFiLEVBQW9CO0FBQUE7O0FBQUEsZ0hBQ1osS0FEWTs7QUFHbEIsVUFBSyxLQUFMLEdBQWEsc0JBQVksUUFBWixFQUFiOztBQUVBLFVBQUssUUFBTCxHQUFnQixNQUFLLFFBQUwsQ0FBYyxJQUFkLE9BQWhCO0FBTGtCO0FBTW5COzs7OzZCQUVTLEssRUFBTztBQUNmLFdBQUssUUFBTCxDQUFjLEtBQWQ7QUFDRDs7O3dDQUVvQjtBQUNuQiw0QkFBWSxNQUFaLENBQW1CLEtBQUssUUFBeEI7O0FBRUEsUUFBRSxRQUFGLEVBQVksU0FBWixDQUFzQjtBQUFBLGVBQU0sd0JBQWMsbUJBQWQsQ0FBa0MsUUFBbEMsQ0FBTjtBQUFBLE9BQXRCO0FBQ0EsUUFBRSxRQUFGLEVBQVksWUFBWixDQUF5QjtBQUFBLGVBQU0sd0JBQWMsbUJBQWQsQ0FBa0MsU0FBbEMsQ0FBTjtBQUFBLE9BQXpCO0FBQ0Q7OzsyQ0FFdUI7QUFDdEIsNEJBQVksUUFBWixDQUFxQixLQUFLLFFBQTFCO0FBQ0Q7Ozs2QkFFUztBQUNSLFVBQUksaUJBQWlCLDBEQUFnQixVQUFVLEtBQUssS0FBTCxDQUFXLFFBQXJDLEdBQXJCO0FBQ0EsYUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFVLHlDQUFmO0FBQ0U7QUFBQTtBQUFBLFlBQUssV0FBVSxlQUFmO0FBQ0U7QUFBQTtBQUFBLGNBQVEsTUFBSyxRQUFiO0FBQ0UseUJBQVUseUJBRFo7QUFFRSw2QkFBWSxVQUZkO0FBR0UsNkJBQVksU0FIZDtBQUlFO0FBQUE7QUFBQSxnQkFBTSxXQUFVLFNBQWhCO0FBQUE7QUFBQSxhQUpGO0FBS0Usb0RBQU0sV0FBVSxVQUFoQixHQUxGO0FBTUUsb0RBQU0sV0FBVSxVQUFoQixHQU5GO0FBT0Usb0RBQU0sV0FBVSxVQUFoQjtBQVBGLFdBREY7QUFVRTtBQUFBO0FBQUEsY0FBTSxJQUFHLEdBQVQsRUFBYSxXQUFVLGNBQXZCO0FBQ0U7QUFBQTtBQUFBO0FBQ0UsdUJBQU8sRUFBQyxXQUFXLENBQVosRUFEVDtBQUVFLHFCQUFJLFdBRk47QUFHRSwyQkFBVyx1QkFBdUIsS0FBSyxLQUFMLENBQVcsa0JBSC9DO0FBSUUscURBQUssV0FBVSxZQUFmLEdBSkY7QUFLRSxxREFBSyxXQUFVLFlBQWYsR0FMRjtBQU1FLHFEQUFLLFdBQVUsS0FBZixHQU5GO0FBT0UscURBQUssV0FBVSxZQUFmLEdBUEY7QUFRRSxxREFBSyxXQUFVLFlBQWYsR0FSRjtBQVNFLHFEQUFLLFdBQVUsS0FBZixHQVRGO0FBVUUscURBQUssV0FBVSxZQUFmLEdBVkY7QUFXRSxxREFBSyxXQUFVLEtBQWYsR0FYRjtBQVlFLHFEQUFLLFdBQVUsWUFBZjtBQVpGLGFBREY7QUFBQTtBQUFBO0FBVkYsU0FERjtBQTZCRTtBQUFBO0FBQUEsWUFBSyxJQUFHLFFBQVIsRUFBaUIsV0FBVSwwQkFBM0I7QUFDRTtBQUFBO0FBQUEsY0FBSSxXQUFVLGdCQUFkO0FBQ0U7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGtCQUFNLElBQUcsR0FBVDtBQUFBO0FBQUE7QUFERixhQURGO0FBSUU7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGtCQUFNLElBQUcsWUFBVDtBQUFBO0FBQUE7QUFERjtBQUpGLFdBREY7QUFTRztBQVRIO0FBN0JGLE9BREY7QUEyQ0Q7Ozs7RUFyRWlDLGdCQUFNLFM7O2tCQUFyQixNOzs7Ozs7Ozs7OztBQ1JyQjs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUIsVzs7O0FBQ25CLHVCQUFhLEtBQWIsRUFBb0I7QUFBQTs7QUFBQSwwSEFDWixLQURZOztBQUdsQixVQUFLLEtBQUwsR0FBYSxvQkFBVSxRQUFWLEVBQWI7O0FBRUEsVUFBSyxRQUFMLEdBQWdCLE1BQUssUUFBTCxDQUFjLElBQWQsT0FBaEI7QUFMa0I7QUFNbkI7Ozs7NkJBRVMsSyxFQUFPO0FBQ2YsV0FBSyxRQUFMLENBQWMsS0FBZDtBQUNEOzs7d0NBRW9CO0FBQ25CLDBCQUFVLE1BQVYsQ0FBaUIsS0FBSyxRQUF0QjtBQUNEOzs7MkNBRXVCO0FBQ3RCLDBCQUFVLFFBQVYsQ0FBbUIsS0FBSyxRQUF4QjtBQUNEOzs7NkJBRVM7QUFDUixVQUFJLFFBQVEsRUFBWjtBQUNBLFlBQU0sS0FBTixHQUFjLEtBQUssS0FBTCxDQUFXLEtBQVgsQ0FBaUIsR0FBakIsQ0FBcUIsVUFBQyxJQUFELEVBQU8sS0FBUCxFQUFpQjtBQUNsRCxlQUNFO0FBQUE7QUFBQSxZQUFJLEtBQUssS0FBVCxFQUFnQixXQUFVLE1BQTFCO0FBQ0U7QUFBQTtBQUFBO0FBQVM7QUFBVDtBQURGLFNBREY7QUFLRCxPQU5hLENBQWQ7QUFPQSxhQUNFO0FBQUE7QUFBQTtBQUNFLDREQUFVLE1BQU0sS0FBSyxLQUFMLENBQVcsSUFBM0I7QUFDRSxpQkFBTyxLQUFLLEtBQUwsQ0FBVyxLQURwQjtBQUVFLHVCQUFhLEtBQUssS0FBTCxDQUFXLFdBRjFCLEdBREY7QUFJRSxtRUFBaUIsT0FBTyxLQUFLLEtBQUwsQ0FBVyxLQUFuQyxHQUpGO0FBS0UsK0RBQWEsU0FBUyxLQUFLLEtBQUwsQ0FBVyxPQUFqQztBQUxGLE9BREY7QUFTRDs7OztFQXZDc0MsZ0JBQU0sUzs7a0JBQTFCLFc7Ozs7Ozs7Ozs7O0FDUHJCOzs7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7OztJQUVxQixTOzs7QUFDbkIscUJBQWEsS0FBYixFQUFvQjtBQUFBOztBQUFBLHNIQUNaLEtBRFk7O0FBR2xCLFVBQUssS0FBTCxHQUFhO0FBQ1gscUJBQWUsS0FESjtBQUVYLHlCQUFtQjtBQUZSLEtBQWI7QUFIa0I7QUFPbkI7Ozs7MENBRXNCO0FBQ3JCLFdBQUssUUFBTCxDQUFjO0FBQUEsZUFBYztBQUMxQiw2QkFBbUIsQ0FBQyxVQUFVLGlCQURKO0FBRTFCLHlCQUFlO0FBRlcsU0FBZDtBQUFBLE9BQWQ7QUFJRDs7O3NDQUVrQjtBQUNqQixXQUFLLFFBQUwsQ0FBYztBQUFBLGVBQWM7QUFDMUIseUJBQWUsQ0FBQyxVQUFVLGFBREE7QUFFMUIsNkJBQW1CO0FBRk8sU0FBZDtBQUFBLE9BQWQ7QUFJRDs7OzZCQUVTO0FBQ1IsVUFBSSxRQUFRLGtCQUFRLGNBQVIsQ0FDVixLQUFLLEtBREssRUFFVixLQUFLLEtBRkssRUFHVixLQUFLLG1CQUFMLENBQXlCLElBQXpCLENBQThCLElBQTlCLENBSFUsRUFJVixLQUFLLGVBQUwsQ0FBcUIsSUFBckIsQ0FBMEIsSUFBMUIsQ0FKVSxDQUFaOztBQU9BLGFBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSxpQkFBZjtBQUNFO0FBQUE7QUFBQSxZQUFLLFdBQVUsYUFBZjtBQUNFO0FBQUE7QUFBQSxjQUFNLFdBQVUsb0JBQWhCO0FBQXNDLGlCQUFLLEtBQUwsQ0FBVyxLQUFYLEdBQW1CO0FBQXpELFdBREY7QUFFRTtBQUFBO0FBQUEsY0FBSyxXQUFVLG9CQUFmO0FBQ0csa0JBQU07QUFEVCxXQUZGO0FBS0U7QUFBQTtBQUFBLGNBQUssV0FBVSxZQUFmO0FBQ0U7QUFBQTtBQUFBLGdCQUFJLFdBQVUsZUFBZDtBQUNFO0FBQUE7QUFBQSxrQkFBTSxnQkFBYyxLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQWlCLEdBQS9CLFNBQXNDLEtBQUssS0FBTCxDQUFXLEtBQVgsQ0FBaUIsSUFBN0Q7QUFDRyxxQkFBSyxLQUFMLENBQVcsS0FBWCxDQUFpQjtBQURwQjtBQURGLGFBREY7QUFNRTtBQUFBO0FBQUE7QUFBQTtBQUFnQixvQkFBTTtBQUF0QixhQU5GO0FBT0UscURBUEY7QUFRRTtBQUFBO0FBQUE7QUFBSSxtQkFBSyxLQUFMLENBQVcsS0FBWCxDQUFpQjtBQUFyQixhQVJGO0FBU0U7QUFBQTtBQUFBLGdCQUFNLFdBQVUsT0FBaEI7QUFBQTtBQUFBO0FBVEYsV0FMRjtBQW1CRyxnQkFBTTtBQW5CVCxTQURGO0FBc0JHLGNBQU0sU0F0QlQ7QUF1QkcsY0FBTSxhQXZCVDtBQXdCRSwrQ0FBSyxJQUFHLE9BQVI7QUF4QkYsT0FERjtBQTRCRDs7OztFQTVEb0MsZ0JBQU0sUzs7a0JBQXhCLFM7Ozs7Ozs7Ozs7O0FDTHJCOzs7Ozs7Ozs7Ozs7SUFFcUIsa0I7Ozs7Ozs7Ozs7OzZCQUNUO0FBQ1IsYUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFVLFlBQWY7QUFDRTtBQUFBO0FBQUEsWUFBSSxXQUFVLFVBQWQ7QUFBQTtBQUFBO0FBREYsT0FERjtBQUtEOzs7O0VBUDZDLGdCQUFNLFM7O2tCQUFqQyxrQjs7Ozs7Ozs7Ozs7QUNGckI7Ozs7Ozs7Ozs7OztJQUVxQixjOzs7Ozs7Ozs7Ozs2QkFDVDtBQUNSLGFBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSwrREFBZjtBQUNFO0FBQUE7QUFBQSxZQUFLLFdBQVUsT0FBZjtBQUNFO0FBQUE7QUFBQSxjQUFLLFdBQVUsWUFBZjtBQUFBO0FBQUE7QUFERjtBQURGLE9BREY7QUFTRDs7OztFQVh5QyxnQkFBTSxTOztrQkFBN0IsYzs7Ozs7Ozs7Ozs7QUNGckI7Ozs7QUFDQTs7QUFFQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUIsYzs7O0FBQ25CLDBCQUFhLEtBQWIsRUFBb0I7QUFBQTs7QUFBQSxnSUFDWixLQURZOztBQUdsQixVQUFLLEtBQUwsR0FBYSxvQkFBVSxRQUFWLEVBQWI7O0FBRUEsVUFBSyxRQUFMLEdBQWdCLE1BQUssUUFBTCxDQUFjLElBQWQsT0FBaEI7QUFMa0I7QUFNbkI7Ozs7NkJBRVMsSyxFQUFPO0FBQ2YsV0FBSyxRQUFMLENBQWMsS0FBZDtBQUNEOzs7d0NBRW9CO0FBQ25CLDBCQUFVLE1BQVYsQ0FBaUIsS0FBSyxRQUF0QjtBQUNEOzs7MkNBRXVCO0FBQ3RCLDBCQUFVLFFBQVYsQ0FBbUIsS0FBSyxRQUF4QjtBQUNEOzs7NkJBRVM7QUFDUixVQUFJLGlCQUFKO0FBQ0EsVUFBSSxDQUFDLEtBQUssS0FBTCxDQUFXLGNBQWhCLEVBQWdDO0FBQzlCLG1CQUNFO0FBQUE7QUFBQSxZQUFJLFdBQVUsMkJBQWQ7QUFDRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsZ0JBQUcsTUFBSyxhQUFSLEVBQXNCLFNBQVMsc0JBQVksU0FBM0M7QUFBQTtBQUFBO0FBREYsV0FERjtBQUlFO0FBQUE7QUFBQTtBQUNFO0FBQUE7QUFBQSxnQkFBTSxJQUFHLGdCQUFUO0FBQUE7QUFBQTtBQURGO0FBSkYsU0FERjtBQVVELE9BWEQsTUFXTztBQUNMLG1CQUNFO0FBQUE7QUFBQSxZQUFJLFdBQVUsMkJBQWQ7QUFDRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsZ0JBQU0sdUJBQXFCLEtBQUssS0FBTCxDQUFXLGNBQXRDO0FBQUE7QUFBQTtBQURGLFdBREY7QUFJRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsZ0JBQUcsTUFBSyxHQUFSLEVBQVksU0FBUyxzQkFBWSxVQUFqQztBQUFBO0FBQUE7QUFERjtBQUpGLFNBREY7QUFVRDs7QUFFRCxhQUNFO0FBQUE7QUFBQTtBQUNHO0FBREgsT0FERjtBQUtEOzs7O0VBcER5QyxnQkFBTSxTOztrQkFBN0IsYzs7Ozs7Ozs7Ozs7QUNOckI7Ozs7Ozs7Ozs7OztJQUVxQixlOzs7QUFDbkIsMkJBQWEsS0FBYixFQUFvQjtBQUFBOztBQUFBLDZIQUNaLEtBRFk7QUFFbkI7Ozs7NkJBRVM7QUFDUixVQUFJLGNBQUo7QUFDQSxVQUFJLEtBQUssS0FBTCxDQUFXLEtBQWYsRUFBc0I7QUFDcEIsZ0JBQVEsS0FBSyxLQUFMLENBQVcsS0FBWCxDQUFpQixHQUFqQixDQUFxQixVQUFDLElBQUQsRUFBTyxLQUFQLEVBQWlCO0FBQzVDLGlCQUNFO0FBQUE7QUFBQSxjQUFJLEtBQUssS0FBVCxFQUFnQixXQUFVLE1BQTFCO0FBQ0U7QUFBQTtBQUFBO0FBQVM7QUFBVDtBQURGLFdBREY7QUFLRCxTQU5PLENBQVI7QUFPRDs7QUFFRCxhQUNFO0FBQUE7QUFBQSxVQUFLLFdBQVUsNkJBQWY7QUFDRTtBQUFBO0FBQUEsWUFBSyxXQUFVLGFBQWY7QUFDRSxpREFBSyxLQUFJLDBCQUFUO0FBREYsU0FERjtBQUlFO0FBQUE7QUFBQSxZQUFLLFdBQVUsdUJBQWY7QUFDRTtBQUFBO0FBQUE7QUFBSTtBQUFBO0FBQUE7QUFBVSxtQkFBSyxLQUFMLENBQVc7QUFBckI7QUFBSixXQURGO0FBRUU7QUFBQTtBQUFBLGNBQUksV0FBVSxNQUFkO0FBQUE7QUFBQSxXQUZGO0FBR0ksZUFISjtBQUlFO0FBQUE7QUFBQTtBQUFLLGlCQUFLLEtBQUwsQ0FBVztBQUFoQjtBQUpGO0FBSkYsT0FERjtBQWFEOzs7O0VBOUIwQyxnQkFBTSxTOztrQkFBOUIsZTs7Ozs7Ozs7Ozs7QUNGckI7Ozs7QUFFQTs7Ozs7Ozs7Ozs7O0lBRXFCLGU7OztBQUNuQiwyQkFBYSxLQUFiLEVBQW9CO0FBQUE7O0FBQUEsa0lBQ1osS0FEWTs7QUFHbEIsVUFBSyxLQUFMLEdBQWE7QUFDWCw0QkFBc0I7QUFEWCxLQUFiO0FBSGtCO0FBTW5COzs7O3dDQUVvQjtBQUNuQixXQUFLLFFBQUwsQ0FBYztBQUFBLGVBQWM7QUFDMUIsZ0NBQXNCLENBQUMsVUFBVTtBQURQLFNBQWQ7QUFBQSxPQUFkO0FBR0Q7Ozs2QkFFUztBQUNSLGFBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSw2QkFBZjtBQUNFO0FBQUE7QUFBQSxZQUFLLFdBQVUsd0JBQWY7QUFDRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsa0JBQU0sV0FBVSxjQUFoQjtBQUFnQyxxQkFBSyxLQUFMLENBQVcsS0FBWCxHQUFtQixLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQWlCLE1BQXBDLEdBQTZDO0FBQTdFLGVBREY7QUFBQTtBQUFBO0FBREY7QUFERixTQURGO0FBUUU7QUFBQTtBQUFBLFlBQUssV0FBVSxzQkFBZjtBQUNFO0FBQUE7QUFBQSxjQUFHLFdBQVUsaUJBQWIsRUFBK0IsU0FBUyxLQUFLLGlCQUFMLENBQXVCLElBQXZCLENBQTRCLElBQTVCLENBQXhDO0FBQ0csaUJBQUssS0FBTCxDQUFXLG9CQUFYLEdBQWtDLE1BQWxDLEdBQTJDO0FBRDlDO0FBREYsU0FSRjtBQWFHLGFBQUssS0FBTCxDQUFXLG9CQUFYLEdBQWtDLGdFQUFzQixRQUFRLEtBQUssS0FBTCxDQUFXLEtBQXpDLEdBQWxDLEdBQXVGO0FBYjFGLE9BREY7QUFpQkQ7Ozs7RUFqQzBDLGdCQUFNLFM7O2tCQUE5QixlOzs7Ozs7Ozs7OztBQ0pyQjs7OztBQUVBOzs7Ozs7Ozs7Ozs7SUFFcUIsb0I7OztBQUNuQixnQ0FBYSxLQUFiLEVBQW9CO0FBQUE7O0FBQUEsdUlBQ1osS0FEWTtBQUVuQjs7Ozs2QkFFUztBQUNSLGFBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSxZQUFmO0FBQUE7QUFBQSxPQURGO0FBS0Q7Ozs7RUFYK0MsZ0JBQU0sUzs7a0JBQW5DLG9COzs7Ozs7Ozs7OztBQ0pyQjs7OztBQUVBOzs7Ozs7Ozs7Ozs7SUFFcUIsVzs7O0FBQ25CLHVCQUFhLEtBQWIsRUFBb0I7QUFBQTs7QUFBQSwwSEFDWixLQURZOztBQUdsQixVQUFLLEtBQUwsR0FBYTtBQUNYLHdCQUFrQjtBQURQLEtBQWI7QUFIa0I7QUFNbkI7Ozs7b0NBRWdCO0FBQ2YsV0FBSyxRQUFMLENBQWM7QUFBQSxlQUFjO0FBQzFCLDRCQUFrQixDQUFDLFVBQVU7QUFESCxTQUFkO0FBQUEsT0FBZDtBQUdEOzs7NkJBRVM7QUFDUixhQUNFO0FBQUE7QUFBQSxVQUFLLFdBQVUsNkJBQWY7QUFDRTtBQUFBO0FBQUEsWUFBSyxXQUFVLHdCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGtCQUFNLFdBQVUsY0FBaEI7QUFBZ0MscUJBQUssS0FBTCxDQUFXLE9BQVgsR0FBcUIsS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixNQUF4QyxHQUFpRDtBQUFqRixlQURGO0FBQUE7QUFBQTtBQURGO0FBREYsU0FERjtBQVFFO0FBQUE7QUFBQSxZQUFLLFdBQVUsc0JBQWY7QUFDRTtBQUFBO0FBQUEsY0FBRyxXQUFVLGlCQUFiLEVBQStCLFNBQVMsS0FBSyxhQUFMLENBQW1CLElBQW5CLENBQXdCLElBQXhCLENBQXhDO0FBQ0csaUJBQUssS0FBTCxDQUFXLGdCQUFYLEdBQThCLE1BQTlCLEdBQXVDO0FBRDFDO0FBREYsU0FSRjtBQWFHLGFBQUssS0FBTCxDQUFXLGdCQUFYLEdBQThCLDREQUFrQixTQUFTLEtBQUssS0FBTCxDQUFXLE9BQXRDLEdBQTlCLEdBQWtGO0FBYnJGLE9BREY7QUFpQkQ7Ozs7RUFqQ3NDLGdCQUFNLFM7O2tCQUExQixXOzs7Ozs7Ozs7OztBQ0pyQjs7Ozs7Ozs7Ozs7O0lBRXFCLGdCOzs7QUFDbkIsNEJBQWEsS0FBYixFQUFvQjtBQUFBOztBQUFBLCtIQUNaLEtBRFk7QUFFbkI7Ozs7NkJBRVM7QUFDUixhQUNFO0FBQUE7QUFBQSxVQUFLLFdBQVUsV0FBZjtBQUNFO0FBQUE7QUFBQSxZQUFLLFdBQVUsWUFBZjtBQUFBO0FBQUE7QUFERixPQURGO0FBT0Q7Ozs7RUFiMkMsZ0JBQU0sUzs7a0JBQS9CLGdCOzs7OztBQ0ZyQjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7QUFFQSxJQUFJLFVBQVUscUNBQWQ7O0FBRUEsbUJBQVMsTUFBVCxDQUNJO0FBQUE7QUFBQSxNQUFRLFNBQVMsT0FBakI7QUFBQTtBQUFBLENBREosRUFFSSxTQUFTLGNBQVQsQ0FBd0IsS0FBeEIsQ0FGSjs7Ozs7Ozs7O0FDVEE7Ozs7QUFDQTs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O2tCQUdFO0FBQUE7QUFBQSxJQUFPLHdCQUFQO0FBQ0Usc0RBQU8sTUFBSyxHQUFaLEVBQWdCLHlCQUFoQixHQURGO0FBRUUsc0RBQU8sTUFBSyxZQUFaLEVBQXlCLDZCQUF6QixHQUZGO0FBR0Usc0RBQU8sTUFBSyx1QkFBWixFQUFvQyxnQ0FBcEM7QUFIRixDOzs7Ozs7Ozs7OztBQ1RGOzs7O0FBQ0E7Ozs7Ozs7O0lBRU0sVztBQUNKLHlCQUFlO0FBQUE7O0FBQ2IsU0FBSyxXQUFMOztBQUVBLFNBQUssZ0JBQUwsR0FBd0IsRUFBeEI7QUFDRDs7OztpREFFNkIsSSxFQUFNO0FBQ2xDLFdBQUssZ0JBQUwsR0FBd0IsSUFBeEI7QUFDRDs7Ozs7O2tCQUdZLGNBQUksV0FBSixDQUFnQixXQUFoQixDOzs7Ozs7Ozs7OztBQ2ZmOzs7O0FBQ0E7Ozs7Ozs7O0lBRU0sUztBQUNKLHVCQUFlO0FBQUE7O0FBQ2IsU0FBSyxXQUFMOztBQUVBLFNBQUssWUFBTCxHQUFvQixFQUFwQjtBQUNEOzs7OzZDQUV5QixNLEVBQVE7QUFDaEMsV0FBSyxZQUFMLEdBQW9CLE1BQXBCO0FBQ0Q7OzswQ0FFc0IsRyxFQUFLO0FBQzFCLGNBQVEsR0FBUixDQUFZLHFCQUFaLEVBQW1DLEdBQW5DO0FBQ0Q7Ozs7OztrQkFHWSxjQUFJLFdBQUosQ0FBZ0IsU0FBaEIsQzs7Ozs7Ozs7Ozs7QUNuQmY7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztJQUVNLGE7QUFDSiwyQkFBZTtBQUFBOztBQUNiLFNBQUssV0FBTDs7QUFFQSxTQUFLLElBQUwsR0FBWSxFQUFaO0FBQ0EsU0FBSyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsU0FBSyxNQUFMLEdBQWMsRUFBZDtBQUNBLFNBQUssY0FBTCxHQUFzQixFQUF0QjtBQUNBLFNBQUsscUJBQUwsR0FBNkIsRUFBN0I7QUFDQSxTQUFLLG1CQUFMLEdBQTJCLEVBQTNCO0FBQ0EsU0FBSyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0Q7Ozs7d0NBRW9CO0FBQ25CLGNBQVEsR0FBUixDQUFZLGNBQVo7QUFDRDs7O21DQUVlLEcsRUFBSztBQUNuQixjQUFRLEdBQVIsQ0FBWSxxQkFBWixFQUFtQyxHQUFuQztBQUNEOzs7NENBRXdCLEksRUFBTTtBQUM3QixXQUFLLGNBQUwsR0FBc0IsS0FBSyxTQUEzQjtBQUNEOzs7eUNBRXFCLEcsRUFBSztBQUN6QixjQUFRLEdBQVIsQ0FBWSwwQkFBWixFQUF3QyxHQUF4QztBQUNEOzs7dUNBRW1CLEMsRUFBRztBQUNyQixXQUFLLElBQUwsR0FBWSxFQUFFLE1BQUYsQ0FBUyxLQUFyQjtBQUNBLFdBQUssbUJBQUwsR0FBMkIsRUFBM0I7QUFDQSxXQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDRDs7OzhDQUUwQixDLEVBQUc7QUFDNUIsV0FBSyxXQUFMLEdBQW1CLEVBQUUsTUFBRixDQUFTLEtBQTVCO0FBQ0EsV0FBSyxxQkFBTCxHQUE2QixFQUE3QjtBQUNBLFdBQUssU0FBTCxHQUFpQixFQUFqQjtBQUNEOzs7eUNBRXFCLEMsRUFBRztBQUN2QixVQUFJLGFBQWEsRUFBRSxNQUFGLENBQVMsS0FBMUI7QUFDQSxVQUFJLEtBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsVUFBcEIsTUFBb0MsQ0FBQyxDQUF6QyxFQUE0QztBQUMxQyxhQUFLLE1BQUwsR0FBYyxrQkFBUSxlQUFSLENBQXdCLFVBQXhCLEVBQW9DLEtBQUssTUFBekMsQ0FBZDtBQUNBLFVBQUUsTUFBRixDQUFTLFlBQVQsQ0FBc0IsU0FBdEIsRUFBaUMsTUFBakM7QUFDRCxPQUhELE1BR087QUFDTCxhQUFLLE1BQUwsR0FBYyxrQkFBUSxhQUFSLENBQXNCLFVBQXRCLEVBQWtDLEtBQUssTUFBdkMsQ0FBZDtBQUNBLFVBQUUsTUFBRixDQUFTLFlBQVQsQ0FBc0IsU0FBdEIsRUFBaUMsT0FBakM7QUFDRDtBQUNELFdBQUsscUJBQUwsR0FBNkIsRUFBN0I7QUFDQSxXQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDRDs7OzJDQUV1QjtBQUN0QixXQUFLLG1CQUFMLEdBQTJCLFdBQTNCO0FBQ0EsV0FBSyxTQUFMLEdBQWlCLGtCQUFqQjtBQUNEOzs7NkNBRXlCO0FBQ3hCLFdBQUsscUJBQUwsR0FBNkIsV0FBN0I7QUFDQSxXQUFLLFNBQUwsR0FBaUIsaUNBQWpCO0FBQ0Q7Ozs7OztrQkFHWSxjQUFJLFdBQUosQ0FBZ0IsYUFBaEIsQzs7Ozs7Ozs7Ozs7QUNyRWY7Ozs7QUFDQTs7Ozs7Ozs7SUFFTSxXO0FBQ0oseUJBQWU7QUFBQTs7QUFDYixTQUFLLFdBQUw7O0FBRUEsU0FBSyxrQkFBTCxHQUEwQixFQUExQjtBQUNEOzs7OzBDQUVzQixjLEVBQWdCO0FBQ3JDLFdBQUssa0JBQUwsR0FBMEIsY0FBMUI7QUFDRDs7Ozs7O2tCQUdZLGNBQUksV0FBSixDQUFnQixXQUFoQixDOzs7Ozs7Ozs7OztBQ2ZmOzs7O0FBQ0E7Ozs7Ozs7O0lBRU0sUztBQUNKLHVCQUFlO0FBQUE7O0FBQ2IsU0FBSyxXQUFMOztBQUVBLFNBQUssY0FBTCxHQUFzQixFQUF0QjtBQUNBLFNBQUssUUFBTCxHQUFnQixFQUFoQjtBQUNBLFNBQUssS0FBTCxHQUFhLEVBQWI7QUFDRDs7Ozt1Q0FFbUIsSSxFQUFNO0FBQ3hCLFdBQUssY0FBTCxHQUFzQixLQUFLLEdBQTNCO0FBQ0EsV0FBSyxRQUFMLEdBQWdCLEtBQUssUUFBckI7QUFDQSxXQUFLLEtBQUwsR0FBYSxLQUFLLEtBQWxCO0FBQ0Q7OztzQ0FFa0I7QUFDakIsY0FBUSxHQUFSLENBQVksc0JBQVo7QUFDRDs7OzBDQUVzQjtBQUNyQixXQUFLLGNBQUwsR0FBc0IsRUFBdEI7QUFDQSxXQUFLLFFBQUwsR0FBZ0IsRUFBaEI7QUFDQSxXQUFLLEtBQUwsR0FBYSxFQUFiO0FBQ0Q7Ozs7OztrQkFHWSxjQUFJLFdBQUosQ0FBZ0IsU0FBaEIsQzs7Ozs7Ozs7Ozs7QUM3QmY7Ozs7QUFDQTs7QUFFQTs7OztBQUNBOzs7Ozs7OztJQUVxQixPOzs7Ozs7O2tDQUNHLEssRUFBTyxLLEVBQU87QUFDbEMsWUFBTSxJQUFOLENBQVcsS0FBWDs7QUFFQSxhQUFPLEtBQVA7QUFDRDs7O21DQUVzQixLLEVBQU8sSyxFQUFPO0FBQ25DLFlBQU0sT0FBTixDQUFjLEtBQWQ7O0FBRUEsYUFBTyxLQUFQO0FBQ0Q7OztvQ0FFdUIsSyxFQUFPLEssRUFBTztBQUNwQyxVQUFJLFFBQVEsTUFBTSxPQUFOLENBQWMsS0FBZCxDQUFaO0FBQ0EsVUFBSSxVQUFVLENBQWQsRUFBaUI7QUFDZixjQUFNLE1BQU4sQ0FBYSxLQUFiLEVBQW9CLENBQXBCO0FBQ0Q7O0FBRUQsYUFBTyxLQUFQO0FBQ0Q7OzttQ0FFc0IsSyxFQUFPLEssRUFBTyxtQixFQUFxQixlLEVBQWlCO0FBQ3pFLFVBQUksUUFBUSxFQUFaO0FBQ0EsVUFBSSxNQUFNLGlCQUFWLEVBQTZCO0FBQzNCLGNBQU0sYUFBTixHQUFzQiw4REFBb0IsU0FBUyxNQUFNLEtBQU4sQ0FBWSxHQUF6QyxHQUF0QjtBQUNEO0FBQ0QsVUFBSSxNQUFNLGFBQVYsRUFBeUI7QUFDdkIsY0FBTSxTQUFOLEdBQWtCLDBEQUFnQixTQUFTLE1BQU0sS0FBTixDQUFZLEdBQXJDLEdBQWxCO0FBQ0Q7O0FBRUQsWUFBTSxZQUFOLEdBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSxzQkFBZjtBQUNFO0FBQUE7QUFBQSxZQUFHLFdBQVUsaUJBQWI7QUFDRSxxQkFBUyxtQkFEWDtBQUVHLGdCQUFNLGlCQUFOLEdBQTBCLE1BQTFCLEdBQW1DO0FBRnRDLFNBREY7QUFLRTtBQUFBO0FBQUEsWUFBRyxXQUFVLGlCQUFiO0FBQ0UscUJBQVMsZUFEWDtBQUVHLGdCQUFNLGFBQU4sR0FBc0IsTUFBdEIsR0FBK0I7QUFGbEMsU0FMRjtBQVNFO0FBQUE7QUFBQSxZQUFNLGdCQUFjLE1BQU0sS0FBTixDQUFZLEdBQTFCLGdCQUFOLEVBQWtELFdBQVUsaUJBQTVEO0FBQUE7QUFBQTtBQVRGLE9BREY7O0FBY0EsWUFBTSxNQUFOLEdBQWUsTUFBTSxLQUFOLENBQVksTUFBWixDQUFtQixHQUFuQixDQUF1QixpQkFBUztBQUM3QyxlQUNFO0FBQUE7QUFBQSxZQUFRLEtBQUssTUFBTSxLQUFOLENBQVksR0FBWixHQUFrQixLQUEvQjtBQUF1QztBQUF2QyxTQURGO0FBR0QsT0FKYyxDQUFmOztBQU1BLFVBQUksTUFBTSxLQUFOLENBQVksY0FBaEIsRUFBZ0M7QUFDOUIsY0FBTSxNQUFOLEdBQ0UsdUNBQUssV0FBVSxjQUFmLEVBQThCLEtBQUssTUFBTSxLQUFOLENBQVksY0FBL0MsR0FERjtBQUdEOztBQUVELGFBQU8sS0FBUDtBQUNEOzs7Ozs7a0JBMURrQixPOzs7Ozs7Ozs7Ozs7O0FDTnJCLElBQU0sVUFBVSxrQ0FBaEI7QUFDQSxJQUFNLGtCQUFrQiwyQ0FBeEI7QUFDQSxJQUFNLGtCQUFrQixpQ0FBeEI7QUFDQSxJQUFNLDhCQUE4Qiw4QkFBcEM7QUFDQSxJQUFNLDBCQUEwQixnQ0FBaEM7O0lBRXFCLGE7Ozs7Ozs7bUNBQ0ksUyxFQUFXO0FBQ2hDLGFBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjtBQUN0QyxZQUFJLFVBQVU7QUFDWixrQkFBUSxLQURJO0FBRVosZUFBUSxlQUFSLGlCQUFtQyxPQUFuQyxlQUFvRDtBQUZ4QyxTQUFkO0FBSUEsVUFBRSxJQUFGLENBQU8sT0FBUCxFQUNHLElBREgsQ0FDUSx3QkFBZ0I7QUFDcEI7QUFDQSxjQUFJLGFBQWEsYUFBYixLQUErQixDQUFuQyxFQUFzQztBQUNwQyxvQkFBUSxFQUFFLFdBQVcsMkJBQWIsRUFBUjtBQUNBO0FBQ0Q7O0FBRUQsY0FBSSxhQUFhLGFBQWEsT0FBYixDQUFxQixDQUFyQixFQUF3QixXQUF6QztBQUNBLGNBQUksZUFBZSxJQUFuQixFQUF5QjtBQUN2QixvQkFBUSxFQUFFLFdBQVcsdUJBQWIsRUFBUjtBQUNBO0FBQ0Q7QUFDRCxrQkFBUSxFQUFFLFdBQWMsZUFBZCxTQUFpQyxVQUFuQyxFQUFSO0FBQ0QsU0FkSCxFQWVHLElBZkgsQ0FlUSxlQUFPO0FBQ1gsaUJBQU87QUFDTCwyQkFBZSxnQkFEVjtBQUVMLG1CQUFPO0FBRkYsV0FBUDtBQUlELFNBcEJIO0FBcUJELE9BMUJNLENBQVA7QUEyQkQ7Ozs7OztrQkE3QmtCLGEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IG1ha2VBY3Rpb247XHJcblxyXG52YXIgX2Z1bmN0aW9ucyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucycpO1xyXG5cclxudmFyIGZuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2Z1bmN0aW9ucyk7XHJcblxyXG52YXIgX0FsdFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvQWx0VXRpbHMnKTtcclxuXHJcbnZhciB1dGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9BbHRVdGlscyk7XHJcblxyXG52YXIgX2lzUHJvbWlzZSA9IHJlcXVpcmUoJ2lzLXByb21pc2UnKTtcclxuXHJcbnZhciBfaXNQcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJvbWlzZSk7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxyXG5cclxuZnVuY3Rpb24gbWFrZUFjdGlvbihhbHQsIG5hbWVzcGFjZSwgbmFtZSwgaW1wbGVtZW50YXRpb24sIG9iaikge1xyXG4gIHZhciBpZCA9IHV0aWxzLnVpZChhbHQuX2FjdGlvbnNSZWdpc3RyeSwgU3RyaW5nKG5hbWVzcGFjZSkgKyAnLicgKyBTdHJpbmcobmFtZSkpO1xyXG4gIGFsdC5fYWN0aW9uc1JlZ2lzdHJ5W2lkXSA9IDE7XHJcblxyXG4gIHZhciBkYXRhID0geyBpZDogaWQsIG5hbWVzcGFjZTogbmFtZXNwYWNlLCBuYW1lOiBuYW1lIH07XHJcblxyXG4gIHZhciBkaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBhbHQuZGlzcGF0Y2goaWQsIHBheWxvYWQsIGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIC8vIHRoZSBhY3Rpb24gaXRzZWxmXHJcbiAgdmFyIGFjdGlvbiA9IGZ1bmN0aW9uIGFjdGlvbigpIHtcclxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XHJcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGludm9jYXRpb25SZXN1bHQgPSBpbXBsZW1lbnRhdGlvbi5hcHBseShvYmosIGFyZ3MpO1xyXG4gICAgdmFyIGFjdGlvblJlc3VsdCA9IGludm9jYXRpb25SZXN1bHQ7XHJcblxyXG4gICAgLy8gYXN5bmMgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHByb21pc2VzIHNob3VsZCBub3QgYmUgZGlzcGF0Y2hlZFxyXG4gICAgaWYgKGludm9jYXRpb25SZXN1bHQgIT09IHVuZGVmaW5lZCAmJiAhKDAsIF9pc1Byb21pc2UyWydkZWZhdWx0J10pKGludm9jYXRpb25SZXN1bHQpKSB7XHJcbiAgICAgIGlmIChmbi5pc0Z1bmN0aW9uKGludm9jYXRpb25SZXN1bHQpKSB7XHJcbiAgICAgICAgLy8gaW5uZXIgZnVuY3Rpb24gcmVzdWx0IHNob3VsZCBiZSByZXR1cm5lZCBhcyBhbiBhY3Rpb24gcmVzdWx0XHJcbiAgICAgICAgYWN0aW9uUmVzdWx0ID0gaW52b2NhdGlvblJlc3VsdChkaXNwYXRjaCwgYWx0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkaXNwYXRjaChpbnZvY2F0aW9uUmVzdWx0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbnZvY2F0aW9uUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdXRpbHMud2FybignQW4gYWN0aW9uIHdhcyBjYWxsZWQgYnV0IG5vdGhpbmcgd2FzIGRpc3BhdGNoZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWN0aW9uUmVzdWx0O1xyXG4gIH07XHJcbiAgYWN0aW9uLmRlZmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcclxuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGFjdGlvbi5hcHBseShudWxsLCBhcmdzKTtcclxuICAgIH0pO1xyXG4gIH07XHJcbiAgYWN0aW9uLmlkID0gaWQ7XHJcbiAgYWN0aW9uLmRhdGEgPSBkYXRhO1xyXG5cclxuICAvLyBlbnN1cmUgZWFjaCByZWZlcmVuY2UgaXMgdW5pcXVlIGluIHRoZSBuYW1lc3BhY2VcclxuICB2YXIgY29udGFpbmVyID0gYWx0LmFjdGlvbnNbbmFtZXNwYWNlXTtcclxuICB2YXIgbmFtZXNwYWNlSWQgPSB1dGlscy51aWQoY29udGFpbmVyLCBuYW1lKTtcclxuICBjb250YWluZXJbbmFtZXNwYWNlSWRdID0gYWN0aW9uO1xyXG5cclxuICAvLyBnZW5lcmF0ZSBhIGNvbnN0YW50XHJcbiAgdmFyIGNvbnN0YW50ID0gdXRpbHMuZm9ybWF0QXNDb25zdGFudChuYW1lc3BhY2VJZCk7XHJcbiAgY29udGFpbmVyW2NvbnN0YW50XSA9IGlkO1xyXG5cclxuICByZXR1cm4gYWN0aW9uO1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5leHBvcnRzLmlzTXV0YWJsZU9iamVjdCA9IGlzTXV0YWJsZU9iamVjdDtcclxuZXhwb3J0cy5lYWNoT2JqZWN0ID0gZWFjaE9iamVjdDtcclxuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XHJcbnZhciBpc0Z1bmN0aW9uID0gZXhwb3J0cy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaXNNdXRhYmxlT2JqZWN0KHRhcmdldCkge1xyXG4gIHZhciBDdG9yID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xyXG5cclxuICByZXR1cm4gISF0YXJnZXQgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRhcmdldCkgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmIGlzRnVuY3Rpb24oQ3RvcikgJiYgIU9iamVjdC5pc0Zyb3plbih0YXJnZXQpICYmIChDdG9yIGluc3RhbmNlb2YgQ3RvciB8fCB0YXJnZXQudHlwZSA9PT0gJ0FsdFN0b3JlJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVhY2hPYmplY3QoZiwgbykge1xyXG4gIG8uZm9yRWFjaChmdW5jdGlvbiAoZnJvbSkge1xyXG4gICAgT2JqZWN0LmtleXMoT2JqZWN0KGZyb20pKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgZihrZXksIGZyb21ba2V5XSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2UgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XHJcbiAgICBzb3VyY2VbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xyXG4gIH1cclxuXHJcbiAgZWFjaE9iamVjdChmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRhcmdldFtrZXldID0gdmFsdWU7XHJcbiAgfSwgc291cmNlKTtcclxuICByZXR1cm4gdGFyZ2V0O1xyXG59IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcblxyXG52YXIgX2ZsdXggPSByZXF1aXJlKCdmbHV4Jyk7XHJcblxyXG52YXIgX1N0YXRlRnVuY3Rpb25zID0gcmVxdWlyZSgnLi91dGlscy9TdGF0ZUZ1bmN0aW9ucycpO1xyXG5cclxudmFyIFN0YXRlRnVuY3Rpb25zID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX1N0YXRlRnVuY3Rpb25zKTtcclxuXHJcbnZhciBfZnVuY3Rpb25zID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMnKTtcclxuXHJcbnZhciBmbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mdW5jdGlvbnMpO1xyXG5cclxudmFyIF9zdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmUnKTtcclxuXHJcbnZhciBzdG9yZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zdG9yZSk7XHJcblxyXG52YXIgX0FsdFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9BbHRVdGlscycpO1xyXG5cclxudmFyIHV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0FsdFV0aWxzKTtcclxuXHJcbnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoJy4vYWN0aW9ucycpO1xyXG5cclxudmFyIF9hY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FjdGlvbnMpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxyXG5cclxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfSAvKiBnbG9iYWwgd2luZG93ICovXHJcblxyXG5cclxudmFyIEFsdCA9IGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBBbHQoKSB7XHJcbiAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XHJcblxyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFsdCk7XHJcblxyXG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICB0aGlzLnNlcmlhbGl6ZSA9IGNvbmZpZy5zZXJpYWxpemUgfHwgSlNPTi5zdHJpbmdpZnk7XHJcbiAgICB0aGlzLmRlc2VyaWFsaXplID0gY29uZmlnLmRlc2VyaWFsaXplIHx8IEpTT04ucGFyc2U7XHJcbiAgICB0aGlzLmRpc3BhdGNoZXIgPSBjb25maWcuZGlzcGF0Y2hlciB8fCBuZXcgX2ZsdXguRGlzcGF0Y2hlcigpO1xyXG4gICAgdGhpcy5iYXRjaGluZ0Z1bmN0aW9uID0gY29uZmlnLmJhdGNoaW5nRnVuY3Rpb24gfHwgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuYWN0aW9ucyA9IHsgZ2xvYmFsOiB7fSB9O1xyXG4gICAgdGhpcy5zdG9yZXMgPSB7fTtcclxuICAgIHRoaXMuc3RvcmVUcmFuc2Zvcm1zID0gY29uZmlnLnN0b3JlVHJhbnNmb3JtcyB8fCBbXTtcclxuICAgIHRoaXMudHJhcEFzeW5jID0gZmFsc2U7XHJcbiAgICB0aGlzLl9hY3Rpb25zUmVnaXN0cnkgPSB7fTtcclxuICAgIHRoaXMuX2luaXRTbmFwc2hvdCA9IHt9O1xyXG4gICAgdGhpcy5fbGFzdFNuYXBzaG90ID0ge307XHJcbiAgfVxyXG5cclxuICBBbHQucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uLCBkYXRhLCBkZXRhaWxzKSB7XHJcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICB0aGlzLmJhdGNoaW5nRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTgpLnN1YnN0cigyLCAxNik7XHJcblxyXG4gICAgICAgIC8vIHN1cHBvcnQgc3RyYWlnaHQgZGlzcGF0Y2hpbmcgb2YgRlNBLXN0eWxlIGFjdGlvbnNcclxuICAgICAgICBpZiAoYWN0aW9uLmhhc093blByb3BlcnR5KCd0eXBlJykgJiYgYWN0aW9uLmhhc093blByb3BlcnR5KCdwYXlsb2FkJykpIHtcclxuICAgICAgICAgIHZhciBmc2FEZXRhaWxzID0ge1xyXG4gICAgICAgICAgICBpZDogYWN0aW9uLnR5cGUsXHJcbiAgICAgICAgICAgIG5hbWVzcGFjZTogYWN0aW9uLnR5cGUsXHJcbiAgICAgICAgICAgIG5hbWU6IGFjdGlvbi50eXBlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgcmV0dXJuIF90aGlzLmRpc3BhdGNoZXIuZGlzcGF0Y2godXRpbHMuZnNhKGlkLCBhY3Rpb24udHlwZSwgYWN0aW9uLnBheWxvYWQsIGZzYURldGFpbHMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhY3Rpb24uaWQgJiYgYWN0aW9uLmRpc3BhdGNoKSB7XHJcbiAgICAgICAgICByZXR1cm4gdXRpbHMuZGlzcGF0Y2goaWQsIGFjdGlvbiwgZGF0YSwgX3RoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIF90aGlzLmRpc3BhdGNoZXIuZGlzcGF0Y2godXRpbHMuZnNhKGlkLCBhY3Rpb24sIGRhdGEsIGRldGFpbHMpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRpc3BhdGNoO1xyXG4gIH0oKTtcclxuXHJcbiAgQWx0LnByb3RvdHlwZS5jcmVhdGVVbnNhdmVkU3RvcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVVbnNhdmVkU3RvcmUoU3RvcmVNb2RlbCkge1xyXG4gICAgICB2YXIga2V5ID0gU3RvcmVNb2RlbC5kaXNwbGF5TmFtZSB8fCAnJztcclxuICAgICAgc3RvcmUuY3JlYXRlU3RvcmVDb25maWcodGhpcy5jb25maWcsIFN0b3JlTW9kZWwpO1xyXG4gICAgICB2YXIgU3RvcmUgPSBzdG9yZS50cmFuc2Zvcm1TdG9yZSh0aGlzLnN0b3JlVHJhbnNmb3JtcywgU3RvcmVNb2RlbCk7XHJcblxyXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZuLmlzRnVuY3Rpb24oU3RvcmUpID8gc3RvcmUuY3JlYXRlU3RvcmVGcm9tQ2xhc3MuYXBwbHkoc3RvcmUsIFt0aGlzLCBTdG9yZSwga2V5XS5jb25jYXQoYXJncykpIDogc3RvcmUuY3JlYXRlU3RvcmVGcm9tT2JqZWN0KHRoaXMsIFN0b3JlLCBrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjcmVhdGVVbnNhdmVkU3RvcmU7XHJcbiAgfSgpO1xyXG5cclxuICBBbHQucHJvdG90eXBlLmNyZWF0ZVN0b3JlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlU3RvcmUoU3RvcmVNb2RlbCwgaWRlbikge1xyXG4gICAgICB2YXIga2V5ID0gaWRlbiB8fCBTdG9yZU1vZGVsLmRpc3BsYXlOYW1lIHx8IFN0b3JlTW9kZWwubmFtZSB8fCAnJztcclxuICAgICAgc3RvcmUuY3JlYXRlU3RvcmVDb25maWcodGhpcy5jb25maWcsIFN0b3JlTW9kZWwpO1xyXG4gICAgICB2YXIgU3RvcmUgPSBzdG9yZS50cmFuc2Zvcm1TdG9yZSh0aGlzLnN0b3JlVHJhbnNmb3JtcywgU3RvcmVNb2RlbCk7XHJcblxyXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICBpZiAobW9kdWxlLmhvdCkgZGVsZXRlIHRoaXMuc3RvcmVzW2tleV07XHJcblxyXG4gICAgICBpZiAodGhpcy5zdG9yZXNba2V5XSB8fCAha2V5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvcmVzW2tleV0pIHtcclxuICAgICAgICAgIHV0aWxzLndhcm4oJ0Egc3RvcmUgbmFtZWQgJyArIFN0cmluZyhrZXkpICsgJyBhbHJlYWR5IGV4aXN0cywgZG91YmxlIGNoZWNrIHlvdXIgc3RvcmUgJyArICduYW1lcyBvciBwYXNzIGluIHlvdXIgb3duIGN1c3RvbSBpZGVudGlmaWVyIGZvciBlYWNoIHN0b3JlJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHV0aWxzLndhcm4oJ1N0b3JlIG5hbWUgd2FzIG5vdCBzcGVjaWZpZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGtleSA9IHV0aWxzLnVpZCh0aGlzLnN0b3Jlcywga2V5KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xyXG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBzdG9yZUluc3RhbmNlID0gZm4uaXNGdW5jdGlvbihTdG9yZSkgPyBzdG9yZS5jcmVhdGVTdG9yZUZyb21DbGFzcy5hcHBseShzdG9yZSwgW3RoaXMsIFN0b3JlLCBrZXldLmNvbmNhdChhcmdzKSkgOiBzdG9yZS5jcmVhdGVTdG9yZUZyb21PYmplY3QodGhpcywgU3RvcmUsIGtleSk7XHJcblxyXG4gICAgICB0aGlzLnN0b3Jlc1trZXldID0gc3RvcmVJbnN0YW5jZTtcclxuICAgICAgU3RhdGVGdW5jdGlvbnMuc2F2ZUluaXRpYWxTbmFwc2hvdCh0aGlzLCBrZXkpO1xyXG5cclxuICAgICAgcmV0dXJuIHN0b3JlSW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZVN0b3JlO1xyXG4gIH0oKTtcclxuXHJcbiAgQWx0LnByb3RvdHlwZS5nZW5lcmF0ZUFjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUFjdGlvbnMoKSB7XHJcbiAgICAgIHZhciBhY3Rpb25zID0geyBuYW1lOiAnZ2xvYmFsJyB9O1xyXG5cclxuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhY3Rpb25OYW1lcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XHJcbiAgICAgICAgYWN0aW9uTmFtZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQWN0aW9ucyhhY3Rpb25OYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwgYWN0aW9uKSB7XHJcbiAgICAgICAgb2JqW2FjdGlvbl0gPSB1dGlscy5kaXNwYXRjaElkZW50aXR5O1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgIH0sIGFjdGlvbnMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZ2VuZXJhdGVBY3Rpb25zO1xyXG4gIH0oKTtcclxuXHJcbiAgQWx0LnByb3RvdHlwZS5jcmVhdGVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVBY3Rpb24obmFtZSwgaW1wbGVtZW50YXRpb24sIG9iaikge1xyXG4gICAgICByZXR1cm4gKDAsIF9hY3Rpb25zMlsnZGVmYXVsdCddKSh0aGlzLCAnZ2xvYmFsJywgbmFtZSwgaW1wbGVtZW50YXRpb24sIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZUFjdGlvbjtcclxuICB9KCk7XHJcblxyXG4gIEFsdC5wcm90b3R5cGUuY3JlYXRlQWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbnMoQWN0aW9uc0NsYXNzKSB7XHJcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xyXG5cclxuICAgICAgdmFyIGV4cG9ydE9iaiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xyXG5cclxuICAgICAgdmFyIGFjdGlvbnMgPSB7fTtcclxuICAgICAgdmFyIGtleSA9IHV0aWxzLnVpZCh0aGlzLl9hY3Rpb25zUmVnaXN0cnksIEFjdGlvbnNDbGFzcy5kaXNwbGF5TmFtZSB8fCBBY3Rpb25zQ2xhc3MubmFtZSB8fCAnVW5rbm93bicpO1xyXG5cclxuICAgICAgaWYgKGZuLmlzRnVuY3Rpb24oQWN0aW9uc0NsYXNzKSkge1xyXG4gICAgICAgIGZuLmFzc2lnbihhY3Rpb25zLCB1dGlscy5nZXRQcm90b3R5cGVDaGFpbihBY3Rpb25zQ2xhc3MpKTtcclxuXHJcbiAgICAgICAgdmFyIEFjdGlvbnNHZW5lcmF0b3IgPSBmdW5jdGlvbiAoX0FjdGlvbnNDbGFzcykge1xyXG4gICAgICAgICAgX2luaGVyaXRzKEFjdGlvbnNHZW5lcmF0b3IsIF9BY3Rpb25zQ2xhc3MpO1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIEFjdGlvbnNHZW5lcmF0b3IoKSB7XHJcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY3Rpb25zR2VuZXJhdG9yKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XHJcbiAgICAgICAgICAgICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0FjdGlvbnNDbGFzcy5jYWxsLmFwcGx5KF9BY3Rpb25zQ2xhc3MsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBBY3Rpb25zR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZUFjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlQWN0aW9ucygpIHtcclxuICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFjdGlvbk5hbWVzID0gQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbk5hbWVzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBhY3Rpb25OYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb25OYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25zW2FjdGlvbk5hbWVdID0gdXRpbHMuZGlzcGF0Y2hJZGVudGl0eTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlQWN0aW9ucztcclxuICAgICAgICAgIH0oKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gQWN0aW9uc0dlbmVyYXRvcjtcclxuICAgICAgICB9KEFjdGlvbnNDbGFzcyk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJnc0ZvckNvbnN0cnVjdG9yID0gQXJyYXkoX2xlbjQgPiAyID8gX2xlbjQgLSAyIDogMCksIF9rZXk0ID0gMjsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xyXG4gICAgICAgICAgYXJnc0ZvckNvbnN0cnVjdG9yW19rZXk0IC0gMl0gPSBhcmd1bWVudHNbX2tleTRdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm4uYXNzaWduKGFjdGlvbnMsIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoQWN0aW9uc0dlbmVyYXRvciwgW251bGxdLmNvbmNhdChhcmdzRm9yQ29uc3RydWN0b3IpKSkoKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm4uYXNzaWduKGFjdGlvbnMsIEFjdGlvbnNDbGFzcyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYWN0aW9uc1trZXldID0gdGhpcy5hY3Rpb25zW2tleV0gfHwge307XHJcblxyXG4gICAgICBmbi5lYWNoT2JqZWN0KGZ1bmN0aW9uIChhY3Rpb25OYW1lLCBhY3Rpb24pIHtcclxuICAgICAgICBpZiAoIWZuLmlzRnVuY3Rpb24oYWN0aW9uKSkge1xyXG4gICAgICAgICAgZXhwb3J0T2JqW2FjdGlvbk5hbWVdID0gYWN0aW9uO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBhY3Rpb25cclxuICAgICAgICBleHBvcnRPYmpbYWN0aW9uTmFtZV0gPSAoMCwgX2FjdGlvbnMyWydkZWZhdWx0J10pKF90aGlzMywga2V5LCBhY3Rpb25OYW1lLCBhY3Rpb24sIGV4cG9ydE9iaik7XHJcblxyXG4gICAgICAgIC8vIGdlbmVyYXRlIGEgY29uc3RhbnRcclxuICAgICAgICB2YXIgY29uc3RhbnQgPSB1dGlscy5mb3JtYXRBc0NvbnN0YW50KGFjdGlvbk5hbWUpO1xyXG4gICAgICAgIGV4cG9ydE9ialtjb25zdGFudF0gPSBleHBvcnRPYmpbYWN0aW9uTmFtZV0uaWQ7XHJcbiAgICAgIH0sIFthY3Rpb25zXSk7XHJcblxyXG4gICAgICByZXR1cm4gZXhwb3J0T2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjcmVhdGVBY3Rpb25zO1xyXG4gIH0oKTtcclxuXHJcbiAgQWx0LnByb3RvdHlwZS50YWtlU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiB0YWtlU25hcHNob3QoKSB7XHJcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgc3RvcmVOYW1lcyA9IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XHJcbiAgICAgICAgc3RvcmVOYW1lc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgc3RhdGUgPSBTdGF0ZUZ1bmN0aW9ucy5zbmFwc2hvdCh0aGlzLCBzdG9yZU5hbWVzKTtcclxuICAgICAgZm4uYXNzaWduKHRoaXMuX2xhc3RTbmFwc2hvdCwgc3RhdGUpO1xyXG4gICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemUoc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YWtlU25hcHNob3Q7XHJcbiAgfSgpO1xyXG5cclxuICBBbHQucHJvdG90eXBlLnJvbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gcm9sbGJhY2soKSB7XHJcbiAgICAgIFN0YXRlRnVuY3Rpb25zLnNldEFwcFN0YXRlKHRoaXMsIHRoaXMuc2VyaWFsaXplKHRoaXMuX2xhc3RTbmFwc2hvdCksIGZ1bmN0aW9uIChzdG9yZUluc3QpIHtcclxuICAgICAgICBzdG9yZUluc3QubGlmZWN5Y2xlKCdyb2xsYmFjaycpO1xyXG4gICAgICAgIHN0b3JlSW5zdC5lbWl0Q2hhbmdlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByb2xsYmFjaztcclxuICB9KCk7XHJcblxyXG4gIEFsdC5wcm90b3R5cGUucmVjeWNsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIHJlY3ljbGUoKSB7XHJcbiAgICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgc3RvcmVOYW1lcyA9IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XHJcbiAgICAgICAgc3RvcmVOYW1lc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgaW5pdGlhbFNuYXBzaG90ID0gc3RvcmVOYW1lcy5sZW5ndGggPyBTdGF0ZUZ1bmN0aW9ucy5maWx0ZXJTbmFwc2hvdHModGhpcywgdGhpcy5faW5pdFNuYXBzaG90LCBzdG9yZU5hbWVzKSA6IHRoaXMuX2luaXRTbmFwc2hvdDtcclxuXHJcbiAgICAgIFN0YXRlRnVuY3Rpb25zLnNldEFwcFN0YXRlKHRoaXMsIHRoaXMuc2VyaWFsaXplKGluaXRpYWxTbmFwc2hvdCksIGZ1bmN0aW9uIChzdG9yZUluc3QpIHtcclxuICAgICAgICBzdG9yZUluc3QubGlmZWN5Y2xlKCdpbml0Jyk7XHJcbiAgICAgICAgc3RvcmVJbnN0LmVtaXRDaGFuZ2UoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlY3ljbGU7XHJcbiAgfSgpO1xyXG5cclxuICBBbHQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gZmx1c2goKSB7XHJcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc2VyaWFsaXplKFN0YXRlRnVuY3Rpb25zLnNuYXBzaG90KHRoaXMpKTtcclxuICAgICAgdGhpcy5yZWN5Y2xlKCk7XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmx1c2g7XHJcbiAgfSgpO1xyXG5cclxuICBBbHQucHJvdG90eXBlLmJvb3RzdHJhcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGJvb3RzdHJhcChkYXRhKSB7XHJcbiAgICAgIFN0YXRlRnVuY3Rpb25zLnNldEFwcFN0YXRlKHRoaXMsIGRhdGEsIGZ1bmN0aW9uIChzdG9yZUluc3QsIHN0YXRlKSB7XHJcbiAgICAgICAgc3RvcmVJbnN0LmxpZmVjeWNsZSgnYm9vdHN0cmFwJywgc3RhdGUpO1xyXG4gICAgICAgIHN0b3JlSW5zdC5lbWl0Q2hhbmdlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBib290c3RyYXA7XHJcbiAgfSgpO1xyXG5cclxuICBBbHQucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBwcmVwYXJlKHN0b3JlSW5zdCwgcGF5bG9hZCkge1xyXG4gICAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgICBpZiAoIXN0b3JlSW5zdC5kaXNwbGF5TmFtZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignU3RvcmUgcHJvdmlkZWQgZG9lcyBub3QgaGF2ZSBhIG5hbWUnKTtcclxuICAgICAgfVxyXG4gICAgICBkYXRhW3N0b3JlSW5zdC5kaXNwbGF5TmFtZV0gPSBwYXlsb2FkO1xyXG4gICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemUoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByZXBhcmU7XHJcbiAgfSgpO1xyXG5cclxuICAvLyBJbnN0YW5jZSB0eXBlIG1ldGhvZHMgZm9yIGluamVjdGluZyBhbHQgaW50byB5b3VyIGFwcGxpY2F0aW9uIGFzIGNvbnRleHRcclxuXHJcbiAgQWx0LnByb3RvdHlwZS5hZGRBY3Rpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gYWRkQWN0aW9ucyhuYW1lLCBBY3Rpb25zQ2xhc3MpIHtcclxuICAgICAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjkgPiAyID8gX2xlbjkgLSAyIDogMCksIF9rZXk5ID0gMjsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xyXG4gICAgICAgIGFyZ3NbX2tleTkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5OV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYWN0aW9uc1tuYW1lXSA9IEFycmF5LmlzQXJyYXkoQWN0aW9uc0NsYXNzKSA/IHRoaXMuZ2VuZXJhdGVBY3Rpb25zLmFwcGx5KHRoaXMsIEFjdGlvbnNDbGFzcykgOiB0aGlzLmNyZWF0ZUFjdGlvbnMuYXBwbHkodGhpcywgW0FjdGlvbnNDbGFzc10uY29uY2F0KGFyZ3MpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWRkQWN0aW9ucztcclxuICB9KCk7XHJcblxyXG4gIEFsdC5wcm90b3R5cGUuYWRkU3RvcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRTdG9yZShuYW1lLCBTdG9yZU1vZGVsKSB7XHJcbiAgICAgIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMTAgPiAyID8gX2xlbjEwIC0gMiA6IDApLCBfa2V5MTAgPSAyOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XHJcbiAgICAgICAgYXJnc1tfa2V5MTAgLSAyXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmNyZWF0ZVN0b3JlLmFwcGx5KHRoaXMsIFtTdG9yZU1vZGVsLCBuYW1lXS5jb25jYXQoYXJncykpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhZGRTdG9yZTtcclxuICB9KCk7XHJcblxyXG4gIEFsdC5wcm90b3R5cGUuZ2V0QWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGdldEFjdGlvbnMobmFtZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hY3Rpb25zW25hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZXRBY3Rpb25zO1xyXG4gIH0oKTtcclxuXHJcbiAgQWx0LnByb3RvdHlwZS5nZXRTdG9yZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGdldFN0b3JlKG5hbWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc3RvcmVzW25hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZXRTdG9yZTtcclxuICB9KCk7XHJcblxyXG4gIEFsdC5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGRlYnVnKG5hbWUsIGFsdCwgd2luKSB7XHJcbiAgICAgIHZhciBrZXkgPSAnYWx0LmpzLm9yZyc7XHJcbiAgICAgIHZhciBjb250ZXh0ID0gd2luO1xyXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb250ZXh0ID0gd2luZG93O1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb250ZXh0W2tleV0gPSBjb250ZXh0W2tleV0gfHwgW107XHJcbiAgICAgICAgY29udGV4dFtrZXldLnB1c2goeyBuYW1lOiBuYW1lLCBhbHQ6IGFsdCB9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkZWJ1ZztcclxuICB9KCk7XHJcblxyXG4gIHJldHVybiBBbHQ7XHJcbn0oKTtcclxuXHJcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFsdDtcclxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcblxyXG52YXIgX2Z1bmN0aW9ucyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucycpO1xyXG5cclxudmFyIGZuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2Z1bmN0aW9ucyk7XHJcblxyXG52YXIgX3RyYW5zbWl0dGVyID0gcmVxdWlyZSgndHJhbnNtaXR0ZXInKTtcclxuXHJcbnZhciBfdHJhbnNtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNtaXR0ZXIpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG52YXIgQWx0U3RvcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gQWx0U3RvcmUoYWx0LCBtb2RlbCwgc3RhdGUsIFN0b3JlTW9kZWwpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFsdFN0b3JlKTtcclxuXHJcbiAgICB2YXIgbGlmZWN5Y2xlRXZlbnRzID0gbW9kZWwubGlmZWN5Y2xlRXZlbnRzO1xyXG4gICAgdGhpcy50cmFuc21pdHRlciA9ICgwLCBfdHJhbnNtaXR0ZXIyWydkZWZhdWx0J10pKCk7XHJcbiAgICB0aGlzLmxpZmVjeWNsZSA9IGZ1bmN0aW9uIChldmVudCwgeCkge1xyXG4gICAgICBpZiAobGlmZWN5Y2xlRXZlbnRzW2V2ZW50XSkgbGlmZWN5Y2xlRXZlbnRzW2V2ZW50XS5wdWJsaXNoKHgpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHJcbiAgICB0aGlzLmFsdCA9IGFsdDtcclxuICAgIHRoaXMucHJldmVudERlZmF1bHQgPSBmYWxzZTtcclxuICAgIHRoaXMuZGlzcGxheU5hbWUgPSBtb2RlbC5kaXNwbGF5TmFtZTtcclxuICAgIHRoaXMuYm91bmRMaXN0ZW5lcnMgPSBtb2RlbC5ib3VuZExpc3RlbmVycztcclxuICAgIHRoaXMuU3RvcmVNb2RlbCA9IFN0b3JlTW9kZWw7XHJcbiAgICB0aGlzLnJlZHVjZSA9IG1vZGVsLnJlZHVjZSB8fCBmdW5jdGlvbiAoeCkge1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcclxuXHJcbiAgICB2YXIgb3V0cHV0ID0gbW9kZWwub3V0cHV0IHx8IGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmVtaXRDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBfdGhpcy50cmFuc21pdHRlci5wdWJsaXNoKG91dHB1dChfdGhpcy5zdGF0ZSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgaGFuZGxlRGlzcGF0Y2ggPSBmdW5jdGlvbiBoYW5kbGVEaXNwYXRjaChmLCBwYXlsb2FkKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGYoKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChtb2RlbC5oYW5kbGVzT3duRXJyb3JzKSB7XHJcbiAgICAgICAgICBfdGhpcy5saWZlY3ljbGUoJ2Vycm9yJywge1xyXG4gICAgICAgICAgICBlcnJvcjogZSxcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICAgICAgc3RhdGU6IF90aGlzLnN0YXRlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZm4uYXNzaWduKHRoaXMsIG1vZGVsLnB1YmxpY01ldGhvZHMpO1xyXG5cclxuICAgIC8vIFJlZ2lzdGVyIGRpc3BhdGNoZXJcclxuICAgIHRoaXMuZGlzcGF0Y2hUb2tlbiA9IGFsdC5kaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uIChwYXlsb2FkKSB7XHJcbiAgICAgIF90aGlzLnByZXZlbnREZWZhdWx0ID0gZmFsc2U7XHJcblxyXG4gICAgICBfdGhpcy5saWZlY3ljbGUoJ2JlZm9yZUVhY2gnLCB7XHJcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICBzdGF0ZTogX3RoaXMuc3RhdGVcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgYWN0aW9uSGFuZGxlcnMgPSBtb2RlbC5hY3Rpb25MaXN0ZW5lcnNbcGF5bG9hZC5hY3Rpb25dO1xyXG5cclxuICAgICAgaWYgKGFjdGlvbkhhbmRsZXJzIHx8IG1vZGVsLm90aGVyd2lzZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XHJcblxyXG4gICAgICAgIGlmIChhY3Rpb25IYW5kbGVycykge1xyXG4gICAgICAgICAgcmVzdWx0ID0gaGFuZGxlRGlzcGF0Y2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uSGFuZGxlcnMuZmlsdGVyKEJvb2xlYW4pLmV2ZXJ5KGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbChtb2RlbCwgcGF5bG9hZC5kYXRhLCBwYXlsb2FkLmFjdGlvbikgIT09IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0sIHBheWxvYWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHQgPSBoYW5kbGVEaXNwYXRjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtb2RlbC5vdGhlcndpc2UocGF5bG9hZC5kYXRhLCBwYXlsb2FkLmFjdGlvbik7XHJcbiAgICAgICAgICB9LCBwYXlsb2FkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXN1bHQgIT09IGZhbHNlICYmICFfdGhpcy5wcmV2ZW50RGVmYXVsdCkgX3RoaXMuZW1pdENoYW5nZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobW9kZWwucmVkdWNlKSB7XHJcbiAgICAgICAgaGFuZGxlRGlzcGF0Y2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIHZhbHVlID0gbW9kZWwucmVkdWNlKF90aGlzLnN0YXRlLCBwYXlsb2FkKTtcclxuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBfdGhpcy5zdGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIH0sIHBheWxvYWQpO1xyXG4gICAgICAgIGlmICghX3RoaXMucHJldmVudERlZmF1bHQpIF90aGlzLmVtaXRDaGFuZ2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgX3RoaXMubGlmZWN5Y2xlKCdhZnRlckVhY2gnLCB7XHJcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICBzdGF0ZTogX3RoaXMuc3RhdGVcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmxpZmVjeWNsZSgnaW5pdCcpO1xyXG4gIH1cclxuXHJcbiAgQWx0U3RvcmUucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGxpc3RlbihjYikge1xyXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcclxuXHJcbiAgICAgIGlmICghZm4uaXNGdW5jdGlvbihjYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xpc3RlbiBleHBlY3RzIGEgZnVuY3Rpb24nKTtcclxuXHJcbiAgICAgIHZhciBfdHJhbnNtaXR0ZXIkc3Vic2NyaWIgPSB0aGlzLnRyYW5zbWl0dGVyLnN1YnNjcmliZShjYik7XHJcblxyXG4gICAgICB2YXIgZGlzcG9zZSA9IF90cmFuc21pdHRlciRzdWJzY3JpYi5kaXNwb3NlO1xyXG5cclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goeyBjYjogY2IsIGRpc3Bvc2U6IGRpc3Bvc2UgfSk7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgX3RoaXMyLmxpZmVjeWNsZSgndW5saXN0ZW4nKTtcclxuICAgICAgICBkaXNwb3NlKCk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxpc3RlbjtcclxuICB9KCk7XHJcblxyXG4gIEFsdFN0b3JlLnByb3RvdHlwZS51bmxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIHVubGlzdGVuKGNiKSB7XHJcbiAgICAgIHRoaXMubGlmZWN5Y2xlKCd1bmxpc3RlbicpO1xyXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLmNiID09PSBjYjtcclxuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1bmxpc3RlbjtcclxuICB9KCk7XHJcblxyXG4gIEFsdFN0b3JlLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5TdG9yZU1vZGVsLmNvbmZpZy5nZXRTdGF0ZS5jYWxsKHRoaXMsIHRoaXMuc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZXRTdGF0ZTtcclxuICB9KCk7XHJcblxyXG4gIHJldHVybiBBbHRTdG9yZTtcclxufSgpO1xyXG5cclxuZXhwb3J0c1snZGVmYXVsdCddID0gQWx0U3RvcmU7XHJcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5cclxudmFyIF90cmFuc21pdHRlciA9IHJlcXVpcmUoJ3RyYW5zbWl0dGVyJyk7XHJcblxyXG52YXIgX3RyYW5zbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zbWl0dGVyKTtcclxuXHJcbnZhciBfZnVuY3Rpb25zID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zJyk7XHJcblxyXG52YXIgZm4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZnVuY3Rpb25zKTtcclxuXHJcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XHJcblxyXG52YXIgU3RvcmVNaXhpbiA9IHtcclxuICB3YWl0Rm9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiB3YWl0Rm9yKCkge1xyXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc291cmNlcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgICAgIHNvdXJjZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghc291cmNlcy5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ0Rpc3BhdGNoIHRva2VucyBub3QgcHJvdmlkZWQnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHNvdXJjZXNBcnJheSA9IHNvdXJjZXM7XHJcbiAgICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHNvdXJjZXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlc1swXSkgPyBzb3VyY2VzWzBdIDogc291cmNlcztcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHRva2VucyA9IHNvdXJjZXNBcnJheS5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiBzb3VyY2UuZGlzcGF0Y2hUb2tlbiB8fCBzb3VyY2U7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5kaXNwYXRjaGVyLndhaXRGb3IodG9rZW5zKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gd2FpdEZvcjtcclxuICB9KCksXHJcbiAgZXhwb3J0QXN5bmM6IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGV4cG9ydEFzeW5jKGFzeW5jTWV0aG9kcykge1xyXG4gICAgICB0aGlzLnJlZ2lzdGVyQXN5bmMoYXN5bmNNZXRob2RzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXhwb3J0QXN5bmM7XHJcbiAgfSgpLFxyXG4gIHJlZ2lzdGVyQXN5bmM6IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQXN5bmMoYXN5bmNEZWYpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgIHZhciBsb2FkQ291bnRlciA9IDA7XHJcblxyXG4gICAgICB2YXIgYXN5bmNNZXRob2RzID0gZm4uaXNGdW5jdGlvbihhc3luY0RlZikgPyBhc3luY0RlZih0aGlzLmFsdCkgOiBhc3luY0RlZjtcclxuXHJcbiAgICAgIHZhciB0b0V4cG9ydCA9IE9iamVjdC5rZXlzKGFzeW5jTWV0aG9kcykucmVkdWNlKGZ1bmN0aW9uIChwdWJsaWNNZXRob2RzLCBtZXRob2ROYW1lKSB7XHJcbiAgICAgICAgdmFyIGRlc2MgPSBhc3luY01ldGhvZHNbbWV0aG9kTmFtZV07XHJcbiAgICAgICAgdmFyIHNwZWMgPSBmbi5pc0Z1bmN0aW9uKGRlc2MpID8gZGVzYyhfdGhpcykgOiBkZXNjO1xyXG5cclxuICAgICAgICB2YXIgdmFsaWRIYW5kbGVycyA9IFsnc3VjY2VzcycsICdlcnJvcicsICdsb2FkaW5nJ107XHJcbiAgICAgICAgdmFsaWRIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICBpZiAoc3BlY1toYW5kbGVyXSAmJiAhc3BlY1toYW5kbGVyXS5pZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoU3RyaW5nKGhhbmRsZXIpICsgJyBoYW5kbGVyIG11c3QgYmUgYW4gYWN0aW9uIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHB1YmxpY01ldGhvZHNbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xyXG4gICAgICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIHN0YXRlID0gX3RoaXMuZ2V0SW5zdGFuY2UoKS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgdmFyIHZhbHVlID0gc3BlYy5sb2NhbCAmJiBzcGVjLmxvY2FsLmFwcGx5KHNwZWMsIFtzdGF0ZV0uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgIHZhciBzaG91bGRGZXRjaCA9IHNwZWMuc2hvdWxkRmV0Y2ggPyBzcGVjLnNob3VsZEZldGNoLmFwcGx5KHNwZWMsIFtzdGF0ZV0uY29uY2F0KGFyZ3MpKVxyXG4gICAgICAgICAgLyplc2xpbnQtZGlzYWJsZSovXHJcbiAgICAgICAgICA6IHZhbHVlID09IG51bGw7XHJcbiAgICAgICAgICAvKmVzbGludC1lbmFibGUqL1xyXG4gICAgICAgICAgdmFyIGludGVyY2VwdCA9IHNwZWMuaW50ZXJjZXB0UmVzcG9uc2UgfHwgZnVuY3Rpb24gKHgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHZhciBtYWtlQWN0aW9uSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUFjdGlvbkhhbmRsZXIoYWN0aW9uLCBpc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZmlyZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkQ291bnRlciAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbihpbnRlcmNlcHQoeCwgYWN0aW9uLCBhcmdzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRXJyb3IpIHRocm93IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJlO1xyXG4gICAgICAgICAgICAgICAgfSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFsdC50cmFwQXN5bmMgPyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJlKCk7XHJcbiAgICAgICAgICAgICAgICB9IDogZmlyZSgpO1xyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtYWtlQWN0aW9uSGFuZGxlcjtcclxuICAgICAgICAgIH0oKTtcclxuXHJcbiAgICAgICAgICAvLyBpZiB3ZSBkb24ndCBoYXZlIGl0IGluIGNhY2hlIHRoZW4gZmV0Y2ggaXRcclxuICAgICAgICAgIGlmIChzaG91bGRGZXRjaCkge1xyXG4gICAgICAgICAgICBsb2FkQ291bnRlciArPSAxO1xyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICBpZiAoc3BlYy5sb2FkaW5nKSBzcGVjLmxvYWRpbmcoaW50ZXJjZXB0KG51bGwsIHNwZWMubG9hZGluZywgYXJncykpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3BlYy5yZW1vdGUuYXBwbHkoc3BlYywgW3N0YXRlXS5jb25jYXQoYXJncykpLnRoZW4obWFrZUFjdGlvbkhhbmRsZXIoc3BlYy5zdWNjZXNzKSwgbWFrZUFjdGlvbkhhbmRsZXIoc3BlYy5lcnJvciwgMSkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIG90aGVyd2lzZSBlbWl0IHRoZSBjaGFuZ2Ugbm93XHJcbiAgICAgICAgICBfdGhpcy5lbWl0Q2hhbmdlKCk7XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHB1YmxpY01ldGhvZHM7XHJcbiAgICAgIH0sIHt9KTtcclxuXHJcbiAgICAgIHRoaXMuZXhwb3J0UHVibGljTWV0aG9kcyh0b0V4cG9ydCk7XHJcbiAgICAgIHRoaXMuZXhwb3J0UHVibGljTWV0aG9kcyh7XHJcbiAgICAgICAgaXNMb2FkaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBmdW5jdGlvbiBpc0xvYWRpbmcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkQ291bnRlciA+IDA7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGlzTG9hZGluZztcclxuICAgICAgICB9KClcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlZ2lzdGVyQXN5bmM7XHJcbiAgfSgpLFxyXG4gIGV4cG9ydFB1YmxpY01ldGhvZHM6IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGV4cG9ydFB1YmxpY01ldGhvZHMobWV0aG9kcykge1xyXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcclxuXHJcbiAgICAgIGZuLmVhY2hPYmplY3QoZnVuY3Rpb24gKG1ldGhvZE5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCFmbi5pc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwb3J0UHVibGljTWV0aG9kcyBleHBlY3RzIGEgZnVuY3Rpb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF90aGlzMi5wdWJsaWNNZXRob2RzW21ldGhvZE5hbWVdID0gdmFsdWU7XHJcbiAgICAgIH0sIFttZXRob2RzXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV4cG9ydFB1YmxpY01ldGhvZHM7XHJcbiAgfSgpLFxyXG4gIGVtaXRDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGVtaXRDaGFuZ2UoKSB7XHJcbiAgICAgIHRoaXMuZ2V0SW5zdGFuY2UoKS5lbWl0Q2hhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVtaXRDaGFuZ2U7XHJcbiAgfSgpLFxyXG4gIG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBvbihsaWZlY3ljbGVFdmVudCwgaGFuZGxlcikge1xyXG4gICAgICBpZiAobGlmZWN5Y2xlRXZlbnQgPT09ICdlcnJvcicpIHRoaXMuaGFuZGxlc093bkVycm9ycyA9IHRydWU7XHJcbiAgICAgIHZhciBidXMgPSB0aGlzLmxpZmVjeWNsZUV2ZW50c1tsaWZlY3ljbGVFdmVudF0gfHwgKDAsIF90cmFuc21pdHRlcjJbJ2RlZmF1bHQnXSkoKTtcclxuICAgICAgdGhpcy5saWZlY3ljbGVFdmVudHNbbGlmZWN5Y2xlRXZlbnRdID0gYnVzO1xyXG4gICAgICByZXR1cm4gYnVzLnN1YnNjcmliZShoYW5kbGVyLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvbjtcclxuICB9KCksXHJcbiAgYmluZEFjdGlvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gYmluZEFjdGlvbihzeW1ib2wsIGhhbmRsZXIpIHtcclxuICAgICAgaWYgKCFzeW1ib2wpIHtcclxuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ0ludmFsaWQgYWN0aW9uIHJlZmVyZW5jZSBwYXNzZWQgaW4nKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWZuLmlzRnVuY3Rpb24oaGFuZGxlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdiaW5kQWN0aW9uIGV4cGVjdHMgYSBmdW5jdGlvbicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBZb3UgY2FuIHBhc3MgaW4gdGhlIGNvbnN0YW50IG9yIHRoZSBmdW5jdGlvbiBpdHNlbGZcclxuICAgICAgdmFyIGtleSA9IHN5bWJvbC5pZCA/IHN5bWJvbC5pZCA6IHN5bWJvbDtcclxuICAgICAgdGhpcy5hY3Rpb25MaXN0ZW5lcnNba2V5XSA9IHRoaXMuYWN0aW9uTGlzdGVuZXJzW2tleV0gfHwgW107XHJcbiAgICAgIHRoaXMuYWN0aW9uTGlzdGVuZXJzW2tleV0ucHVzaChoYW5kbGVyLmJpbmQodGhpcykpO1xyXG4gICAgICB0aGlzLmJvdW5kTGlzdGVuZXJzLnB1c2goa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYmluZEFjdGlvbjtcclxuICB9KCksXHJcbiAgYmluZEFjdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGJpbmRBY3Rpb25zKGFjdGlvbnMpIHtcclxuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XHJcblxyXG4gICAgICBmbi5lYWNoT2JqZWN0KGZ1bmN0aW9uIChhY3Rpb24sIHN5bWJvbCkge1xyXG4gICAgICAgIHZhciBtYXRjaEZpcnN0Q2hhcmFjdGVyID0gLy4vO1xyXG4gICAgICAgIHZhciBhc3N1bWVkRXZlbnRIYW5kbGVyID0gYWN0aW9uLnJlcGxhY2UobWF0Y2hGaXJzdENoYXJhY3RlciwgZnVuY3Rpb24gKHgpIHtcclxuICAgICAgICAgIHJldHVybiAnb24nICsgU3RyaW5nKHhbMF0udG9VcHBlckNhc2UoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChfdGhpczNbYWN0aW9uXSAmJiBfdGhpczNbYXNzdW1lZEV2ZW50SGFuZGxlcl0pIHtcclxuICAgICAgICAgIC8vIElmIHlvdSBoYXZlIGJvdGggYWN0aW9uIGFuZCBvbkFjdGlvblxyXG4gICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCdZb3UgaGF2ZSBtdWx0aXBsZSBhY3Rpb24gaGFuZGxlcnMgYm91bmQgdG8gYW4gYWN0aW9uOiAnICsgKFN0cmluZyhhY3Rpb24pICsgJyBhbmQgJyArIFN0cmluZyhhc3N1bWVkRXZlbnRIYW5kbGVyKSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBfdGhpczNbYWN0aW9uXSB8fCBfdGhpczNbYXNzdW1lZEV2ZW50SGFuZGxlcl07XHJcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcclxuICAgICAgICAgIF90aGlzMy5iaW5kQWN0aW9uKHN5bWJvbCwgaGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBbYWN0aW9uc10pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBiaW5kQWN0aW9ucztcclxuICB9KCksXHJcbiAgYmluZExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gYmluZExpc3RlbmVycyhvYmopIHtcclxuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XHJcblxyXG4gICAgICBmbi5lYWNoT2JqZWN0KGZ1bmN0aW9uIChtZXRob2ROYW1lLCBzeW1ib2wpIHtcclxuICAgICAgICB2YXIgbGlzdGVuZXIgPSBfdGhpczRbbWV0aG9kTmFtZV07XHJcblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihTdHJpbmcobWV0aG9kTmFtZSkgKyAnIGRlZmluZWQgYnV0IGRvZXMgbm90IGV4aXN0IGluICcgKyBTdHJpbmcoX3RoaXM0LmRpc3BsYXlOYW1lKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzeW1ib2wpKSB7XHJcbiAgICAgICAgICBzeW1ib2wuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIF90aGlzNC5iaW5kQWN0aW9uKGFjdGlvbiwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIF90aGlzNC5iaW5kQWN0aW9uKHN5bWJvbCwgbGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgW29ial0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBiaW5kTGlzdGVuZXJzO1xyXG4gIH0oKVxyXG59O1xyXG5cclxuZXhwb3J0c1snZGVmYXVsdCddID0gU3RvcmVNaXhpbjtcclxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuY3JlYXRlU3RvcmVDb25maWcgPSBjcmVhdGVTdG9yZUNvbmZpZztcclxuZXhwb3J0cy50cmFuc2Zvcm1TdG9yZSA9IHRyYW5zZm9ybVN0b3JlO1xyXG5leHBvcnRzLmNyZWF0ZVN0b3JlRnJvbU9iamVjdCA9IGNyZWF0ZVN0b3JlRnJvbU9iamVjdDtcclxuZXhwb3J0cy5jcmVhdGVTdG9yZUZyb21DbGFzcyA9IGNyZWF0ZVN0b3JlRnJvbUNsYXNzO1xyXG5cclxudmFyIF9BbHRVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL0FsdFV0aWxzJyk7XHJcblxyXG52YXIgdXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfQWx0VXRpbHMpO1xyXG5cclxudmFyIF9mdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMnKTtcclxuXHJcbnZhciBmbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mdW5jdGlvbnMpO1xyXG5cclxudmFyIF9BbHRTdG9yZSA9IHJlcXVpcmUoJy4vQWx0U3RvcmUnKTtcclxuXHJcbnZhciBfQWx0U3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWx0U3RvcmUpO1xyXG5cclxudmFyIF9TdG9yZU1peGluID0gcmVxdWlyZSgnLi9TdG9yZU1peGluJyk7XHJcblxyXG52YXIgX1N0b3JlTWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RvcmVNaXhpbik7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxyXG5cclxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XHJcblxyXG5mdW5jdGlvbiBkb1NldFN0YXRlKHN0b3JlLCBzdG9yZUluc3RhbmNlLCBzdGF0ZSkge1xyXG4gIGlmICghc3RhdGUpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBjb25maWcgPSBzdG9yZUluc3RhbmNlLlN0b3JlTW9kZWwuY29uZmlnO1xyXG5cclxuXHJcbiAgdmFyIG5leHRTdGF0ZSA9IGZuLmlzRnVuY3Rpb24oc3RhdGUpID8gc3RhdGUoc3RvcmVJbnN0YW5jZS5zdGF0ZSkgOiBzdGF0ZTtcclxuXHJcbiAgc3RvcmVJbnN0YW5jZS5zdGF0ZSA9IGNvbmZpZy5zZXRTdGF0ZS5jYWxsKHN0b3JlLCBzdG9yZUluc3RhbmNlLnN0YXRlLCBuZXh0U3RhdGUpO1xyXG5cclxuICBpZiAoIXN0b3JlLmFsdC5kaXNwYXRjaGVyLmlzRGlzcGF0Y2hpbmcoKSkge1xyXG4gICAgc3RvcmUuZW1pdENoYW5nZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUHJvdG90eXBlKHByb3RvLCBhbHQsIGtleSwgZXh0cmFzKSB7XHJcbiAgcmV0dXJuIGZuLmFzc2lnbihwcm90bywgX1N0b3JlTWl4aW4yWydkZWZhdWx0J10sIHtcclxuICAgIGRpc3BsYXlOYW1lOiBrZXksXHJcbiAgICBhbHQ6IGFsdCxcclxuICAgIGRpc3BhdGNoZXI6IGFsdC5kaXNwYXRjaGVyLFxyXG4gICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoKSB7XHJcbiAgICAgICAgdGhpcy5nZXRJbnN0YW5jZSgpLnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHByZXZlbnREZWZhdWx0O1xyXG4gICAgfSgpLFxyXG5cclxuICAgIGJvdW5kTGlzdGVuZXJzOiBbXSxcclxuICAgIGxpZmVjeWNsZUV2ZW50czoge30sXHJcbiAgICBhY3Rpb25MaXN0ZW5lcnM6IHt9LFxyXG4gICAgcHVibGljTWV0aG9kczoge30sXHJcbiAgICBoYW5kbGVzT3duRXJyb3JzOiBmYWxzZVxyXG4gIH0sIGV4dHJhcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlQ29uZmlnKGdsb2JhbENvbmZpZywgU3RvcmVNb2RlbCkge1xyXG4gIFN0b3JlTW9kZWwuY29uZmlnID0gZm4uYXNzaWduKHtcclxuICAgIGdldFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZ1bmN0aW9uIGdldFN0YXRlKHN0YXRlKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3RhdGUpKSB7XHJcbiAgICAgICAgICByZXR1cm4gc3RhdGUuc2xpY2UoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGZuLmlzTXV0YWJsZU9iamVjdChzdGF0ZSkpIHtcclxuICAgICAgICAgIHJldHVybiBmbi5hc3NpZ24oe30sIHN0YXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGdldFN0YXRlO1xyXG4gICAgfSgpLFxyXG4gICAgc2V0U3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZnVuY3Rpb24gc2V0U3RhdGUoY3VycmVudFN0YXRlLCBuZXh0U3RhdGUpIHtcclxuICAgICAgICBpZiAoZm4uaXNNdXRhYmxlT2JqZWN0KG5leHRTdGF0ZSkpIHtcclxuICAgICAgICAgIHJldHVybiBmbi5hc3NpZ24oY3VycmVudFN0YXRlLCBuZXh0U3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dFN0YXRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc2V0U3RhdGU7XHJcbiAgICB9KClcclxuICB9LCBnbG9iYWxDb25maWcsIFN0b3JlTW9kZWwuY29uZmlnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJhbnNmb3JtU3RvcmUodHJhbnNmb3JtcywgU3RvcmVNb2RlbCkge1xyXG4gIHJldHVybiB0cmFuc2Zvcm1zLnJlZHVjZShmdW5jdGlvbiAoU3RvcmUsIHRyYW5zZm9ybSkge1xyXG4gICAgcmV0dXJuIHRyYW5zZm9ybShTdG9yZSk7XHJcbiAgfSwgU3RvcmVNb2RlbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlRnJvbU9iamVjdChhbHQsIFN0b3JlTW9kZWwsIGtleSkge1xyXG4gIHZhciBzdG9yZUluc3RhbmNlID0gdm9pZCAwO1xyXG5cclxuICB2YXIgU3RvcmVQcm90byA9IGNyZWF0ZVByb3RvdHlwZSh7fSwgYWx0LCBrZXksIGZuLmFzc2lnbih7XHJcbiAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jdGlvbiBnZXRJbnN0YW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gc3RvcmVJbnN0YW5jZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGdldEluc3RhbmNlO1xyXG4gICAgfSgpLFxyXG4gICAgc2V0U3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XHJcbiAgICAgICAgZG9TZXRTdGF0ZSh0aGlzLCBzdG9yZUluc3RhbmNlLCBuZXh0U3RhdGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc2V0U3RhdGU7XHJcbiAgICB9KClcclxuICB9LCBTdG9yZU1vZGVsKSk7XHJcblxyXG4gIC8vIGJpbmQgdGhlIHN0b3JlIGxpc3RlbmVyc1xyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgaWYgKFN0b3JlUHJvdG8uYmluZExpc3RlbmVycykge1xyXG4gICAgX1N0b3JlTWl4aW4yWydkZWZhdWx0J10uYmluZExpc3RlbmVycy5jYWxsKFN0b3JlUHJvdG8sIFN0b3JlUHJvdG8uYmluZExpc3RlbmVycyk7XHJcbiAgfVxyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgaWYgKFN0b3JlUHJvdG8ub2JzZXJ2ZSkge1xyXG4gICAgX1N0b3JlTWl4aW4yWydkZWZhdWx0J10uYmluZExpc3RlbmVycy5jYWxsKFN0b3JlUHJvdG8sIFN0b3JlUHJvdG8ub2JzZXJ2ZShhbHQpKTtcclxuICB9XHJcblxyXG4gIC8vIGJpbmQgdGhlIGxpZmVjeWNsZSBldmVudHNcclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gIGlmIChTdG9yZVByb3RvLmxpZmVjeWNsZSkge1xyXG4gICAgZm4uZWFjaE9iamVjdChmdW5jdGlvbiAoZXZlbnROYW1lLCBldmVudCkge1xyXG4gICAgICBfU3RvcmVNaXhpbjJbJ2RlZmF1bHQnXS5vbi5jYWxsKFN0b3JlUHJvdG8sIGV2ZW50TmFtZSwgZXZlbnQpO1xyXG4gICAgfSwgW1N0b3JlUHJvdG8ubGlmZWN5Y2xlXSk7XHJcbiAgfVxyXG5cclxuICAvLyBjcmVhdGUgdGhlIGluc3RhbmNlIGFuZCBmbi5hc3NpZ24gdGhlIHB1YmxpYyBtZXRob2RzIHRvIHRoZSBpbnN0YW5jZVxyXG4gIHN0b3JlSW5zdGFuY2UgPSBmbi5hc3NpZ24obmV3IF9BbHRTdG9yZTJbJ2RlZmF1bHQnXShhbHQsIFN0b3JlUHJvdG8sIFN0b3JlUHJvdG8uc3RhdGUgIT09IHVuZGVmaW5lZCA/IFN0b3JlUHJvdG8uc3RhdGUgOiB7fSwgU3RvcmVNb2RlbCksIFN0b3JlUHJvdG8ucHVibGljTWV0aG9kcywge1xyXG4gICAgZGlzcGxheU5hbWU6IGtleSxcclxuICAgIGNvbmZpZzogU3RvcmVNb2RlbC5jb25maWdcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHN0b3JlSW5zdGFuY2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlRnJvbUNsYXNzKGFsdCwgU3RvcmVNb2RlbCwga2V5KSB7XHJcbiAgdmFyIHN0b3JlSW5zdGFuY2UgPSB2b2lkIDA7XHJcbiAgdmFyIGNvbmZpZyA9IFN0b3JlTW9kZWwuY29uZmlnO1xyXG5cclxuICAvLyBDcmVhdGluZyBhIGNsYXNzIGhlcmUgc28gd2UgZG9uJ3Qgb3ZlcmxvYWQgdGhlIHByb3ZpZGVkIHN0b3JlJ3NcclxuICAvLyBwcm90b3R5cGUgd2l0aCB0aGUgbWl4aW4gYmVoYXZpb3VyIGFuZCBJJ20gZXh0ZW5kaW5nIGZyb20gU3RvcmVNb2RlbFxyXG4gIC8vIHNvIHdlIGNhbiBpbmhlcml0IGFueSBleHRlbnNpb25zIGZyb20gdGhlIHByb3ZpZGVkIHN0b3JlLlxyXG5cclxuICB2YXIgU3RvcmUgPSBmdW5jdGlvbiAoX1N0b3JlTW9kZWwpIHtcclxuICAgIF9pbmhlcml0cyhTdG9yZSwgX1N0b3JlTW9kZWwpO1xyXG5cclxuICAgIGZ1bmN0aW9uIFN0b3JlKCkge1xyXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RvcmUpO1xyXG5cclxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcclxuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfU3RvcmVNb2RlbC5jYWxsLmFwcGx5KF9TdG9yZU1vZGVsLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFN0b3JlO1xyXG4gIH0oU3RvcmVNb2RlbCk7XHJcblxyXG4gIGNyZWF0ZVByb3RvdHlwZShTdG9yZS5wcm90b3R5cGUsIGFsdCwga2V5LCB7XHJcbiAgICB0eXBlOiAnQWx0U3RvcmUnLFxyXG4gICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0b3JlSW5zdGFuY2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBnZXRJbnN0YW5jZTtcclxuICAgIH0oKSxcclxuICAgIHNldFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xyXG4gICAgICAgIGRvU2V0U3RhdGUodGhpcywgc3RvcmVJbnN0YW5jZSwgbmV4dFN0YXRlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHNldFN0YXRlO1xyXG4gICAgfSgpXHJcbiAgfSk7XHJcblxyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzRm9yQ2xhc3MgPSBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XHJcbiAgICBhcmdzRm9yQ2xhc3NbX2tleSAtIDNdID0gYXJndW1lbnRzW19rZXldO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0b3JlID0gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShTdG9yZSwgW251bGxdLmNvbmNhdChhcmdzRm9yQ2xhc3MpKSkoKTtcclxuXHJcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICBpZiAoY29uZmlnLmJpbmRMaXN0ZW5lcnMpIHN0b3JlLmJpbmRMaXN0ZW5lcnMoY29uZmlnLmJpbmRMaXN0ZW5lcnMpO1xyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgaWYgKGNvbmZpZy5kYXRhc291cmNlKSBzdG9yZS5yZWdpc3RlckFzeW5jKGNvbmZpZy5kYXRhc291cmNlKTtcclxuXHJcbiAgc3RvcmVJbnN0YW5jZSA9IGZuLmFzc2lnbihuZXcgX0FsdFN0b3JlMlsnZGVmYXVsdCddKGFsdCwgc3RvcmUsIHN0b3JlLnN0YXRlICE9PSB1bmRlZmluZWQgPyBzdG9yZS5zdGF0ZSA6IHN0b3JlLCBTdG9yZU1vZGVsKSwgdXRpbHMuZ2V0SW50ZXJuYWxNZXRob2RzKFN0b3JlTW9kZWwpLCBjb25maWcucHVibGljTWV0aG9kcywgeyBkaXNwbGF5TmFtZToga2V5IH0pO1xyXG5cclxuICByZXR1cm4gc3RvcmVJbnN0YW5jZTtcclxufSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5cclxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcclxuXHJcbmV4cG9ydHMuZ2V0SW50ZXJuYWxNZXRob2RzID0gZ2V0SW50ZXJuYWxNZXRob2RzO1xyXG5leHBvcnRzLmdldFByb3RvdHlwZUNoYWluID0gZ2V0UHJvdG90eXBlQ2hhaW47XHJcbmV4cG9ydHMud2FybiA9IHdhcm47XHJcbmV4cG9ydHMudWlkID0gdWlkO1xyXG5leHBvcnRzLmZvcm1hdEFzQ29uc3RhbnQgPSBmb3JtYXRBc0NvbnN0YW50O1xyXG5leHBvcnRzLmRpc3BhdGNoSWRlbnRpdHkgPSBkaXNwYXRjaElkZW50aXR5O1xyXG5leHBvcnRzLmZzYSA9IGZzYTtcclxuZXhwb3J0cy5kaXNwYXRjaCA9IGRpc3BhdGNoO1xyXG5cclxudmFyIF9mdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMnKTtcclxuXHJcbnZhciBmbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mdW5jdGlvbnMpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cclxuXHJcbi8qZXNsaW50LWRpc2FibGUqL1xyXG52YXIgYnVpbHRJbnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhOb29wQ2xhc3MpO1xyXG52YXIgYnVpbHRJblByb3RvID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTm9vcENsYXNzLnByb3RvdHlwZSk7XHJcbi8qZXNsaW50LWVuYWJsZSovXHJcblxyXG5mdW5jdGlvbiBnZXRJbnRlcm5hbE1ldGhvZHMoT2JqLCBpc1Byb3RvKSB7XHJcbiAgdmFyIGV4Y2x1ZGVkID0gaXNQcm90byA/IGJ1aWx0SW5Qcm90byA6IGJ1aWx0SW5zO1xyXG4gIHZhciBvYmogPSBpc1Byb3RvID8gT2JqLnByb3RvdHlwZSA6IE9iajtcclxuICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBtKSB7XHJcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihtKSAhPT0gLTEpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlW21dID0gb2JqW21dO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH0sIHt9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UHJvdG90eXBlQ2hhaW4oT2JqKSB7XHJcbiAgdmFyIG1ldGhvZHMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcclxuXHJcbiAgcmV0dXJuIE9iaiA9PT0gRnVuY3Rpb24ucHJvdG90eXBlID8gbWV0aG9kcyA6IGdldFByb3RvdHlwZUNoYWluKE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmopLCBmbi5hc3NpZ24oZ2V0SW50ZXJuYWxNZXRob2RzKE9iaiwgdHJ1ZSksIG1ldGhvZHMpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gd2Fybihtc2cpIHtcclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gIC8qZXNsaW50LWRpc2FibGUqL1xyXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIGNvbnNvbGUud2FybihuZXcgUmVmZXJlbmNlRXJyb3IobXNnKSk7XHJcbiAgfVxyXG4gIC8qZXNsaW50LWVuYWJsZSovXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVpZChjb250YWluZXIsIG5hbWUpIHtcclxuICB2YXIgY291bnQgPSAwO1xyXG4gIHZhciBrZXkgPSBuYW1lO1xyXG4gIHdoaWxlIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjb250YWluZXIsIGtleSkpIHtcclxuICAgIGtleSA9IG5hbWUgKyBTdHJpbmcoKytjb3VudCk7XHJcbiAgfVxyXG4gIHJldHVybiBrZXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdEFzQ29uc3RhbnQobmFtZSkge1xyXG4gIHJldHVybiBuYW1lLnJlcGxhY2UoL1thLXpdKFtBLVpdKS9nLCBmdW5jdGlvbiAoaSkge1xyXG4gICAgcmV0dXJuIFN0cmluZyhpWzBdKSArICdfJyArIFN0cmluZyhpWzFdLnRvTG93ZXJDYXNlKCkpO1xyXG4gIH0pLnRvVXBwZXJDYXNlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc3BhdGNoSWRlbnRpdHkoeCkge1xyXG4gIGlmICh4ID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG5cclxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgIGFbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGEubGVuZ3RoID8gW3hdLmNvbmNhdChhKSA6IHg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZzYShpZCwgdHlwZSwgcGF5bG9hZCwgZGV0YWlscykge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiB0eXBlLFxyXG4gICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgIG1ldGE6IF9leHRlbmRzKHtcclxuICAgICAgZGlzcGF0Y2hJZDogaWRcclxuICAgIH0sIGRldGFpbHMpLFxyXG5cclxuICAgIGlkOiBpZCxcclxuICAgIGFjdGlvbjogdHlwZSxcclxuICAgIGRhdGE6IHBheWxvYWQsXHJcbiAgICBkZXRhaWxzOiBkZXRhaWxzXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGlzcGF0Y2goaWQsIGFjdGlvbk9iaiwgcGF5bG9hZCwgYWx0KSB7XHJcbiAgdmFyIGRhdGEgPSBhY3Rpb25PYmouZGlzcGF0Y2gocGF5bG9hZCk7XHJcbiAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XHJcblxyXG4gIHZhciB0eXBlID0gYWN0aW9uT2JqLmlkO1xyXG4gIHZhciBuYW1lc3BhY2UgPSB0eXBlO1xyXG4gIHZhciBuYW1lID0gdHlwZTtcclxuICB2YXIgZGV0YWlscyA9IHsgaWQ6IHR5cGUsIG5hbWVzcGFjZTogbmFtZXNwYWNlLCBuYW1lOiBuYW1lIH07XHJcblxyXG4gIHZhciBkaXNwYXRjaExhdGVyID0gZnVuY3Rpb24gZGlzcGF0Y2hMYXRlcih4KSB7XHJcbiAgICByZXR1cm4gYWx0LmRpc3BhdGNoKHR5cGUsIHgsIGRldGFpbHMpO1xyXG4gIH07XHJcblxyXG4gIGlmIChmbi5pc0Z1bmN0aW9uKGRhdGEpKSByZXR1cm4gZGF0YShkaXNwYXRjaExhdGVyLCBhbHQpO1xyXG5cclxuICAvLyBYWFggc3RhbmRhcmRpemUgdGhpc1xyXG4gIHJldHVybiBhbHQuZGlzcGF0Y2hlci5kaXNwYXRjaChmc2EoaWQsIHR5cGUsIGRhdGEsIGRldGFpbHMpKTtcclxufVxyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gTm9vcENsYXNzKCkge30iLCIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5zZXRBcHBTdGF0ZSA9IHNldEFwcFN0YXRlO1xyXG5leHBvcnRzLnNuYXBzaG90ID0gc25hcHNob3Q7XHJcbmV4cG9ydHMuc2F2ZUluaXRpYWxTbmFwc2hvdCA9IHNhdmVJbml0aWFsU25hcHNob3Q7XHJcbmV4cG9ydHMuZmlsdGVyU25hcHNob3RzID0gZmlsdGVyU25hcHNob3RzO1xyXG5cclxudmFyIF9mdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMnKTtcclxuXHJcbnZhciBmbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mdW5jdGlvbnMpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cclxuXHJcbmZ1bmN0aW9uIHNldEFwcFN0YXRlKGluc3RhbmNlLCBkYXRhLCBvblN0b3JlKSB7XHJcbiAgdmFyIG9iaiA9IGluc3RhbmNlLmRlc2VyaWFsaXplKGRhdGEpO1xyXG4gIGZuLmVhY2hPYmplY3QoZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgIHZhciBzdG9yZSA9IGluc3RhbmNlLnN0b3Jlc1trZXldO1xyXG4gICAgaWYgKHN0b3JlKSB7XHJcbiAgICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IHN0b3JlLlN0b3JlTW9kZWwuY29uZmlnO1xyXG5cclxuICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcclxuICAgICAgICBpZiAoY29uZmlnLm9uRGVzZXJpYWxpemUpIG9ialtrZXldID0gY29uZmlnLm9uRGVzZXJpYWxpemUodmFsdWUpIHx8IHZhbHVlO1xyXG4gICAgICAgIGlmIChmbi5pc011dGFibGVPYmplY3Qoc3RhdGUpKSB7XHJcbiAgICAgICAgICBmbi5lYWNoT2JqZWN0KGZ1bmN0aW9uIChrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWxldGUgc3RhdGVba107XHJcbiAgICAgICAgICB9LCBbc3RhdGVdKTtcclxuICAgICAgICAgIGZuLmFzc2lnbihzdGF0ZSwgb2JqW2tleV0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdG9yZS5zdGF0ZSA9IG9ialtrZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvblN0b3JlKHN0b3JlLCBzdG9yZS5zdGF0ZSk7XHJcbiAgICAgIH0pKCk7XHJcbiAgICB9XHJcbiAgfSwgW29ial0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzbmFwc2hvdChpbnN0YW5jZSkge1xyXG4gIHZhciBzdG9yZU5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gW10gOiBhcmd1bWVudHNbMV07XHJcblxyXG4gIHZhciBzdG9yZXMgPSBzdG9yZU5hbWVzLmxlbmd0aCA/IHN0b3JlTmFtZXMgOiBPYmplY3Qua2V5cyhpbnN0YW5jZS5zdG9yZXMpO1xyXG4gIHJldHVybiBzdG9yZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIHN0b3JlSGFuZGxlKSB7XHJcbiAgICB2YXIgc3RvcmVOYW1lID0gc3RvcmVIYW5kbGUuZGlzcGxheU5hbWUgfHwgc3RvcmVIYW5kbGU7XHJcbiAgICB2YXIgc3RvcmUgPSBpbnN0YW5jZS5zdG9yZXNbc3RvcmVOYW1lXTtcclxuICAgIHZhciBjb25maWcgPSBzdG9yZS5TdG9yZU1vZGVsLmNvbmZpZztcclxuXHJcbiAgICBzdG9yZS5saWZlY3ljbGUoJ3NuYXBzaG90Jyk7XHJcbiAgICB2YXIgY3VzdG9tU25hcHNob3QgPSBjb25maWcub25TZXJpYWxpemUgJiYgY29uZmlnLm9uU2VyaWFsaXplKHN0b3JlLnN0YXRlKTtcclxuICAgIG9ialtzdG9yZU5hbWVdID0gY3VzdG9tU25hcHNob3QgPyBjdXN0b21TbmFwc2hvdCA6IHN0b3JlLmdldFN0YXRlKCk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH0sIHt9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZUluaXRpYWxTbmFwc2hvdChpbnN0YW5jZSwga2V5KSB7XHJcbiAgdmFyIHN0YXRlID0gaW5zdGFuY2UuZGVzZXJpYWxpemUoaW5zdGFuY2Uuc2VyaWFsaXplKGluc3RhbmNlLnN0b3Jlc1trZXldLnN0YXRlKSk7XHJcbiAgaW5zdGFuY2UuX2luaXRTbmFwc2hvdFtrZXldID0gc3RhdGU7XHJcbiAgaW5zdGFuY2UuX2xhc3RTbmFwc2hvdFtrZXldID0gc3RhdGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlclNuYXBzaG90cyhpbnN0YW5jZSwgc3RhdGUsIHN0b3Jlcykge1xyXG4gIHJldHVybiBzdG9yZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIHN0b3JlKSB7XHJcbiAgICB2YXIgc3RvcmVOYW1lID0gc3RvcmUuZGlzcGxheU5hbWUgfHwgc3RvcmU7XHJcbiAgICBpZiAoIXN0YXRlW3N0b3JlTmFtZV0pIHtcclxuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFN0cmluZyhzdG9yZU5hbWUpICsgJyBpcyBub3QgYSB2YWxpZCBzdG9yZScpO1xyXG4gICAgfVxyXG4gICAgb2JqW3N0b3JlTmFtZV0gPSBzdGF0ZVtzdG9yZU5hbWVdO1xyXG4gICAgcmV0dXJuIG9iajtcclxuICB9LCB7fSk7XHJcbn0iLCJ2YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4vbGliL2tleXMuanMnKTtcclxudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9saWIvaXNfYXJndW1lbnRzLmpzJyk7XHJcblxyXG52YXIgZGVlcEVxdWFsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgb3B0cykge1xyXG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xyXG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxyXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBEYXRlICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcclxuXHJcbiAgLy8gNy4zLiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxyXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXHJcbiAgfSBlbHNlIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCB8fCB0eXBlb2YgYWN0dWFsICE9ICdvYmplY3QnICYmIHR5cGVvZiBleHBlY3RlZCAhPSAnb2JqZWN0Jykge1xyXG4gICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gYWN0dWFsID09PSBleHBlY3RlZCA6IGFjdHVhbCA9PSBleHBlY3RlZDtcclxuXHJcbiAgLy8gNy40LiBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXHJcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXHJcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xyXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcclxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xyXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgb3B0cyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xyXG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0J1ZmZlciAoeCkge1xyXG4gIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHgubGVuZ3RoICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xyXG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIG9wdHMpIHtcclxuICB2YXIgaSwga2V5O1xyXG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcclxuICAgIHJldHVybiBmYWxzZTtcclxuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXHJcbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xyXG4gIC8vfn5+SSd2ZSBtYW5hZ2VkIHRvIGJyZWFrIE9iamVjdC5rZXlzIHRocm91Z2ggc2NyZXd5IGFyZ3VtZW50cyBwYXNzaW5nLlxyXG4gIC8vICAgQ29udmVydGluZyB0byBhcnJheSBzb2x2ZXMgdGhlIHByb2JsZW0uXHJcbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XHJcbiAgICBpZiAoIWlzQXJndW1lbnRzKGIpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGEgPSBwU2xpY2UuY2FsbChhKTtcclxuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcclxuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XHJcbiAgfVxyXG4gIGlmIChpc0J1ZmZlcihhKSkge1xyXG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHRyeSB7XHJcbiAgICB2YXIga2EgPSBvYmplY3RLZXlzKGEpLFxyXG4gICAgICAgIGtiID0gb2JqZWN0S2V5cyhiKTtcclxuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXHJcbiAgLy8gaGFzT3duUHJvcGVydHkpXHJcbiAgaWYgKGthLmxlbmd0aCAhPSBrYi5sZW5ndGgpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcclxuICBrYS5zb3J0KCk7XHJcbiAga2Iuc29ydCgpO1xyXG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcclxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcclxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcclxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAga2V5ID0ga2FbaV07XHJcbiAgICBpZiAoIWRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgb3B0cykpIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcclxufVxyXG4iLCJ2YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxyXG59KSgpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xyXG5cclxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xyXG5cclxuZXhwb3J0cy5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQ7XHJcbmZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcclxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XHJcbn07XHJcblxyXG5leHBvcnRzLnVuc3VwcG9ydGVkID0gdW5zdXBwb3J0ZWQ7XHJcbmZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XHJcbiAgcmV0dXJuIG9iamVjdCAmJlxyXG4gICAgdHlwZW9mIG9iamVjdCA9PSAnb2JqZWN0JyAmJlxyXG4gICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcclxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxyXG4gICAgIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsICdjYWxsZWUnKSB8fFxyXG4gICAgZmFsc2U7XHJcbn07XHJcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJ1xyXG4gID8gT2JqZWN0LmtleXMgOiBzaGltO1xyXG5cclxuZXhwb3J0cy5zaGltID0gc2hpbTtcclxuZnVuY3Rpb24gc2hpbSAob2JqKSB7XHJcbiAgdmFyIGtleXMgPSBbXTtcclxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcclxuICByZXR1cm4ga2V5cztcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMuRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vbGliL0Rpc3BhdGNoZXInKTtcclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGlzcGF0Y2hlclxyXG4gKiBcclxuICogQHByZXZlbnRNdW5nZVxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cclxuXHJcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcclxuXHJcbnZhciBfcHJlZml4ID0gJ0lEXyc7XHJcblxyXG4vKipcclxuICogRGlzcGF0Y2hlciBpcyB1c2VkIHRvIGJyb2FkY2FzdCBwYXlsb2FkcyB0byByZWdpc3RlcmVkIGNhbGxiYWNrcy4gVGhpcyBpc1xyXG4gKiBkaWZmZXJlbnQgZnJvbSBnZW5lcmljIHB1Yi1zdWIgc3lzdGVtcyBpbiB0d28gd2F5czpcclxuICpcclxuICogICAxKSBDYWxsYmFja3MgYXJlIG5vdCBzdWJzY3JpYmVkIHRvIHBhcnRpY3VsYXIgZXZlbnRzLiBFdmVyeSBwYXlsb2FkIGlzXHJcbiAqICAgICAgZGlzcGF0Y2hlZCB0byBldmVyeSByZWdpc3RlcmVkIGNhbGxiYWNrLlxyXG4gKiAgIDIpIENhbGxiYWNrcyBjYW4gYmUgZGVmZXJyZWQgaW4gd2hvbGUgb3IgcGFydCB1bnRpbCBvdGhlciBjYWxsYmFja3MgaGF2ZVxyXG4gKiAgICAgIGJlZW4gZXhlY3V0ZWQuXHJcbiAqXHJcbiAqIEZvciBleGFtcGxlLCBjb25zaWRlciB0aGlzIGh5cG90aGV0aWNhbCBmbGlnaHQgZGVzdGluYXRpb24gZm9ybSwgd2hpY2hcclxuICogc2VsZWN0cyBhIGRlZmF1bHQgY2l0eSB3aGVuIGEgY291bnRyeSBpcyBzZWxlY3RlZDpcclxuICpcclxuICogICB2YXIgZmxpZ2h0RGlzcGF0Y2hlciA9IG5ldyBEaXNwYXRjaGVyKCk7XHJcbiAqXHJcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2Ygd2hpY2ggY291bnRyeSBpcyBzZWxlY3RlZFxyXG4gKiAgIHZhciBDb3VudHJ5U3RvcmUgPSB7Y291bnRyeTogbnVsbH07XHJcbiAqXHJcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2Ygd2hpY2ggY2l0eSBpcyBzZWxlY3RlZFxyXG4gKiAgIHZhciBDaXR5U3RvcmUgPSB7Y2l0eTogbnVsbH07XHJcbiAqXHJcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGJhc2UgZmxpZ2h0IHByaWNlIG9mIHRoZSBzZWxlY3RlZCBjaXR5XHJcbiAqICAgdmFyIEZsaWdodFByaWNlU3RvcmUgPSB7cHJpY2U6IG51bGx9XHJcbiAqXHJcbiAqIFdoZW4gYSB1c2VyIGNoYW5nZXMgdGhlIHNlbGVjdGVkIGNpdHksIHdlIGRpc3BhdGNoIHRoZSBwYXlsb2FkOlxyXG4gKlxyXG4gKiAgIGZsaWdodERpc3BhdGNoZXIuZGlzcGF0Y2goe1xyXG4gKiAgICAgYWN0aW9uVHlwZTogJ2NpdHktdXBkYXRlJyxcclxuICogICAgIHNlbGVjdGVkQ2l0eTogJ3BhcmlzJ1xyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKiBUaGlzIHBheWxvYWQgaXMgZGlnZXN0ZWQgYnkgYENpdHlTdG9yZWA6XHJcbiAqXHJcbiAqICAgZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAqICAgICBpZiAocGF5bG9hZC5hY3Rpb25UeXBlID09PSAnY2l0eS11cGRhdGUnKSB7XHJcbiAqICAgICAgIENpdHlTdG9yZS5jaXR5ID0gcGF5bG9hZC5zZWxlY3RlZENpdHk7XHJcbiAqICAgICB9XHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqIFdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIGNvdW50cnksIHdlIGRpc3BhdGNoIHRoZSBwYXlsb2FkOlxyXG4gKlxyXG4gKiAgIGZsaWdodERpc3BhdGNoZXIuZGlzcGF0Y2goe1xyXG4gKiAgICAgYWN0aW9uVHlwZTogJ2NvdW50cnktdXBkYXRlJyxcclxuICogICAgIHNlbGVjdGVkQ291bnRyeTogJ2F1c3RyYWxpYSdcclxuICogICB9KTtcclxuICpcclxuICogVGhpcyBwYXlsb2FkIGlzIGRpZ2VzdGVkIGJ5IGJvdGggc3RvcmVzOlxyXG4gKlxyXG4gKiAgIENvdW50cnlTdG9yZS5kaXNwYXRjaFRva2VuID0gZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAqICAgICBpZiAocGF5bG9hZC5hY3Rpb25UeXBlID09PSAnY291bnRyeS11cGRhdGUnKSB7XHJcbiAqICAgICAgIENvdW50cnlTdG9yZS5jb3VudHJ5ID0gcGF5bG9hZC5zZWxlY3RlZENvdW50cnk7XHJcbiAqICAgICB9XHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqIFdoZW4gdGhlIGNhbGxiYWNrIHRvIHVwZGF0ZSBgQ291bnRyeVN0b3JlYCBpcyByZWdpc3RlcmVkLCB3ZSBzYXZlIGEgcmVmZXJlbmNlXHJcbiAqIHRvIHRoZSByZXR1cm5lZCB0b2tlbi4gVXNpbmcgdGhpcyB0b2tlbiB3aXRoIGB3YWl0Rm9yKClgLCB3ZSBjYW4gZ3VhcmFudGVlXHJcbiAqIHRoYXQgYENvdW50cnlTdG9yZWAgaXMgdXBkYXRlZCBiZWZvcmUgdGhlIGNhbGxiYWNrIHRoYXQgdXBkYXRlcyBgQ2l0eVN0b3JlYFxyXG4gKiBuZWVkcyB0byBxdWVyeSBpdHMgZGF0YS5cclxuICpcclxuICogICBDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbiA9IGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gKiAgICAgaWYgKHBheWxvYWQuYWN0aW9uVHlwZSA9PT0gJ2NvdW50cnktdXBkYXRlJykge1xyXG4gKiAgICAgICAvLyBgQ291bnRyeVN0b3JlLmNvdW50cnlgIG1heSBub3QgYmUgdXBkYXRlZC5cclxuICogICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDb3VudHJ5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xyXG4gKiAgICAgICAvLyBgQ291bnRyeVN0b3JlLmNvdW50cnlgIGlzIG5vdyBndWFyYW50ZWVkIHRvIGJlIHVwZGF0ZWQuXHJcbiAqXHJcbiAqICAgICAgIC8vIFNlbGVjdCB0aGUgZGVmYXVsdCBjaXR5IGZvciB0aGUgbmV3IGNvdW50cnlcclxuICogICAgICAgQ2l0eVN0b3JlLmNpdHkgPSBnZXREZWZhdWx0Q2l0eUZvckNvdW50cnkoQ291bnRyeVN0b3JlLmNvdW50cnkpO1xyXG4gKiAgICAgfVxyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKiBUaGUgdXNhZ2Ugb2YgYHdhaXRGb3IoKWAgY2FuIGJlIGNoYWluZWQsIGZvciBleGFtcGxlOlxyXG4gKlxyXG4gKiAgIEZsaWdodFByaWNlU3RvcmUuZGlzcGF0Y2hUb2tlbiA9XHJcbiAqICAgICBmbGlnaHREaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICogICAgICAgc3dpdGNoIChwYXlsb2FkLmFjdGlvblR5cGUpIHtcclxuICogICAgICAgICBjYXNlICdjb3VudHJ5LXVwZGF0ZSc6XHJcbiAqICAgICAgICAgY2FzZSAnY2l0eS11cGRhdGUnOlxyXG4gKiAgICAgICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xyXG4gKiAgICAgICAgICAgRmxpZ2h0UHJpY2VTdG9yZS5wcmljZSA9XHJcbiAqICAgICAgICAgICAgIGdldEZsaWdodFByaWNlU3RvcmUoQ291bnRyeVN0b3JlLmNvdW50cnksIENpdHlTdG9yZS5jaXR5KTtcclxuICogICAgICAgICAgIGJyZWFrO1xyXG4gKiAgICAgfVxyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKiBUaGUgYGNvdW50cnktdXBkYXRlYCBwYXlsb2FkIHdpbGwgYmUgZ3VhcmFudGVlZCB0byBpbnZva2UgdGhlIHN0b3JlcydcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MgaW4gb3JkZXI6IGBDb3VudHJ5U3RvcmVgLCBgQ2l0eVN0b3JlYCwgdGhlblxyXG4gKiBgRmxpZ2h0UHJpY2VTdG9yZWAuXHJcbiAqL1xyXG5cclxudmFyIERpc3BhdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIERpc3BhdGNoZXIoKSB7XHJcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzcGF0Y2hlcik7XHJcblxyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICB0aGlzLl9pc0Rpc3BhdGNoaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLl9pc0hhbmRsZWQgPSB7fTtcclxuICAgIHRoaXMuX2lzUGVuZGluZyA9IHt9O1xyXG4gICAgdGhpcy5fbGFzdElEID0gMTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2l0aCBldmVyeSBkaXNwYXRjaGVkIHBheWxvYWQuIFJldHVybnNcclxuICAgKiBhIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBgd2FpdEZvcigpYC5cclxuICAgKi9cclxuXHJcbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihjYWxsYmFjaykge1xyXG4gICAgdmFyIGlkID0gX3ByZWZpeCArIHRoaXMuX2xhc3RJRCsrO1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzW2lkXSA9IGNhbGxiYWNrO1xyXG4gICAgcmV0dXJuIGlkO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYSBjYWxsYmFjayBiYXNlZCBvbiBpdHMgdG9rZW4uXHJcbiAgICovXHJcblxyXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKGlkKSB7XHJcbiAgICAhdGhpcy5fY2FsbGJhY2tzW2lkXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEaXNwYXRjaGVyLnVucmVnaXN0ZXIoLi4uKTogYCVzYCBkb2VzIG5vdCBtYXAgdG8gYSByZWdpc3RlcmVkIGNhbGxiYWNrLicsIGlkKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzW2lkXTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBXYWl0cyBmb3IgdGhlIGNhbGxiYWNrcyBzcGVjaWZpZWQgdG8gYmUgaW52b2tlZCBiZWZvcmUgY29udGludWluZyBleGVjdXRpb25cclxuICAgKiBvZiB0aGUgY3VycmVudCBjYWxsYmFjay4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBhIGNhbGxiYWNrIGluXHJcbiAgICogcmVzcG9uc2UgdG8gYSBkaXNwYXRjaGVkIHBheWxvYWQuXHJcbiAgICovXHJcblxyXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLndhaXRGb3IgPSBmdW5jdGlvbiB3YWl0Rm9yKGlkcykge1xyXG4gICAgIXRoaXMuX2lzRGlzcGF0Y2hpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IE11c3QgYmUgaW52b2tlZCB3aGlsZSBkaXNwYXRjaGluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XHJcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaWRzLmxlbmd0aDsgaWkrKykge1xyXG4gICAgICB2YXIgaWQgPSBpZHNbaWldO1xyXG4gICAgICBpZiAodGhpcy5faXNQZW5kaW5nW2lkXSkge1xyXG4gICAgICAgICF0aGlzLl9pc0hhbmRsZWRbaWRdID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Rpc3BhdGNoZXIud2FpdEZvciguLi4pOiBDaXJjdWxhciBkZXBlbmRlbmN5IGRldGVjdGVkIHdoaWxlICcgKyAnd2FpdGluZyBmb3IgYCVzYC4nLCBpZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgICF0aGlzLl9jYWxsYmFja3NbaWRdID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Rpc3BhdGNoZXIud2FpdEZvciguLi4pOiBgJXNgIGRvZXMgbm90IG1hcCB0byBhIHJlZ2lzdGVyZWQgY2FsbGJhY2suJywgaWQpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcclxuICAgICAgdGhpcy5faW52b2tlQ2FsbGJhY2soaWQpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BhdGNoZXMgYSBwYXlsb2FkIHRvIGFsbCByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICAgKi9cclxuXHJcbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaChwYXlsb2FkKSB7XHJcbiAgICAhIXRoaXMuX2lzRGlzcGF0Y2hpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGlzcGF0Y2guZGlzcGF0Y2goLi4uKTogQ2Fubm90IGRpc3BhdGNoIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLl9zdGFydERpc3BhdGNoaW5nKHBheWxvYWQpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy5fY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUGVuZGluZ1tpZF0pIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pbnZva2VDYWxsYmFjayhpZCk7XHJcbiAgICAgIH1cclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuX3N0b3BEaXNwYXRjaGluZygpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIElzIHRoaXMgRGlzcGF0Y2hlciBjdXJyZW50bHkgZGlzcGF0Y2hpbmcuXHJcbiAgICovXHJcblxyXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLmlzRGlzcGF0Y2hpbmcgPSBmdW5jdGlvbiBpc0Rpc3BhdGNoaW5nKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzRGlzcGF0Y2hpbmc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGUgY2FsbGJhY2sgc3RvcmVkIHdpdGggdGhlIGdpdmVuIGlkLiBBbHNvIGRvIHNvbWUgaW50ZXJuYWxcclxuICAgKiBib29ra2VlcGluZy5cclxuICAgKlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG5cclxuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5faW52b2tlQ2FsbGJhY2sgPSBmdW5jdGlvbiBfaW52b2tlQ2FsbGJhY2soaWQpIHtcclxuICAgIHRoaXMuX2lzUGVuZGluZ1tpZF0gPSB0cnVlO1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzW2lkXSh0aGlzLl9wZW5kaW5nUGF5bG9hZCk7XHJcbiAgICB0aGlzLl9pc0hhbmRsZWRbaWRdID0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBTZXQgdXAgYm9va2tlZXBpbmcgbmVlZGVkIHdoZW4gZGlzcGF0Y2hpbmcuXHJcbiAgICpcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuXHJcbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuX3N0YXJ0RGlzcGF0Y2hpbmcgPSBmdW5jdGlvbiBfc3RhcnREaXNwYXRjaGluZyhwYXlsb2FkKSB7XHJcbiAgICBmb3IgKHZhciBpZCBpbiB0aGlzLl9jYWxsYmFja3MpIHtcclxuICAgICAgdGhpcy5faXNQZW5kaW5nW2lkXSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLl9pc0hhbmRsZWRbaWRdID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9wZW5kaW5nUGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICB0aGlzLl9pc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDbGVhciBib29ra2VlcGluZyB1c2VkIGZvciBkaXNwYXRjaGluZy5cclxuICAgKlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG5cclxuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5fc3RvcERpc3BhdGNoaW5nID0gZnVuY3Rpb24gX3N0b3BEaXNwYXRjaGluZygpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9wZW5kaW5nUGF5bG9hZDtcclxuICAgIHRoaXMuX2lzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gRGlzcGF0Y2hlcjtcclxufSkoKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRGlzcGF0Y2hlcjsiLCIvKipcclxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cclxuICpcclxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcclxuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXHJcbiAqIGV4cGVjdGluZy5cclxuICpcclxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcclxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxyXG4gKi9cclxuXHJcbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcclxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICghY29uZGl0aW9uKSB7XHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xyXG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xyXG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignSW52YXJpYW50IFZpb2xhdGlvbjogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XHJcbiAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIvKipcclxuICogSW5kaWNhdGVzIHRoYXQgbmF2aWdhdGlvbiB3YXMgY2F1c2VkIGJ5IGEgY2FsbCB0byBoaXN0b3J5LnB1c2guXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG52YXIgUFVTSCA9ICdQVVNIJztcclxuXHJcbmV4cG9ydHMuUFVTSCA9IFBVU0g7XHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhhdCBuYXZpZ2F0aW9uIHdhcyBjYXVzZWQgYnkgYSBjYWxsIHRvIGhpc3RvcnkucmVwbGFjZS5cclxuICovXHJcbnZhciBSRVBMQUNFID0gJ1JFUExBQ0UnO1xyXG5cclxuZXhwb3J0cy5SRVBMQUNFID0gUkVQTEFDRTtcclxuLyoqXHJcbiAqIEluZGljYXRlcyB0aGF0IG5hdmlnYXRpb24gd2FzIGNhdXNlZCBieSBzb21lIG90aGVyIGFjdGlvbiBzdWNoXHJcbiAqIGFzIHVzaW5nIGEgYnJvd3NlcidzIGJhY2svZm9yd2FyZCBidXR0b25zIGFuZC9vciBtYW51YWxseSBtYW5pcHVsYXRpbmdcclxuICogdGhlIFVSTCBpbiBhIGJyb3dzZXIncyBsb2NhdGlvbiBiYXIuIFRoaXMgaXMgdGhlIGRlZmF1bHQuXHJcbiAqXHJcbiAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93RXZlbnRIYW5kbGVycy9vbnBvcHN0YXRlXHJcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG4gKi9cclxudmFyIFBPUCA9ICdQT1AnO1xyXG5cclxuZXhwb3J0cy5QT1AgPSBQT1A7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcclxuICBQVVNIOiBQVVNILFxyXG4gIFJFUExBQ0U6IFJFUExBQ0UsXHJcbiAgUE9QOiBQT1BcclxufTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcbmV4cG9ydHMubG9vcEFzeW5jID0gbG9vcEFzeW5jO1xyXG5cclxuZnVuY3Rpb24gbG9vcEFzeW5jKHR1cm5zLCB3b3JrLCBjYWxsYmFjaykge1xyXG4gIHZhciBjdXJyZW50VHVybiA9IDA7XHJcbiAgdmFyIGlzRG9uZSA9IGZhbHNlO1xyXG5cclxuICBmdW5jdGlvbiBkb25lKCkge1xyXG4gICAgaXNEb25lID0gdHJ1ZTtcclxuICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgaWYgKGlzRG9uZSkgcmV0dXJuO1xyXG5cclxuICAgIGlmIChjdXJyZW50VHVybiA8IHR1cm5zKSB7XHJcbiAgICAgIHdvcmsuY2FsbCh0aGlzLCBjdXJyZW50VHVybisrLCBuZXh0LCBkb25lKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5leHQoKTtcclxufSIsIi8qZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuZXhwb3J0cy5zYXZlU3RhdGUgPSBzYXZlU3RhdGU7XHJcbmV4cG9ydHMucmVhZFN0YXRlID0gcmVhZFN0YXRlO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxyXG5cclxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xyXG5cclxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xyXG5cclxudmFyIEtleVByZWZpeCA9ICdAQEhpc3RvcnkvJztcclxudmFyIFF1b3RhRXhjZWVkZWRFcnJvciA9ICdRdW90YUV4Y2VlZGVkRXJyb3InO1xyXG52YXIgU2VjdXJpdHlFcnJvciA9ICdTZWN1cml0eUVycm9yJztcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUtleShrZXkpIHtcclxuICByZXR1cm4gS2V5UHJlZml4ICsga2V5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlU3RhdGUoa2V5LCBzdGF0ZSkge1xyXG4gIHRyeSB7XHJcbiAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShjcmVhdGVLZXkoa2V5KSwgSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgaWYgKGVycm9yLm5hbWUgPT09IFNlY3VyaXR5RXJyb3IpIHtcclxuICAgICAgLy8gQmxvY2tpbmcgY29va2llcyBpbiBDaHJvbWUvRmlyZWZveC9TYWZhcmkgdGhyb3dzIFNlY3VyaXR5RXJyb3Igb24gYW55XHJcbiAgICAgIC8vIGF0dGVtcHQgdG8gYWNjZXNzIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5cclxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnW2hpc3RvcnldIFVuYWJsZSB0byBzYXZlIHN0YXRlOyBzZXNzaW9uU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGR1ZSB0byBzZWN1cml0eSBzZXR0aW5ncycpIDogdW5kZWZpbmVkO1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvci5uYW1lID09PSBRdW90YUV4Y2VlZGVkRXJyb3IgJiYgd2luZG93LnNlc3Npb25TdG9yYWdlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvLyBTYWZhcmkgXCJwcml2YXRlIG1vZGVcIiB0aHJvd3MgUXVvdGFFeGNlZWRlZEVycm9yLlxyXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdbaGlzdG9yeV0gVW5hYmxlIHRvIHNhdmUgc3RhdGU7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgaW4gU2FmYXJpIHByaXZhdGUgbW9kZScpIDogdW5kZWZpbmVkO1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZFN0YXRlKGtleSkge1xyXG4gIHZhciBqc29uID0gdW5kZWZpbmVkO1xyXG4gIHRyeSB7XHJcbiAgICBqc29uID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oY3JlYXRlS2V5KGtleSkpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gU2VjdXJpdHlFcnJvcikge1xyXG4gICAgICAvLyBCbG9ja2luZyBjb29raWVzIGluIENocm9tZS9GaXJlZm94L1NhZmFyaSB0aHJvd3MgU2VjdXJpdHlFcnJvciBvbiBhbnlcclxuICAgICAgLy8gYXR0ZW1wdCB0byBhY2Nlc3Mgd2luZG93LnNlc3Npb25TdG9yYWdlLlxyXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdbaGlzdG9yeV0gVW5hYmxlIHRvIHJlYWQgc3RhdGU7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIHNlY3VyaXR5IHNldHRpbmdzJykgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChqc29uKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIElnbm9yZSBpbnZhbGlkIEpTT04uXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbDtcclxufSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcbmV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXI7XHJcbmV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHJlbW92ZUV2ZW50TGlzdGVuZXI7XHJcbmV4cG9ydHMuZ2V0SGFzaFBhdGggPSBnZXRIYXNoUGF0aDtcclxuZXhwb3J0cy5yZXBsYWNlSGFzaFBhdGggPSByZXBsYWNlSGFzaFBhdGg7XHJcbmV4cG9ydHMuZ2V0V2luZG93UGF0aCA9IGdldFdpbmRvd1BhdGg7XHJcbmV4cG9ydHMuZ28gPSBnbztcclxuZXhwb3J0cy5nZXRVc2VyQ29uZmlybWF0aW9uID0gZ2V0VXNlckNvbmZpcm1hdGlvbjtcclxuZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBzdXBwb3J0c0hpc3Rvcnk7XHJcbmV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaDtcclxuXHJcbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XHJcbiAgaWYgKG5vZGUuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcclxuICBpZiAobm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcbiAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcclxuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XHJcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcclxuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKVsxXSB8fCAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcclxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgJyMnICsgcGF0aCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdpbmRvd1BhdGgoKSB7XHJcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ28obikge1xyXG4gIGlmIChuKSB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xyXG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xyXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWNrdC9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcclxuICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICAvLyBGSVhNRTogV29yayBhcm91bmQgb3VyIGJyb3dzZXIgaGlzdG9yeSBub3Qgd29ya2luZyBjb3JyZWN0bHkgb24gQ2hyb21lXHJcbiAgLy8gaU9TOiBodHRwczovL2dpdGh1Yi5jb20vcmFja3QvcmVhY3Qtcm91dGVyL2lzc3Vlcy8yNTY1XHJcbiAgaWYgKHVhLmluZGV4T2YoJ0NyaU9TJykgIT09IC0xKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cclxuICovXHJcblxyXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcclxuICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gIHJldHVybiB1YS5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xyXG59IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XHJcbmV4cG9ydHMuY2FuVXNlRE9NID0gY2FuVXNlRE9NOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxyXG5cclxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcclxuXHJcbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XHJcblxyXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcclxuXHJcbnZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XHJcblxyXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xyXG5cclxudmFyIF9ET01TdGF0ZVN0b3JhZ2UgPSByZXF1aXJlKCcuL0RPTVN0YXRlU3RvcmFnZScpO1xyXG5cclxudmFyIF9jcmVhdGVET01IaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVET01IaXN0b3J5Jyk7XHJcblxyXG52YXIgX2NyZWF0ZURPTUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlRE9NSGlzdG9yeSk7XHJcblxyXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XHJcblxyXG52YXIgX3BhcnNlUGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJzZVBhdGgpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgSFRNTDUncyBoaXN0b3J5IEFQSVxyXG4gKiAocHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQpIHRvIG1hbmFnZSBoaXN0b3J5LlxyXG4gKiBUaGlzIGlzIHRoZSByZWNvbW1lbmRlZCBtZXRob2Qgb2YgbWFuYWdpbmcgaGlzdG9yeSBpbiBicm93c2VycyBiZWNhdXNlXHJcbiAqIGl0IHByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxyXG4gKlxyXG4gKiBOb3RlOiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBmdWxsXHJcbiAqIHBhZ2UgcmVsb2FkcyB3aWxsIGJlIHVzZWQgdG8gcHJlc2VydmUgVVJMcy5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xyXG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XHJcblxyXG4gICFfRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xyXG5cclxuICB2YXIgZm9yY2VSZWZyZXNoID0gb3B0aW9ucy5mb3JjZVJlZnJlc2g7XHJcblxyXG4gIHZhciBpc1N1cHBvcnRlZCA9IF9ET01VdGlscy5zdXBwb3J0c0hpc3RvcnkoKTtcclxuICB2YXIgdXNlUmVmcmVzaCA9ICFpc1N1cHBvcnRlZCB8fCBmb3JjZVJlZnJlc2g7XHJcblxyXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcclxuICAgIGhpc3RvcnlTdGF0ZSA9IGhpc3RvcnlTdGF0ZSB8fCB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcclxuXHJcbiAgICB2YXIgcGF0aCA9IF9ET01VdGlscy5nZXRXaW5kb3dQYXRoKCk7XHJcbiAgICB2YXIgX2hpc3RvcnlTdGF0ZSA9IGhpc3RvcnlTdGF0ZTtcclxuICAgIHZhciBrZXkgPSBfaGlzdG9yeVN0YXRlLmtleTtcclxuXHJcbiAgICB2YXIgc3RhdGUgPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAoa2V5KSB7XHJcbiAgICAgIHN0YXRlID0gX0RPTVN0YXRlU3RvcmFnZS5yZWFkU3RhdGUoa2V5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0YXRlID0gbnVsbDtcclxuICAgICAga2V5ID0gaGlzdG9yeS5jcmVhdGVLZXkoKTtcclxuXHJcbiAgICAgIGlmIChpc1N1cHBvcnRlZCkgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBoaXN0b3J5U3RhdGUsIHsga2V5OiBrZXkgfSksIG51bGwsIHBhdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBsb2NhdGlvbiA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10ocGF0aCk7XHJcblxyXG4gICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24oX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7IHN0YXRlOiBzdGF0ZSB9KSwgdW5kZWZpbmVkLCBrZXkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3RhcnRQb3BTdGF0ZUxpc3RlbmVyKF9yZWYpIHtcclxuICAgIHZhciB0cmFuc2l0aW9uVG8gPSBfcmVmLnRyYW5zaXRpb25UbztcclxuXHJcbiAgICBmdW5jdGlvbiBwb3BTdGF0ZUxpc3RlbmVyKGV2ZW50KSB7XHJcbiAgICAgIGlmIChldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47IC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXHJcblxyXG4gICAgICB0cmFuc2l0aW9uVG8oZ2V0Q3VycmVudExvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAncG9wc3RhdGUnLCBwb3BTdGF0ZUxpc3RlbmVyKTtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csICdwb3BzdGF0ZScsIHBvcFN0YXRlTGlzdGVuZXIpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZpbmlzaFRyYW5zaXRpb24obG9jYXRpb24pIHtcclxuICAgIHZhciBiYXNlbmFtZSA9IGxvY2F0aW9uLmJhc2VuYW1lO1xyXG4gICAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XHJcbiAgICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xyXG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xyXG4gICAgdmFyIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XHJcbiAgICB2YXIgYWN0aW9uID0gbG9jYXRpb24uYWN0aW9uO1xyXG4gICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleTtcclxuXHJcbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHJldHVybjsgLy8gTm90aGluZyB0byBkby5cclxuXHJcbiAgICBfRE9NU3RhdGVTdG9yYWdlLnNhdmVTdGF0ZShrZXksIHN0YXRlKTtcclxuXHJcbiAgICB2YXIgcGF0aCA9IChiYXNlbmFtZSB8fCAnJykgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XHJcbiAgICB2YXIgaGlzdG9yeVN0YXRlID0ge1xyXG4gICAgICBrZXk6IGtleVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XHJcbiAgICAgIGlmICh1c2VSZWZyZXNoKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwYXRoO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gUHJldmVudCBsb2NhdGlvbiB1cGRhdGUuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBudWxsLCBwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBSRVBMQUNFXHJcbiAgICAgIGlmICh1c2VSZWZyZXNoKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBQcmV2ZW50IGxvY2F0aW9uIHVwZGF0ZS5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIG51bGwsIHBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBoaXN0b3J5ID0gX2NyZWF0ZURPTUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcclxuICAgIGdldEN1cnJlbnRMb2NhdGlvbjogZ2V0Q3VycmVudExvY2F0aW9uLFxyXG4gICAgZmluaXNoVHJhbnNpdGlvbjogZmluaXNoVHJhbnNpdGlvbixcclxuICAgIHNhdmVTdGF0ZTogX0RPTVN0YXRlU3RvcmFnZS5zYXZlU3RhdGVcclxuICB9KSk7XHJcblxyXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMCxcclxuICAgICAgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSB1bmRlZmluZWQ7XHJcblxyXG4gIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShsaXN0ZW5lcikge1xyXG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSBzdGFydFBvcFN0YXRlTGlzdGVuZXIoaGlzdG9yeSk7XHJcblxyXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW5CZWZvcmUobGlzdGVuZXIpO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHVubGlzdGVuKCk7XHJcblxyXG4gICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wUG9wU3RhdGVMaXN0ZW5lcigpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xyXG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSBzdGFydFBvcFN0YXRlTGlzdGVuZXIoaGlzdG9yeSk7XHJcblxyXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4obGlzdGVuZXIpO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHVubGlzdGVuKCk7XHJcblxyXG4gICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wUG9wU3RhdGVMaXN0ZW5lcigpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIGRlcHJlY2F0ZWRcclxuICBmdW5jdGlvbiByZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcclxuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gc3RhcnRQb3BTdGF0ZUxpc3RlbmVyKGhpc3RvcnkpO1xyXG5cclxuICAgIGhpc3RvcnkucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKTtcclxuICB9XHJcblxyXG4gIC8vIGRlcHJlY2F0ZWRcclxuICBmdW5jdGlvbiB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xyXG4gICAgaGlzdG9yeS51bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vayk7XHJcblxyXG4gICAgaWYgKC0tbGlzdGVuZXJDb3VudCA9PT0gMCkgc3RvcFBvcFN0YXRlTGlzdGVuZXIoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgaGlzdG9yeSwge1xyXG4gICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXHJcbiAgICBsaXN0ZW46IGxpc3RlbixcclxuICAgIHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2ssXHJcbiAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9va1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVCcm93c2VySGlzdG9yeTtcclxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XHJcblxyXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xyXG5cclxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcclxuXHJcbnZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XHJcblxyXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xyXG5cclxudmFyIF9jcmVhdGVIaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVIaXN0b3J5Jyk7XHJcblxyXG52YXIgX2NyZWF0ZUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlSGlzdG9yeSk7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVET01IaXN0b3J5KG9wdGlvbnMpIHtcclxuICB2YXIgaGlzdG9yeSA9IF9jcmVhdGVIaXN0b3J5MlsnZGVmYXVsdCddKF9leHRlbmRzKHtcclxuICAgIGdldFVzZXJDb25maXJtYXRpb246IF9ET01VdGlscy5nZXRVc2VyQ29uZmlybWF0aW9uXHJcbiAgfSwgb3B0aW9ucywge1xyXG4gICAgZ286IF9ET01VdGlscy5nb1xyXG4gIH0pKTtcclxuXHJcbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XHJcbiAgICAhX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnRE9NIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xyXG5cclxuICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbihsaXN0ZW5lcik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcclxuICAgIGxpc3RlbjogbGlzdGVuXHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZURPTUhpc3Rvcnk7XHJcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8vaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZydcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XHJcblxyXG52YXIgX2RlZXBFcXVhbCA9IHJlcXVpcmUoJ2RlZXAtZXF1YWwnKTtcclxuXHJcbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XHJcblxyXG52YXIgX0FzeW5jVXRpbHMgPSByZXF1aXJlKCcuL0FzeW5jVXRpbHMnKTtcclxuXHJcbnZhciBfQWN0aW9ucyA9IHJlcXVpcmUoJy4vQWN0aW9ucycpO1xyXG5cclxudmFyIF9jcmVhdGVMb2NhdGlvbjIgPSByZXF1aXJlKCcuL2NyZWF0ZUxvY2F0aW9uJyk7XHJcblxyXG52YXIgX2NyZWF0ZUxvY2F0aW9uMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUxvY2F0aW9uMik7XHJcblxyXG52YXIgX3J1blRyYW5zaXRpb25Ib29rID0gcmVxdWlyZSgnLi9ydW5UcmFuc2l0aW9uSG9vaycpO1xyXG5cclxudmFyIF9ydW5UcmFuc2l0aW9uSG9vazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydW5UcmFuc2l0aW9uSG9vayk7XHJcblxyXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XHJcblxyXG52YXIgX3BhcnNlUGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJzZVBhdGgpO1xyXG5cclxudmFyIF9kZXByZWNhdGUgPSByZXF1aXJlKCcuL2RlcHJlY2F0ZScpO1xyXG5cclxudmFyIF9kZXByZWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlKTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVJhbmRvbUtleShsZW5ndGgpIHtcclxuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGxlbmd0aCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcclxuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiZcclxuICAvL2EuYWN0aW9uID09PSBiLmFjdGlvbiAmJiAvLyBEaWZmZXJlbnQgYWN0aW9uICE9PSBsb2NhdGlvbiBjaGFuZ2UuXHJcbiAgYS5rZXkgPT09IGIua2V5ICYmIF9kZWVwRXF1YWwyWydkZWZhdWx0J10oYS5zdGF0ZSwgYi5zdGF0ZSk7XHJcbn1cclxuXHJcbnZhciBEZWZhdWx0S2V5TGVuZ3RoID0gNjtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUhpc3RvcnkoKSB7XHJcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcclxuICB2YXIgZ2V0Q3VycmVudExvY2F0aW9uID0gb3B0aW9ucy5nZXRDdXJyZW50TG9jYXRpb247XHJcbiAgdmFyIGZpbmlzaFRyYW5zaXRpb24gPSBvcHRpb25zLmZpbmlzaFRyYW5zaXRpb247XHJcbiAgdmFyIHNhdmVTdGF0ZSA9IG9wdGlvbnMuc2F2ZVN0YXRlO1xyXG4gIHZhciBnbyA9IG9wdGlvbnMuZ287XHJcbiAgdmFyIGtleUxlbmd0aCA9IG9wdGlvbnMua2V5TGVuZ3RoO1xyXG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gb3B0aW9ucy5nZXRVc2VyQ29uZmlybWF0aW9uO1xyXG5cclxuICBpZiAodHlwZW9mIGtleUxlbmd0aCAhPT0gJ251bWJlcicpIGtleUxlbmd0aCA9IERlZmF1bHRLZXlMZW5ndGg7XHJcblxyXG4gIHZhciB0cmFuc2l0aW9uSG9va3MgPSBbXTtcclxuXHJcbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcclxuICAgIHRyYW5zaXRpb25Ib29rcy5wdXNoKGhvb2spO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRyYW5zaXRpb25Ib29rcyA9IHRyYW5zaXRpb25Ib29rcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gaXRlbSAhPT0gaG9vaztcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGFsbEtleXMgPSBbXTtcclxuICB2YXIgY2hhbmdlTGlzdGVuZXJzID0gW107XHJcbiAgdmFyIGxvY2F0aW9uID0gdW5kZWZpbmVkO1xyXG5cclxuICBmdW5jdGlvbiBnZXRDdXJyZW50KCkge1xyXG4gICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAmJiBwZW5kaW5nTG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcclxuICAgICAgcmV0dXJuIGFsbEtleXMuaW5kZXhPZihwZW5kaW5nTG9jYXRpb24ua2V5KTtcclxuICAgIH0gZWxzZSBpZiAobG9jYXRpb24pIHtcclxuICAgICAgcmV0dXJuIGFsbEtleXMuaW5kZXhPZihsb2NhdGlvbi5rZXkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obmV3TG9jYXRpb24pIHtcclxuICAgIHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudCgpO1xyXG5cclxuICAgIGxvY2F0aW9uID0gbmV3TG9jYXRpb247XHJcblxyXG4gICAgaWYgKGxvY2F0aW9uLmFjdGlvbiA9PT0gX0FjdGlvbnMuUFVTSCkge1xyXG4gICAgICBhbGxLZXlzID0gW10uY29uY2F0KGFsbEtleXMuc2xpY2UoMCwgY3VycmVudCArIDEpLCBbbG9jYXRpb24ua2V5XSk7XHJcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLmFjdGlvbiA9PT0gX0FjdGlvbnMuUkVQTEFDRSkge1xyXG4gICAgICBhbGxLZXlzW2N1cnJlbnRdID0gbG9jYXRpb24ua2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xyXG4gICAgICBsaXN0ZW5lcihsb2NhdGlvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xyXG4gICAgY2hhbmdlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG5cclxuICAgIGlmIChsb2NhdGlvbikge1xyXG4gICAgICBsaXN0ZW5lcihsb2NhdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgX2xvY2F0aW9uID0gZ2V0Q3VycmVudExvY2F0aW9uKCk7XHJcbiAgICAgIGFsbEtleXMgPSBbX2xvY2F0aW9uLmtleV07XHJcbiAgICAgIHVwZGF0ZUxvY2F0aW9uKF9sb2NhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY2hhbmdlTGlzdGVuZXJzID0gY2hhbmdlTGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgY2FsbGJhY2spIHtcclxuICAgIF9Bc3luY1V0aWxzLmxvb3BBc3luYyh0cmFuc2l0aW9uSG9va3MubGVuZ3RoLCBmdW5jdGlvbiAoaW5kZXgsIG5leHQsIGRvbmUpIHtcclxuICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKHRyYW5zaXRpb25Ib29rc1tpbmRleF0sIGxvY2F0aW9uLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICBkb25lKHJlc3VsdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgaWYgKGdldFVzZXJDb25maXJtYXRpb24gJiYgdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBmdW5jdGlvbiAob2spIHtcclxuICAgICAgICAgIGNhbGxiYWNrKG9rICE9PSBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2FsbGJhY2sobWVzc2FnZSAhPT0gZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhciBwZW5kaW5nTG9jYXRpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25UbyhuZXh0TG9jYXRpb24pIHtcclxuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbnNBcmVFcXVhbChsb2NhdGlvbiwgbmV4dExvY2F0aW9uKSkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxyXG5cclxuICAgIHBlbmRpbmdMb2NhdGlvbiA9IG5leHRMb2NhdGlvbjtcclxuXHJcbiAgICBjb25maXJtVHJhbnNpdGlvblRvKG5leHRMb2NhdGlvbiwgZnVuY3Rpb24gKG9rKSB7XHJcbiAgICAgIGlmIChwZW5kaW5nTG9jYXRpb24gIT09IG5leHRMb2NhdGlvbikgcmV0dXJuOyAvLyBUcmFuc2l0aW9uIHdhcyBpbnRlcnJ1cHRlZC5cclxuXHJcbiAgICAgIGlmIChvaykge1xyXG4gICAgICAgIC8vIHRyZWF0IFBVU0ggdG8gY3VycmVudCBwYXRoIGxpa2UgUkVQTEFDRSB0byBiZSBjb25zaXN0ZW50IHdpdGggYnJvd3NlcnNcclxuICAgICAgICBpZiAobmV4dExvY2F0aW9uLmFjdGlvbiA9PT0gX0FjdGlvbnMuUFVTSCkge1xyXG4gICAgICAgICAgdmFyIHByZXZQYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XHJcbiAgICAgICAgICB2YXIgbmV4dFBhdGggPSBjcmVhdGVQYXRoKG5leHRMb2NhdGlvbik7XHJcblxyXG4gICAgICAgICAgaWYgKG5leHRQYXRoID09PSBwcmV2UGF0aCkgbmV4dExvY2F0aW9uLmFjdGlvbiA9IF9BY3Rpb25zLlJFUExBQ0U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmluaXNoVHJhbnNpdGlvbihuZXh0TG9jYXRpb24pICE9PSBmYWxzZSkgdXBkYXRlTG9jYXRpb24obmV4dExvY2F0aW9uKTtcclxuICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiAmJiBuZXh0TG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcclxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGxvY2F0aW9uLmtleSk7XHJcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IGFsbEtleXMuaW5kZXhPZihuZXh0TG9jYXRpb24ua2V5KTtcclxuXHJcbiAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEgJiYgbmV4dEluZGV4ICE9PSAtMSkgZ28ocHJldkluZGV4IC0gbmV4dEluZGV4KTsgLy8gUmVzdG9yZSB0aGUgVVJMLlxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHB1c2gobG9jYXRpb24pIHtcclxuICAgIHRyYW5zaXRpb25UbyhjcmVhdGVMb2NhdGlvbihsb2NhdGlvbiwgX0FjdGlvbnMuUFVTSCwgY3JlYXRlS2V5KCkpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24pIHtcclxuICAgIHRyYW5zaXRpb25UbyhjcmVhdGVMb2NhdGlvbihsb2NhdGlvbiwgX0FjdGlvbnMuUkVQTEFDRSwgY3JlYXRlS2V5KCkpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcclxuICAgIGdvKC0xKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcclxuICAgIGdvKDEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJhbmRvbUtleShrZXlMZW5ndGgpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xyXG4gICAgaWYgKGxvY2F0aW9uID09IG51bGwgfHwgdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgcmV0dXJuIGxvY2F0aW9uO1xyXG5cclxuICAgIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xyXG4gICAgdmFyIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcclxuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcclxuXHJcbiAgICB2YXIgcmVzdWx0ID0gcGF0aG5hbWU7XHJcblxyXG4gICAgaWYgKHNlYXJjaCkgcmVzdWx0ICs9IHNlYXJjaDtcclxuXHJcbiAgICBpZiAoaGFzaCkgcmVzdWx0ICs9IGhhc2g7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcclxuICAgIHJldHVybiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uLCBhY3Rpb24pIHtcclxuICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBjcmVhdGVLZXkoKSA6IGFyZ3VtZW50c1syXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgLy93YXJuaW5nKFxyXG4gICAgICAvLyAgZmFsc2UsXHJcbiAgICAgIC8vICAnVGhlIHN0YXRlICgybmQpIGFyZ3VtZW50IHRvIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24gaXMgZGVwcmVjYXRlZDsgdXNlIGEgJyArXHJcbiAgICAgIC8vICAnbG9jYXRpb24gZGVzY3JpcHRvciBpbnN0ZWFkJ1xyXG4gICAgICAvLylcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSBsb2NhdGlvbiA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10obG9jYXRpb24pO1xyXG5cclxuICAgICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHsgc3RhdGU6IGFjdGlvbiB9KTtcclxuXHJcbiAgICAgIGFjdGlvbiA9IGtleTtcclxuICAgICAga2V5ID0gYXJndW1lbnRzWzNdIHx8IGNyZWF0ZUtleSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBfY3JlYXRlTG9jYXRpb24zWydkZWZhdWx0J10obG9jYXRpb24sIGFjdGlvbiwga2V5KTtcclxuICB9XHJcblxyXG4gIC8vIGRlcHJlY2F0ZWRcclxuICBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSkge1xyXG4gICAgaWYgKGxvY2F0aW9uKSB7XHJcbiAgICAgIHVwZGF0ZUxvY2F0aW9uU3RhdGUobG9jYXRpb24sIHN0YXRlKTtcclxuICAgICAgdXBkYXRlTG9jYXRpb24obG9jYXRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdXBkYXRlTG9jYXRpb25TdGF0ZShnZXRDdXJyZW50TG9jYXRpb24oKSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb25TdGF0ZShsb2NhdGlvbiwgc3RhdGUpIHtcclxuICAgIGxvY2F0aW9uLnN0YXRlID0gX2V4dGVuZHMoe30sIGxvY2F0aW9uLnN0YXRlLCBzdGF0ZSk7XHJcbiAgICBzYXZlU3RhdGUobG9jYXRpb24ua2V5LCBsb2NhdGlvbi5zdGF0ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBkZXByZWNhdGVkXHJcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XHJcbiAgICBpZiAodHJhbnNpdGlvbkhvb2tzLmluZGV4T2YoaG9vaykgPT09IC0xKSB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcclxuICB9XHJcblxyXG4gIC8vIGRlcHJlY2F0ZWRcclxuICBmdW5jdGlvbiB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xyXG4gICAgdHJhbnNpdGlvbkhvb2tzID0gdHJhbnNpdGlvbkhvb2tzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICByZXR1cm4gaXRlbSAhPT0gaG9vaztcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gZGVwcmVjYXRlZFxyXG4gIGZ1bmN0aW9uIHB1c2hTdGF0ZShzdGF0ZSwgcGF0aCkge1xyXG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10ocGF0aCk7XHJcblxyXG4gICAgcHVzaChfZXh0ZW5kcyh7IHN0YXRlOiBzdGF0ZSB9LCBwYXRoKSk7XHJcbiAgfVxyXG5cclxuICAvLyBkZXByZWNhdGVkXHJcbiAgZnVuY3Rpb24gcmVwbGFjZVN0YXRlKHN0YXRlLCBwYXRoKSB7XHJcbiAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX3BhcnNlUGF0aDJbJ2RlZmF1bHQnXShwYXRoKTtcclxuXHJcbiAgICByZXBsYWNlKF9leHRlbmRzKHsgc3RhdGU6IHN0YXRlIH0sIHBhdGgpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBsaXN0ZW5CZWZvcmU6IGxpc3RlbkJlZm9yZSxcclxuICAgIGxpc3RlbjogbGlzdGVuLFxyXG4gICAgdHJhbnNpdGlvblRvOiB0cmFuc2l0aW9uVG8sXHJcbiAgICBwdXNoOiBwdXNoLFxyXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcclxuICAgIGdvOiBnbyxcclxuICAgIGdvQmFjazogZ29CYWNrLFxyXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXHJcbiAgICBjcmVhdGVLZXk6IGNyZWF0ZUtleSxcclxuICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXHJcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxyXG4gICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uLFxyXG5cclxuICAgIHNldFN0YXRlOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHNldFN0YXRlLCAnc2V0U3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIGxvY2F0aW9uLmtleSB0byBzYXZlIHN0YXRlIGluc3RlYWQnKSxcclxuICAgIHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgJ3JlZ2lzdGVyVHJhbnNpdGlvbkhvb2sgaXMgZGVwcmVjYXRlZDsgdXNlIGxpc3RlbkJlZm9yZSBpbnN0ZWFkJyksXHJcbiAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10odW5yZWdpc3RlclRyYW5zaXRpb25Ib29rLCAndW5yZWdpc3RlclRyYW5zaXRpb25Ib29rIGlzIGRlcHJlY2F0ZWQ7IHVzZSB0aGUgY2FsbGJhY2sgcmV0dXJuZWQgZnJvbSBsaXN0ZW5CZWZvcmUgaW5zdGVhZCcpLFxyXG4gICAgcHVzaFN0YXRlOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHB1c2hTdGF0ZSwgJ3B1c2hTdGF0ZSBpcyBkZXByZWNhdGVkOyB1c2UgcHVzaCBpbnN0ZWFkJyksXHJcbiAgICByZXBsYWNlU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVwbGFjZVN0YXRlLCAncmVwbGFjZVN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSByZXBsYWNlIGluc3RlYWQnKVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZUhpc3Rvcnk7XHJcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8vaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZydcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XHJcblxyXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcclxuXHJcbnZhciBfcGFyc2VQYXRoID0gcmVxdWlyZSgnLi9wYXJzZVBhdGgnKTtcclxuXHJcbnZhciBfcGFyc2VQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlUGF0aCk7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbigpIHtcclxuICB2YXIgbG9jYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAnLycgOiBhcmd1bWVudHNbMF07XHJcbiAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IF9BY3Rpb25zLlBPUCA6IGFyZ3VtZW50c1sxXTtcclxuICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyIHx8IGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFyZ3VtZW50c1syXTtcclxuXHJcbiAgdmFyIF9mb3VydGhBcmcgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJndW1lbnRzWzNdO1xyXG5cclxuICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBfcGFyc2VQYXRoMlsnZGVmYXVsdCddKGxvY2F0aW9uKTtcclxuXHJcbiAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAvL3dhcm5pbmcoXHJcbiAgICAvLyAgZmFsc2UsXHJcbiAgICAvLyAgJ1RoZSBzdGF0ZSAoMm5kKSBhcmd1bWVudCB0byBjcmVhdGVMb2NhdGlvbiBpcyBkZXByZWNhdGVkOyB1c2UgYSAnICtcclxuICAgIC8vICAnbG9jYXRpb24gZGVzY3JpcHRvciBpbnN0ZWFkJ1xyXG4gICAgLy8pXHJcblxyXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHsgc3RhdGU6IGFjdGlvbiB9KTtcclxuXHJcbiAgICBhY3Rpb24gPSBrZXkgfHwgX0FjdGlvbnMuUE9QO1xyXG4gICAga2V5ID0gX2ZvdXJ0aEFyZztcclxuICB9XHJcblxyXG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8ICcvJztcclxuICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoIHx8ICcnO1xyXG4gIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaCB8fCAnJztcclxuICB2YXIgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSB8fCBudWxsO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxyXG4gICAgc2VhcmNoOiBzZWFyY2gsXHJcbiAgICBoYXNoOiBoYXNoLFxyXG4gICAgc3RhdGU6IHN0YXRlLFxyXG4gICAgYWN0aW9uOiBhY3Rpb24sXHJcbiAgICBrZXk6IGtleVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZUxvY2F0aW9uO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvL2ltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcbmZ1bmN0aW9uIGRlcHJlY2F0ZShmbikge1xyXG4gIHJldHVybiBmbjtcclxuICAvL3JldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgLy8gIHdhcm5pbmcoZmFsc2UsICdbaGlzdG9yeV0gJyArIG1lc3NhZ2UpXHJcbiAgLy8gIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXHJcbiAgLy99XHJcbn1cclxuXHJcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZGVwcmVjYXRlO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuZnVuY3Rpb24gZXh0cmFjdFBhdGgoc3RyaW5nKSB7XHJcbiAgdmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKC9eaHR0cHM/OlxcL1xcL1teXFwvXSovKTtcclxuXHJcbiAgaWYgKG1hdGNoID09IG51bGwpIHJldHVybiBzdHJpbmc7XHJcblxyXG4gIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XHJcbn1cclxuXHJcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXh0cmFjdFBhdGg7XHJcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cclxuXHJcbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcclxuXHJcbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcclxuXHJcbnZhciBfZXh0cmFjdFBhdGggPSByZXF1aXJlKCcuL2V4dHJhY3RQYXRoJyk7XHJcblxyXG52YXIgX2V4dHJhY3RQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dHJhY3RQYXRoKTtcclxuXHJcbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XHJcbiAgdmFyIHBhdGhuYW1lID0gX2V4dHJhY3RQYXRoMlsnZGVmYXVsdCddKHBhdGgpO1xyXG4gIHZhciBzZWFyY2ggPSAnJztcclxuICB2YXIgaGFzaCA9ICcnO1xyXG5cclxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10ocGF0aCA9PT0gcGF0aG5hbWUsICdBIHBhdGggbXVzdCBiZSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggb25seSwgbm90IGEgZnVsbHkgcXVhbGlmaWVkIFVSTCBsaWtlIFwiJXNcIicsIHBhdGgpIDogdW5kZWZpbmVkO1xyXG5cclxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xyXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XHJcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyaW5nKGhhc2hJbmRleCk7XHJcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cmluZygwLCBoYXNoSW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xyXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcclxuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cmluZyhzZWFyY2hJbmRleCk7XHJcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cmluZygwLCBzZWFyY2hJbmRleCk7XHJcbiAgfVxyXG5cclxuICBpZiAocGF0aG5hbWUgPT09ICcnKSBwYXRobmFtZSA9ICcvJztcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcclxuICAgIHNlYXJjaDogc2VhcmNoLFxyXG4gICAgaGFzaDogaGFzaFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHBhcnNlUGF0aDtcclxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cclxuXHJcbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcclxuXHJcbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcclxuXHJcbmZ1bmN0aW9uIHJ1blRyYW5zaXRpb25Ib29rKGhvb2ssIGxvY2F0aW9uLCBjYWxsYmFjaykge1xyXG4gIHZhciByZXN1bHQgPSBob29rKGxvY2F0aW9uLCBjYWxsYmFjayk7XHJcblxyXG4gIGlmIChob29rLmxlbmd0aCA8IDIpIHtcclxuICAgIC8vIEFzc3VtZSB0aGUgaG9vayBydW5zIHN5bmNocm9ub3VzbHkgYW5kIGF1dG9tYXRpY2FsbHlcclxuICAgIC8vIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHJldHVybiB2YWx1ZS5cclxuICAgIGNhbGxiYWNrKHJlc3VsdCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShyZXN1bHQgPT09IHVuZGVmaW5lZCwgJ1lvdSBzaG91bGQgbm90IFwicmV0dXJuXCIgaW4gYSB0cmFuc2l0aW9uIGhvb2sgd2l0aCBhIGNhbGxiYWNrIGFyZ3VtZW50OyBjYWxsIHRoZSBjYWxsYmFjayBpbnN0ZWFkJykgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnRzWydkZWZhdWx0J10gPSBydW5UcmFuc2l0aW9uSG9vaztcclxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyoqXHJcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cclxuICpcclxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcclxuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXHJcbiAqIGV4cGVjdGluZy5cclxuICpcclxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcclxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxyXG4gKi9cclxuXHJcbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xyXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKCFjb25kaXRpb24pIHtcclxuICAgIHZhciBlcnJvcjtcclxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcclxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXHJcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XHJcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XHJcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxyXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXHJcbiAgICAgICk7XHJcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XHJcbiAgICB9XHJcblxyXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gaXNQcm9taXNlO1xyXG5cclxuZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xyXG4gIHJldHVybiAhIW9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nO1xyXG59XHJcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XHJcblxyXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcclxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXHJcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcclxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cclxuXHJcbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xyXG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xyXG5cclxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xyXG59XHJcbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcclxufVxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcclxuICAgIH1cclxufSAoKSlcclxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcclxuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XHJcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXHJcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcclxuICAgIH1cclxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXHJcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcclxuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcclxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcclxuICAgIH0gY2F0Y2goZSl7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcclxuICAgICAgICB9IGNhdGNoKGUpe1xyXG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xyXG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XHJcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXHJcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxyXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XHJcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xyXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xyXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcclxuICAgIH0gY2F0Y2ggKGUpe1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XHJcbiAgICAgICAgfSBjYXRjaCAoZSl7XHJcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxyXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxufVxyXG52YXIgcXVldWUgPSBbXTtcclxudmFyIGRyYWluaW5nID0gZmFsc2U7XHJcbnZhciBjdXJyZW50UXVldWU7XHJcbnZhciBxdWV1ZUluZGV4ID0gLTE7XHJcblxyXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XHJcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xyXG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XHJcbiAgICB9XHJcbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XHJcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xyXG4gICAgaWYgKGRyYWluaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XHJcbiAgICBkcmFpbmluZyA9IHRydWU7XHJcblxyXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcclxuICAgIHdoaWxlKGxlbikge1xyXG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xyXG4gICAgICAgIHF1ZXVlID0gW107XHJcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xyXG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XHJcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xyXG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG59XHJcblxyXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xyXG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcclxuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XHJcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcclxuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XHJcbiAgICB0aGlzLmZ1biA9IGZ1bjtcclxuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcclxufVxyXG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcclxufTtcclxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcclxucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcclxucHJvY2Vzcy5lbnYgPSB7fTtcclxucHJvY2Vzcy5hcmd2ID0gW107XHJcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xyXG5wcm9jZXNzLnZlcnNpb25zID0ge307XHJcblxyXG5mdW5jdGlvbiBub29wKCkge31cclxuXHJcbnByb2Nlc3Mub24gPSBub29wO1xyXG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcclxucHJvY2Vzcy5vbmNlID0gbm9vcDtcclxucHJvY2Vzcy5vZmYgPSBub29wO1xyXG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcclxucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xyXG5wcm9jZXNzLmVtaXQgPSBub29wO1xyXG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XHJcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XHJcblxyXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XHJcblxyXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xyXG59O1xyXG5cclxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcclxucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XHJcbn07XHJcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuZnVuY3Rpb24gdHJhbnNtaXR0ZXIoKSB7XHJcbiAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTtcclxuICB2YXIgbm93RGlzcGF0Y2hpbmcgPSBmYWxzZTtcclxuICB2YXIgdG9VbnN1YnNjcmliZSA9IHt9O1xyXG5cclxuICB2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShvbkNoYW5nZSkge1xyXG4gICAgdmFyIGlkID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKG9uQ2hhbmdlKTtcclxuICAgIGlmIChpZCA8IDApIHJldHVybjtcclxuICAgIGlmIChub3dEaXNwYXRjaGluZykge1xyXG4gICAgICB0b1Vuc3Vic2NyaWJlW2lkXSA9IG9uQ2hhbmdlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBzdWJzY3JpcHRpb25zLnNwbGljZShpZCwgMSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShvbkNoYW5nZSkge1xyXG4gICAgdmFyIGlkID0gc3Vic2NyaXB0aW9ucy5wdXNoKG9uQ2hhbmdlKTtcclxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcclxuICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlKG9uQ2hhbmdlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4geyBkaXNwb3NlOiBkaXNwb3NlIH07XHJcbiAgfTtcclxuXHJcbiAgdmFyIHB1Ymxpc2ggPSBmdW5jdGlvbiBwdWJsaXNoKCkge1xyXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgIH1cclxuXHJcbiAgICBub3dEaXNwYXRjaGluZyA9IHRydWU7XHJcbiAgICB0cnkge1xyXG4gICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbiwgaWQpIHtcclxuICAgICAgICByZXR1cm4gdG9VbnN1YnNjcmliZVtpZF0gfHwgc3Vic2NyaXB0aW9uLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgbm93RGlzcGF0Y2hpbmcgPSBmYWxzZTtcclxuICAgICAgT2JqZWN0LmtleXModG9VbnN1YnNjcmliZSkuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmUodG9VbnN1YnNjcmliZVtpZF0pO1xyXG4gICAgICB9KTtcclxuICAgICAgdG9VbnN1YnNjcmliZSA9IHt9O1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwdWJsaXNoOiBwdWJsaXNoLFxyXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXHJcbiAgICAkc3Vic2NyaXB0aW9uczogc3Vic2NyaXB0aW9uc1xyXG4gIH07XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gdHJhbnNtaXR0ZXI7IiwiLyoqXHJcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cclxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxyXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxyXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cclxuICovXHJcblxyXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xyXG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XHJcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XHJcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcclxuICAgIH1cclxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xyXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcclxuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjb25kaXRpb24pIHtcclxuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcclxuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXHJcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXHJcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICB9IGNhdGNoKHgpIHt9XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xyXG4iLCJpbXBvcnQgYWx0IGZyb20gJy4uL2FsdCdcclxuXHJcbmNsYXNzIEZvb3RlckFjdGlvbnMge1xyXG4gIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIHRoaXMuZ2VuZXJhdGVBY3Rpb25zKFxyXG4gICAgICAnZ2V0Rml2ZVJlY2VudE1vdmllc1N1Y2Nlc3MnXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBnZXRGaXZlUmVjZW50TW92aWVzICgpIHtcclxuICAgIGxldCByZXF1ZXN0ID0ge1xyXG4gICAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgICB1cmw6ICcvYXBpL21vdmllcy9maXZlLXJlY2VudCdcclxuICAgIH1cclxuICAgICQuYWpheChyZXF1ZXN0KVxyXG4gICAgICAuZG9uZShkYXRhID0+IHRoaXMuZ2V0Rml2ZVJlY2VudE1vdmllc1N1Y2Nlc3MoZGF0YSkpXHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFsdC5jcmVhdGVBY3Rpb25zKEZvb3RlckFjdGlvbnMpXHJcbiIsImltcG9ydCBhbHQgZnJvbSAnLi4vYWx0J1xyXG5pbXBvcnQgVE1EQiBmcm9tICcuLi91dGlsaXRpZXMvUmVxdWVzdGVyVE1EQidcclxuXHJcbmNsYXNzIEhvbWVBY3Rpb25zIHtcclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICB0aGlzLmdlbmVyYXRlQWN0aW9ucyhcclxuICAgICAgJ2dldFRvcFRlbk1vdmllc1N1Y2Nlc3MnLFxyXG4gICAgICAnZ2V0VG9wVGVuTW92aWVzRmFpbCdcclxuICAgIClcclxuICB9XHJcblxyXG4gIGdldFRvcFRlbk1vdmllcyAoKSB7XHJcbiAgICBsZXQgcmVxdWVzdCA9IHtcclxuICAgICAgdXJsOiAnL2FwaS9tb3ZpZXMvdG9wLXRlbicsXHJcbiAgICAgIG1ldGhvZDogJ2dldCdcclxuICAgIH1cclxuICAgICQuYWpheChyZXF1ZXN0KVxyXG4gICAgICAuZG9uZShwYXlsb2FkID0+IHtcclxuICAgICAgICBsZXQgdG1kYlByb21pc2VzID0gW11cclxuICAgICAgICBmb3IgKGxldCBtb3ZpZSBvZiBwYXlsb2FkKSB7XHJcbiAgICAgICAgICB0bWRiUHJvbWlzZXMucHVzaChUTURCLmdldE1vdmllUG9zdGVyKG1vdmllLm5hbWUpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUHJvbWlzZS5hbGwodG1kYlByb21pc2VzKS50aGVuKChwcm9taXNlcykgPT4ge1xyXG4gICAgICAgICAgbGV0IG1vdmllcyA9IFtdXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBheWxvYWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG1vdmllRGF0YSA9IHtcclxuICAgICAgICAgICAgICBfaWQ6IHBheWxvYWRbaV0uX2lkLFxyXG4gICAgICAgICAgICAgIG5hbWU6IHBheWxvYWRbaV0ubmFtZSxcclxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcGF5bG9hZFtpXS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICBnZW5yZXM6IHBheWxvYWRbaV0uZ2VucmVzLFxyXG4gICAgICAgICAgICAgIG1vdmllUG9zdGVyVXJsOiBwcm9taXNlc1tpXS5wb3N0ZXJVcmxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtb3ZpZXMucHVzaChtb3ZpZURhdGEpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmdldFRvcFRlbk1vdmllc1N1Y2Nlc3MobW92aWVzKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICAgIC5mYWlsKGVyciA9PiB0aGlzLmdldFRvcFRlbk1vdmllc0ZhaWwoZXJyKSlcclxuXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWx0LmNyZWF0ZUFjdGlvbnMoSG9tZUFjdGlvbnMpXHJcbiIsImltcG9ydCBhbHQgZnJvbSAnLi4vYWx0J1xyXG5cclxuY2xhc3MgTW92aWVBZGRBY3Rpb25zIHtcclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICB0aGlzLmdlbmVyYXRlQWN0aW9ucyhcclxuICAgICAgJ2hhbmRsZU5hbWVDaGFuZ2UnLFxyXG4gICAgICAnaGFuZGxlRGVzY3JpcHRpb25DaGFuZ2UnLFxyXG4gICAgICAnaGFuZGxlR2VucmVzQ2hhbmdlJyxcclxuICAgICAgJ25hbWVWYWxpZGF0aW9uRmFpbCcsXHJcbiAgICAgICdnZW5yZXNWYWxpZGF0aW9uRmFpbCcsXHJcbiAgICAgICdhZGRNb3ZpZVN1Y2Nlc3MnLFxyXG4gICAgICAnYWRkTW92aWVGYWlsJ1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgYWRkTW92aWUgKGRhdGEpIHtcclxuICAgIGxldCByZXF1ZXN0ID0ge1xyXG4gICAgICB1cmw6ICcvYXBpL21vdmllcy9hZGQnLFxyXG4gICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgIH1cclxuICAgICQuYWpheChyZXF1ZXN0KVxyXG4gICAgICAuZG9uZSgoKSA9PiB0aGlzLmFkZE1vdmllU3VjY2VzcygpKVxyXG4gICAgICAuZmFpbCgoZXJyKSA9PiB0aGlzLmFkZE1vdmllRmFpbChlcnIpKVxyXG5cclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhbHQuY3JlYXRlQWN0aW9ucyhNb3ZpZUFkZEFjdGlvbnMpXHJcbiIsImltcG9ydCBhbHQgZnJvbSAnLi4vYWx0J1xyXG5cclxuY2xhc3MgTmF2YmFyQWN0aW9ucyB7XHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5nZW5lcmF0ZUFjdGlvbnMoXHJcbiAgICAgICd1cGRhdGVBamF4QW5pbWF0aW9uJ1xyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWx0LmNyZWF0ZUFjdGlvbnMoTmF2YmFyQWN0aW9ucylcclxuIiwiaW1wb3J0IGFsdCBmcm9tICcuLi9hbHQnXHJcblxyXG5jbGFzcyBVc2VyQWN0aW9ucyB7XHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5nZW5lcmF0ZUFjdGlvbnMoXHJcbiAgICAgICdsb2dpblVzZXJTdWNjZXNzJyxcclxuICAgICAgJ2xvZ2luVXNlckZhaWwnLFxyXG4gICAgICAnbG9nb3V0VXNlclN1Y2Nlc3MnXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBsb2dpblVzZXIgKCkge1xyXG4gICAgbGV0IHJlcXVlc3QgPSB7XHJcbiAgICAgIHVybDogJy91c2VyL2xvZ2luJyxcclxuICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgdXNlcm5hbWU6ICdhZG1pbicsIHBhc3N3b3JkOiAnYWRtaW4nIH0pLFxyXG4gICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICB9XHJcbiAgICAkLmFqYXgocmVxdWVzdClcclxuICAgICAgLmRvbmUoZGF0YSA9PiB0aGlzLmxvZ2luVXNlclN1Y2Nlc3MoZGF0YSkpXHJcbiAgICAgIC5mYWlsKGVyciA9PiB0aGlzLmxvZ2luVXNlckZhaWwoZXJyKSlcclxuXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgbG9nb3V0VXNlciAoKSB7XHJcbiAgICBsZXQgcmVxdWVzdCA9IHtcclxuICAgICAgdXJsOiAnL3VzZXIvbG9nb3V0JyxcclxuICAgICAgbWV0aG9kOiAncG9zdCdcclxuICAgIH1cclxuICAgICQuYWpheChyZXF1ZXN0KVxyXG4gICAgICAuZG9uZSgoKSA9PiB0aGlzLmxvZ291dFVzZXJTdWNjZXNzKCkpXHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFsdC5jcmVhdGVBY3Rpb25zKFVzZXJBY3Rpb25zKVxyXG4iLCJpbXBvcnQgQWx0IGZyb20gJ2FsdCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBBbHQoKVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgTmF2YmFyIGZyb20gJy4vTmF2YmFyJ1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vRm9vdGVyJ1xyXG5cclxuaW1wb3J0IFVzZXJTdG9yZSBmcm9tICcuLi9zdG9yZXMvVXNlclN0b3JlJ1xyXG5pbXBvcnQgVXNlckFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucy9Vc2VyQWN0aW9ucydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuXHJcbiAgICB0aGlzLnN0YXRlID0gVXNlclN0b3JlLmdldFN0YXRlKClcclxuXHJcbiAgICB0aGlzLm9uQ2hhbmdlID0gdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSAoc3RhdGUpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICBVc2VyU3RvcmUubGlzdGVuKHRoaXMub25DaGFuZ2UpXHJcbiAgICBVc2VyQWN0aW9ucy5sb2dpblVzZXIoKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG4gICAgVXNlclN0b3JlLnVubGlzdGVuKHRoaXMub25DaGFuZ2UpXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8TmF2YmFyIC8+XHJcbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgPEZvb3RlciAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInXHJcblxyXG5pbXBvcnQgRm9vdGVyU3RvcmUgZnJvbSAnLi4vc3RvcmVzL0Zvb3RlclN0b3JlJ1xyXG5pbXBvcnQgRm9vdGVyQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL0Zvb3RlckFjdGlvbnMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb290ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IEZvb3RlclN0b3JlLmdldFN0YXRlKClcclxuXHJcbiAgICB0aGlzLm9uQ2hhbmdlID0gdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSAoc3RhdGUpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICBGb290ZXJTdG9yZS5saXN0ZW4odGhpcy5vbkNoYW5nZSlcclxuXHJcbiAgICBGb290ZXJBY3Rpb25zLmdldEZpdmVSZWNlbnRNb3ZpZXMoKVxyXG4gICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IEZvb3RlckFjdGlvbnMuZ2V0Rml2ZVJlY2VudE1vdmllcygpLCAzMDAwMClcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuICAgIEZvb3RlclN0b3JlLnVubGlzdGVuKHRoaXMub25DaGFuZ2UpXHJcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgbGV0IG1vc3RSZWNlbnRNb3ZpZXMgPSB0aGlzLnN0YXRlLm1vc3RSZWNlbnRNb3ZpZXMubWFwKG1vdmllID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8bGkga2V5PXttb3ZpZS5faWR9PlxyXG4gICAgICAgICAgPExpbmsgdG89e2AvLi4uYH0+e21vdmllLm5hbWV9PC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgIClcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGZvb3Rlcj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyJz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLXNtLTUnPlxyXG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9J2xlYWQnPlxyXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5JbmZvcm1hdGlvbjwvc3Ryb25nPiBhbmRcclxuICAgICAgICAgICAgICAgIDxzdHJvbmc+IENvcHlyaWdodDwvc3Ryb25nPlxyXG4gICAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICBQb3dlcmVkIGJ5XHJcbiAgICAgICAgICAgICAgICA8c3Ryb25nPiBFeHByZXNzPC9zdHJvbmc+XHJcbiAgICAgICAgICAgICAgICA8c3Ryb25nPiBNb25nb0RCPC9zdHJvbmc+IGFuZFxyXG4gICAgICAgICAgICAgICAgPHN0cm9uZz4gUmVhY3Q8L3N0cm9uZz5cclxuICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgPHA+QCAyMDE3IFNvZnR1bmkuPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1zbS00IGhpZGRlbi14cyc+XHJcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT0nbGVhZCc+XHJcbiAgICAgICAgICAgICAgICA8c3Ryb25nPk5ld2VzdDwvc3Ryb25nPiA1IE1vdmllc1xyXG4gICAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0nbGlzdC1pbmxpbmUnPlxyXG4gICAgICAgICAgICAgICAge21vc3RSZWNlbnRNb3ZpZXN9XHJcbiAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtc20tMyc+XHJcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT0nbGVhZCc+QXV0aG9yPC9oMz5cclxuICAgICAgICAgICAgICA8YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vYWNob2Jhbm92Jz5cclxuICAgICAgICAgICAgICAgIDxzdHJvbmc+IEFsZXggQ2hvYmFub3Y8L3N0cm9uZz5cclxuICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZm9vdGVyPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgSG9tZUFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucy9Ib21lQWN0aW9ucydcclxuaW1wb3J0IEhvbWVTdG9yZSBmcm9tICcuLi9zdG9yZXMvSG9tZVN0b3JlJ1xyXG5cclxuaW1wb3J0IE1vdmllQ2FyZCBmcm9tICcuL3N1Yi1jb21wb25lbnRzL01vdmllQ2FyZCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IEhvbWVTdG9yZS5nZXRTdGF0ZSgpXHJcblxyXG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKVxyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2UgKHN0YXRlKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgSG9tZVN0b3JlLmxpc3Rlbih0aGlzLm9uQ2hhbmdlKVxyXG5cclxuICAgIEhvbWVBY3Rpb25zLmdldFRvcFRlbk1vdmllcygpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcbiAgICBIb21lU3RvcmUudW5saXN0ZW4odGhpcy5jaGFuZ2UpXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgbGV0IG1vdmllcyA9IHRoaXMuc3RhdGUudG9wVGVuTW92aWVzLm1hcCgobW92aWUsIGluZGV4KSA9PiB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPE1vdmllQ2FyZCBrZXk9e21vdmllLl9pZH1cclxuICAgICAgICAgIG1vdmllPXttb3ZpZX1cclxuICAgICAgICAgIGluZGV4PXtpbmRleH0gLz5cclxuXHJcbiAgICAgIClcclxuICAgIH0pXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyJz5cclxuICAgICAgICA8aDMgY2xhc3NOYW1lPSd0ZXh0LWNlbnRlcic+V2VsY29tZSB0b1xyXG4gICAgICAgICAgPHN0cm9uZz4gTW92aWUgRGF0YWJhc2U8L3N0cm9uZz5cclxuICAgICAgICA8L2gzPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdsaXN0LWdyb3VwJz5cclxuICAgICAgICAgIHttb3ZpZXN9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgTW92aWVBZGRBY3Rpb25zIGZyb20gJy4uL2FjdGlvbnMvTW92aWVBZGRBY3Rpb25zJ1xyXG5pbXBvcnQgTW92aWVBZGRTdG9yZSBmcm9tICcuLi9zdG9yZXMvTW92aWVBZGRTdG9yZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFkZE1vdmllIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKVxyXG5cclxuICAgIHRoaXMuc3RhdGUgPSBNb3ZpZUFkZFN0b3JlLmdldFN0YXRlKClcclxuXHJcbiAgICB0aGlzLm9uQ2hhbmdlID0gdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSAoc3RhdGUpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnTW92aWUgYWRkIGxpc3RlbmVyIGF0dGFjaGVkLicpXHJcbiAgICBNb3ZpZUFkZFN0b3JlLmxpc3Rlbih0aGlzLm9uQ2hhbmdlKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG4gICAgTW92aWVBZGRTdG9yZS51bmxpc3Rlbih0aGlzLm9uQ2hhbmdlKVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlU3VibWl0IChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICBsZXQgbmFtZSA9IHRoaXMuc3RhdGUubmFtZS50cmltKClcclxuICAgIGxldCBnZW5yZXMgPSB0aGlzLnN0YXRlLmdlbnJlc1xyXG4gICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgIE1vdmllQWRkQWN0aW9ucy5uYW1lVmFsaWRhdGlvbkZhaWwoKVxyXG4gICAgfVxyXG4gICAgaWYgKGdlbnJlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgTW92aWVBZGRBY3Rpb25zLmdlbnJlc1ZhbGlkYXRpb25GYWlsKClcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmFtZSkge1xyXG4gICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICBuYW1lOiB0aGlzLnN0YXRlLm5hbWUsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuc3RhdGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgZ2VucmVzOiB0aGlzLnN0YXRlLmdlbnJlc1xyXG4gICAgICB9XHJcbiAgICAgIE1vdmllQWRkQWN0aW9ucy5hZGRNb3ZpZShkYXRhKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb250YWluZXInPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cgZmxpcEluWCBhbmltYXRlZCc+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLXNtLTgnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncGFuZWwgcGFuZWwtZGVmYXVsdCc+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3BhbmVsLWhlYWRpbmcnPkFkZCBNb3ZpZTwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwYW5lbC1ib2R5Jz5cclxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9eydmb3JtLWdyb3VwICcgKyB0aGlzLnN0YXRlLm5hbWVWYWxpZGF0aW9uU3RhdGV9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J2NvbnRyb2wtbGFiZWwnPk5hbWU8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCcgcmVmPSduYW1lVGV4dEZpZWxkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtNb3ZpZUFkZEFjdGlvbnMuaGFuZGxlTmFtZUNoYW5nZX0gYXV0b0ZvY3VzIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdoZWxwLWJsb2NrJz57dGhpcy5zdGF0ZS5oZWxwQmxvY2t9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zvcm0tZ3JvdXAnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J2NvbnRyb2wtbGFiZWwnPkRlc2NyaXB0aW9uPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wnXHJcbiAgICAgICAgICAgICAgICAgICAgICByb3dzPSc1J1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17TW92aWVBZGRBY3Rpb25zLmhhbmRsZURlc2NyaXB0aW9uQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9eydmb3JtLWdyb3VwICcgKyB0aGlzLnN0YXRlLmdlbnJlc1ZhbGlkYXRpb25TdGF0ZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NoZWNrYm94IGNoZWNrYm94LWlubGluZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIG5hbWU9J2dlbnJlcycgaWQ9J2FjdGlvbicgdmFsdWU9J0FjdGlvbidcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5nZW5yZXMuaW5kZXhPZignQWN0aW9uJykgIT09IC0xfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17TW92aWVBZGRBY3Rpb25zLmhhbmRsZUdlbnJlc0NoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdhY3Rpb24nPkFjdGlvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NoZWNrYm94IGNoZWNrYm94LWlubGluZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIG5hbWU9J2dlbnJlcycgaWQ9J2hvcnJvcicgdmFsdWU9J0hvcnJvcidcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5nZW5yZXMuaW5kZXhPZignSG9ycm9yJykgIT09IC0xfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17TW92aWVBZGRBY3Rpb25zLmhhbmRsZUdlbnJlc0NoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdob3Jyb3InPkhvcnJvcjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NoZWNrYm94IGNoZWNrYm94LWlubGluZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIG5hbWU9J2dlbnJlcycgaWQ9J3NjaS1maScgdmFsdWU9J1NjaS1maSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5nZW5yZXMuaW5kZXhPZignU2NpLWZpJykgIT09IC0xfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17TW92aWVBZGRBY3Rpb25zLmhhbmRsZUdlbnJlc0NoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdzY2ktZmknPlNjaS1maTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NoZWNrYm94IGNoZWNrYm94LWlubGluZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIG5hbWU9J2dlbnJlcycgaWQ9J2ZhbnRhc3knIHZhbHVlPSdGYW50YXN5J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmdlbnJlcy5pbmRleE9mKCdGYW50YXN5JykgIT09IC0xfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17TW92aWVBZGRBY3Rpb25zLmhhbmRsZUdlbnJlc0NoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdmYW50YXN5Jz5GYW50YXN5PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY2hlY2tib3ggY2hlY2tib3gtaW5saW5lJz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgbmFtZT0nZ2VucmVzJyBpZD0ncm9tYW5jZScgdmFsdWU9J1JvbWFuY2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuZ2VucmVzLmluZGV4T2YoJ1JvbWFuY2UnKSAhPT0gLTF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtNb3ZpZUFkZEFjdGlvbnMuaGFuZGxlR2VucmVzQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3JvbWFuY2UnPlJvbWFuY2U8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjaGVja2JveCBjaGVja2JveC1pbmxpbmUnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94JyBuYW1lPSdnZW5yZXMnIGlkPSd0aHJpbGxlcicgdmFsdWU9J1RocmlsbGVyJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmdlbnJlcy5pbmRleE9mKCdUaHJpbGxlcicpICE9PSAtMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e01vdmllQWRkQWN0aW9ucy5oYW5kbGVHZW5yZXNDaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGhyaWxsZXInPlRocmlsbGVyPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY2hlY2tib3ggY2hlY2tib3gtaW5saW5lJz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgbmFtZT0nZ2VucmVzJyBpZD0nYWR2ZW50dXJlJyB2YWx1ZT0nQWR2ZW50dXJlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmdlbnJlcy5pbmRleE9mKCdBZHZlbnR1cmUnKSAhPT0gLTF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtNb3ZpZUFkZEFjdGlvbnMuaGFuZGxlR2VucmVzQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J2FkdmVudHVyZSc+QWR2ZW50dXJlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0nc3VibWl0JyBjbGFzc05hbWU9J2J0biBidG4tcHJpbWFyeSc+U3VibWl0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInXHJcblxyXG5pbXBvcnQgTmF2YmFyQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL05hdmJhckFjdGlvbnMnXHJcbmltcG9ydCBOYXZiYXJTdG9yZSBmcm9tICcuLi9zdG9yZXMvTmF2YmFyU3RvcmUnXHJcblxyXG5pbXBvcnQgTmF2YmFyVXNlck1lbnUgZnJvbSAnLi9zdWItY29tcG9uZW50cy9OYXZiYXJVc2VyTWVudSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuXHJcbiAgICB0aGlzLnN0YXRlID0gTmF2YmFyU3RvcmUuZ2V0U3RhdGUoKVxyXG5cclxuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcylcclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlIChzdGF0ZSkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSlcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIE5hdmJhclN0b3JlLmxpc3Rlbih0aGlzLm9uQ2hhbmdlKVxyXG5cclxuICAgICQoZG9jdW1lbnQpLmFqYXhTdGFydCgoKSA9PiBOYXZiYXJBY3Rpb25zLnVwZGF0ZUFqYXhBbmltYXRpb24oJ2ZhZGVJbicpKVxyXG4gICAgJChkb2N1bWVudCkuYWpheENvbXBsZXRlKCgpID0+IE5hdmJhckFjdGlvbnMudXBkYXRlQWpheEFuaW1hdGlvbignZmFkZU91dCcpKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG4gICAgTmF2YmFyU3RvcmUudW5saXN0ZW4odGhpcy5vbkNoYW5nZSlcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBsZXQgbmF2YmFyVXNlck1lbnUgPSA8TmF2YmFyVXNlck1lbnUgdXNlckRhdGE9e3RoaXMucHJvcHMudXNlckRhdGF9IC8+XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8bmF2IGNsYXNzTmFtZT0nbmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbmF2YmFyLWhlYWRlcic+XHJcbiAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgY2xhc3NOYW1lPSduYXZiYXItdG9nZ2xlIGNvbGxhcHNlZCdcclxuICAgICAgICAgICAgZGF0YS10b2dnbGU9J2NvbGxhcHNlJ1xyXG4gICAgICAgICAgICBkYXRhLXRhcmdldD0nI25hdmJhcic+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc3Itb25seSc+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0naWNvbi1iYXInIC8+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0naWNvbi1iYXInIC8+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0naWNvbi1iYXInIC8+XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDxMaW5rIHRvPScvJyBjbGFzc05hbWU9J25hdmJhci1icmFuZCc+XHJcbiAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgc3R5bGU9e3snb3BhY2l0eSc6IDF9fVxyXG4gICAgICAgICAgICAgIHJlZj0ndHJpYW5nbGVzJ1xyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17J3RyaWFuZ2xlcyBhbmltYXRlZCcgKyB0aGlzLnN0YXRlLmFqYXhBbmltYXRpb25DbGFzc30+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RyaSBpbnZlcnQnIC8+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RyaSBpbnZlcnQnIC8+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RyaScgLz5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndHJpIGludmVydCcgLz5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndHJpIGludmVydCcgLz5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndHJpJyAvPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0cmkgaW52ZXJ0JyAvPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0cmknIC8+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RyaSBpbnZlcnQnIC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgTURCXHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBpZD0nbmF2YmFyJyBjbGFzc05hbWU9J25hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSc+XHJcbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPSduYXYgbmF2YmFyLW5hdic+XHJcbiAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICA8TGluayB0bz0nLyc+SG9tZTwvTGluaz5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgIDxMaW5rIHRvPScvbW92aWUvYWRkJz5BZGQgTW92aWU8L0xpbms+XHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAge25hdmJhclVzZXJNZW51fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L25hdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IFVzZXJTdG9yZSBmcm9tICcuLi9zdG9yZXMvVXNlclN0b3JlJ1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSAnLi9zdWItY29tcG9uZW50cy9Vc2VySW5mbydcclxuaW1wb3J0IFVzZXJWb3RlZE1vdmllcyBmcm9tICcuL3N1Yi1jb21wb25lbnRzL1VzZXJSYXRlZE1vdmllcydcclxuaW1wb3J0IFVzZXJSZXZpZXdzIGZyb20gJy4vc3ViLWNvbXBvbmVudHMvVXNlclJldmlld3MnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyUHJvZmlsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuXHJcbiAgICB0aGlzLnN0YXRlID0gVXNlclN0b3JlLmdldFN0YXRlKClcclxuXHJcbiAgICB0aGlzLm9uQ2hhbmdlID0gdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSAoc3RhdGUpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICBVc2VyU3RvcmUubGlzdGVuKHRoaXMub25DaGFuZ2UpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcbiAgICBVc2VyU3RvcmUudW5saXN0ZW4odGhpcy5vbkNoYW5nZSlcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBsZXQgbm9kZXMgPSB7fVxyXG4gICAgbm9kZXMucm9sZXMgPSB0aGlzLnN0YXRlLnJvbGVzLm1hcCgocm9sZSwgaW5kZXgpID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8aDQga2V5PXtpbmRleH0gY2xhc3NOYW1lPSdsZWFkJz5cclxuICAgICAgICAgIDxzdHJvbmc+e3JvbGV9PC9zdHJvbmc+XHJcbiAgICAgICAgPC9oND5cclxuICAgICAgKVxyXG4gICAgfSlcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPFVzZXJJbmZvIG5hbWU9e3RoaXMuc3RhdGUubmFtZX1cclxuICAgICAgICAgIHJvbGVzPXt0aGlzLnN0YXRlLnJvbGVzfVxyXG4gICAgICAgICAgaW5mb3JtYXRpb249e3RoaXMuc3RhdGUuaW5mb3JtYXRpb259IC8+XHJcbiAgICAgICAgPFVzZXJWb3RlZE1vdmllcyB2b3Rlcz17dGhpcy5zdGF0ZS52b3Rlc30gLz5cclxuICAgICAgICA8VXNlclJldmlld3MgcmV2aWV3cz17dGhpcy5wcm9wcy5yZXZpZXdzfSAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xyXG5cclxuaW1wb3J0IEhlbHBlcnMgZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0hlbHBlcnMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb3ZpZUNhcmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgc2hvd1ZvdGVQYW5lbDogZmFsc2UsXHJcbiAgICAgIHNob3dDb21tZW50c1BhbmVsOiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlQ29tbWVudHNQYW5lbCAoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoe1xyXG4gICAgICBzaG93Q29tbWVudHNQYW5lbDogIXByZXZTdGF0ZS5zaG93Q29tbWVudHNQYW5lbCxcclxuICAgICAgc2hvd1ZvdGVQYW5lbDogZmFsc2VcclxuICAgIH0pKVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlVm90ZVBhbmVsICgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XHJcbiAgICAgIHNob3dWb3RlUGFuZWw6ICFwcmV2U3RhdGUuc2hvd1ZvdGVQYW5lbCxcclxuICAgICAgc2hvd0NvbW1lbnRzUGFuZWw6IGZhbHNlXHJcbiAgICB9KSlcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBsZXQgbm9kZXMgPSBIZWxwZXJzLm5vZGVzTW92aWVDYXJkKFxyXG4gICAgICB0aGlzLnN0YXRlLFxyXG4gICAgICB0aGlzLnByb3BzLFxyXG4gICAgICB0aGlzLnRvZ2dsZUNvbW1lbnRzUGFuZWwuYmluZCh0aGlzKSxcclxuICAgICAgdGhpcy50b2dnbGVWb3RlUGFuZWwuYmluZCh0aGlzKVxyXG4gICAgKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdhbmltYXRlZCBmYWRlSW4nPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZWRpYSBtb3ZpZSc+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Bvc2l0aW9uIHB1bGwtbGVmdCc+e3RoaXMucHJvcHMuaW5kZXggKyAxfTwvc3Bhbj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwdWxsLWxlZnQgdGh1bWItbGcnPlxyXG4gICAgICAgICAgICB7bm9kZXMucG9zdGVyfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWVkaWEtYm9keSc+XHJcbiAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9J21lZGlhLWhlYWRpbmcnPlxyXG4gICAgICAgICAgICAgIDxMaW5rIHRvPXtgL21vdmllLyR7dGhpcy5wcm9wcy5tb3ZpZS5faWR9LyR7dGhpcy5wcm9wcy5tb3ZpZS5uYW1lfWB9PlxyXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMubW92aWUubmFtZX1cclxuICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDwvaDQ+XHJcbiAgICAgICAgICAgIDxzbWFsbD5HZW5yZXM6IHtub2Rlcy5nZW5yZXN9PC9zbWFsbD5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxwPnt0aGlzLnByb3BzLm1vdmllLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSd2b3Rlcyc+Vm90ZXM6XHJcbiAgICAgICAgICAgICAgey8qIDxzdHJvbmc+e3RoaXMuc3RhdGUubW92aWVWb3Rlc308L3N0cm9uZz4gKi99XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgey8qIHtub2Rlcy5yYXRpbmd9ICovfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB7bm9kZXMucGFuZWxUb2dnbGVzfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHtub2Rlcy52b3RlUGFuZWx9XHJcbiAgICAgICAge25vZGVzLmNvbW1lbnRzUGFuZWx9XHJcbiAgICAgICAgPGRpdiBpZD0nY2xlYXInIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb3ZpZUNvbW1lbnRzUGFuZWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nbGlzdC1ncm91cCc+XHJcbiAgICAgICAgPGgzIGNsYXNzTmFtZT0nY29sLXNtLTMnPkNvbW1lbnRzOiA8L2gzPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW92aWVWb3RlUGFuZWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLXNtLTQgY29sLXhzLW9mZnNldC04IGxpc3QtZ3JvdXAtaXRlbSBhbmltYXRlZCBmYWRlSW4gdm90ZSc+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J21lZGlhJz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZWRpYS1ib2R5Jz5cclxuICAgICAgICAgICAgSGVsbG8gZnJvbSBNb3ZpZVZvdGVQYW5lbFxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInXHJcblxyXG5pbXBvcnQgVXNlckFjdGlvbnMgZnJvbSAnLi4vLi4vYWN0aW9ucy9Vc2VyQWN0aW9ucydcclxuaW1wb3J0IFVzZXJTdG9yZSBmcm9tICcuLi8uLi9zdG9yZXMvVXNlclN0b3JlJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2YmFyVXNlck1lbnUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IFVzZXJTdG9yZS5nZXRTdGF0ZSgpXHJcblxyXG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKVxyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2UgKHN0YXRlKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgVXNlclN0b3JlLmxpc3Rlbih0aGlzLm9uQ2hhbmdlKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG4gICAgVXNlclN0b3JlLnVubGlzdGVuKHRoaXMub25DaGFuZ2UpXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgbGV0IHVzZXJNZW51XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUubG9nZ2VkSW5Vc2VySWQpIHtcclxuICAgICAgdXNlck1lbnUgPSAoXHJcbiAgICAgICAgPHVsIGNsYXNzTmFtZT0nbmF2IG5hdmJhci1uYXYgcHVsbC1yaWdodCc+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxhIGhyZWY9Jy91c2VyL2xvZ2luJyBvbkNsaWNrPXtVc2VyQWN0aW9ucy5sb2dpblVzZXJ9PkxvZ2luPC9hPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPExpbmsgdG89Jy91c2VyL3JlZ2lzdGVyJz5SZWdpc3RlcjwvTGluaz5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdXNlck1lbnUgPSAoXHJcbiAgICAgICAgPHVsIGNsYXNzTmFtZT0nbmF2IG5hdmJhci1uYXYgcHVsbC1yaWdodCc+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxMaW5rIHRvPXtgL3VzZXIvcHJvZmlsZS8ke3RoaXMuc3RhdGUubG9nZ2VkSW5Vc2VySWR9YH0+UHJvZmlsZTwvTGluaz5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxhIGhyZWY9JyMnIG9uQ2xpY2s9e1VzZXJBY3Rpb25zLmxvZ291dFVzZXJ9PkxvZ291dDwvYT5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAge3VzZXJNZW51fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlclByb2ZpbGVJbmZvIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIGxldCByb2xlc1xyXG4gICAgaWYgKHRoaXMucHJvcHMucm9sZXMpIHtcclxuICAgICAgcm9sZXMgPSB0aGlzLnByb3BzLnJvbGVzLm1hcCgocm9sZSwgaW5kZXgpID0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPGg0IGtleT17aW5kZXh9IGNsYXNzTmFtZT0nbGVhZCc+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+e3JvbGV9PC9zdHJvbmc+XHJcbiAgICAgICAgICA8L2g0PlxyXG4gICAgICAgIClcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyIHByb2ZpbGUtY29udGFpbmVyJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncHJvZmlsZS1pbWcnPlxyXG4gICAgICAgICAgPGltZyBzcmM9Jy9pbWFnZXMvdXNlci1kZWZhdWx0LnBuZycgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncHJvZmlsZS1pbmZvIGNsZWFyZml4Jz5cclxuICAgICAgICAgIDxoMj48c3Ryb25nPnsgdGhpcy5wcm9wcy5uYW1lIH08L3N0cm9uZz48L2gyPlxyXG4gICAgICAgICAgPGg0IGNsYXNzTmFtZT0nbGVhZCc+Um9sZXM6PC9oND5cclxuICAgICAgICAgIHsgcm9sZXMgfVxyXG4gICAgICAgICAgPHA+eyB0aGlzLnByb3BzLmluZm9ybWF0aW9uIH08L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgVXNlclJhdGVkTW92aWVzUGFuZWwgZnJvbSAnLi9Vc2VyUmF0ZWRNb3ZpZXNQYW5lbCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJWb3RlZE1vdmllcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBzaG93UmF0ZWRNb3ZpZXNQYW5lbDogZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZVJhdGVkTW92aWVzICgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XHJcbiAgICAgIHNob3dSYXRlZE1vdmllc1BhbmVsOiAhcHJldlN0YXRlLnNob3dSYXRlZE1vdmllc1BhbmVsXHJcbiAgICB9KSlcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyIHByb2ZpbGUtY29udGFpbmVyJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncHJvZmlsZS1zdGF0cyBjbGVhcmZpeCc+XHJcbiAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3N0YXRzLW51bWJlcic+e3RoaXMucHJvcHMudm90ZXMgPyB0aGlzLnByb3BzLnZvdGVzLmxlbmd0aCA6IDB9PC9zcGFuPlZvdGVzXHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwdWxsLXJpZ2h0IGJ0bi1ncm91cCc+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9J2J0biBidG4tcHJpbWFyeScgb25DbGljaz17dGhpcy50b2dnbGVSYXRlZE1vdmllcy5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAge3RoaXMuc3RhdGUuc2hvd1JhdGVkTW92aWVzUGFuZWwgPyAnSGlkZScgOiAnUmF0ZWQgTW92aWVzJ31cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93UmF0ZWRNb3ZpZXNQYW5lbCA/IDxVc2VyUmF0ZWRNb3ZpZXNQYW5lbCBtb3ZpZXM9e3RoaXMucHJvcHMudm90ZXN9IC8+IDogbnVsbH1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCBNb3ZpZUNhcmQgZnJvbSAnLi9Nb3ZpZUNhcmQnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyVm90ZWRNb3ZpZXNQYW5lbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nbGlzdC1ncm91cCc+XHJcbiAgICAgICAgSGVsbG8gZnJvbSBVc2VyVm90ZWRNb3ZpZXNQYW5lbFxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IFVzZXJSZXZpZXdzUGFuZWwgZnJvbSAnLi9Vc2VyUmV2aWV3c1BhbmVsJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlclJldmlld3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgc2hvd1Jldmlld3NQYW5lbDogZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZVJldmlld3MgKCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHtcclxuICAgICAgc2hvd1Jldmlld3NQYW5lbDogIXByZXZTdGF0ZS5zaG93UmV2aWV3c1BhbmVsXHJcbiAgICB9KSlcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyIHByb2ZpbGUtY29udGFpbmVyJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncHJvZmlsZS1zdGF0cyBjbGVhcmZpeCc+XHJcbiAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3N0YXRzLW51bWJlcic+e3RoaXMucHJvcHMucmV2aWV3cyA/IHRoaXMucHJvcHMucmV2aWV3cy5sZW5ndGggOiAwfTwvc3Bhbj5SZXZpZXdzXHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwdWxsLXJpZ2h0IGJ0bi1ncm91cCc+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9J2J0biBidG4tcHJpbWFyeScgb25DbGljaz17dGhpcy50b2dnbGVSZXZpZXdzLmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5zaG93UmV2aWV3c1BhbmVsID8gJ0hpZGUnIDogJ1Jldmlld3MnfVxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHt0aGlzLnN0YXRlLnNob3dSZXZpZXdzUGFuZWwgPyA8VXNlclJldmlld3NQYW5lbCByZXZpZXdzPXt0aGlzLnByb3BzLnJldmlld3N9IC8+IDogbnVsbH1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJSZXZpZXdzUGFuZWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbnRhaW5lcic+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2xpc3QtZ3JvdXAnPlxyXG4gICAgICAgICAgSGVsbG8gZnJvbSBVc2VyUmV2aWV3c1BhbmVsXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgY3JlYXRlQnJvd3Nlckhpc3RvcnkgZnJvbSAnaGlzdG9yeS9saWIvY3JlYXRlQnJvd3Nlckhpc3RvcnknO1xyXG5cclxuaW1wb3J0IHJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XHJcblxyXG5sZXQgaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCk7XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoXHJcbiAgICA8Um91dGVyIGhpc3Rvcnk9e2hpc3Rvcnl9Pnsgcm91dGVzIH08L1JvdXRlcj4sXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJylcclxuKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xyXG5cclxuaW1wb3J0IEFwcCBmcm9tICcuL2NvbXBvbmVudHMvQXBwJ1xyXG5pbXBvcnQgSG9tZSBmcm9tICcuL2NvbXBvbmVudHMvSG9tZSdcclxuaW1wb3J0IE1vdmllQWRkIGZyb20gJy4vY29tcG9uZW50cy9Nb3ZpZUFkZCdcclxuaW1wb3J0IFVzZXJQcm9maWxlIGZyb20gJy4vY29tcG9uZW50cy9Vc2VyUHJvZmlsZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChcclxuICA8Um91dGUgY29tcG9uZW50PXtBcHB9PlxyXG4gICAgPFJvdXRlIHBhdGg9Jy8nIGNvbXBvbmVudD17SG9tZX0gLz5cclxuICAgIDxSb3V0ZSBwYXRoPScvbW92aWUvQWRkJyBjb21wb25lbnQ9e01vdmllQWRkfSAvPlxyXG4gICAgPFJvdXRlIHBhdGg9Jy91c2VyL3Byb2ZpbGUvOnVzZXJJZCcgY29tcG9uZW50PXtVc2VyUHJvZmlsZX0gLz5cclxuICA8L1JvdXRlPlxyXG4pXHJcbiIsImltcG9ydCBhbHQgZnJvbSAnLi4vYWx0J1xyXG5pbXBvcnQgRm9vdGVyQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL0Zvb3RlckFjdGlvbnMnXHJcblxyXG5jbGFzcyBGb290ZXJTdG9yZSB7XHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5iaW5kQWN0aW9ucyhGb290ZXJBY3Rpb25zKVxyXG5cclxuICAgIHRoaXMubW9zdFJlY2VudE1vdmllcyA9IFtdXHJcbiAgfVxyXG5cclxuICBvbkdldEZpdmVSZWNlbnRNb3ZpZXNTdWNjZXNzIChkYXRhKSB7XHJcbiAgICB0aGlzLm1vc3RSZWNlbnRNb3ZpZXMgPSBkYXRhXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhbHQuY3JlYXRlU3RvcmUoRm9vdGVyU3RvcmUpXHJcbiIsImltcG9ydCBhbHQgZnJvbSAnLi4vYWx0J1xyXG5pbXBvcnQgSG9tZUFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucy9Ib21lQWN0aW9ucydcclxuXHJcbmNsYXNzIEhvbWVTdG9yZSB7XHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5iaW5kQWN0aW9ucyhIb21lQWN0aW9ucylcclxuXHJcbiAgICB0aGlzLnRvcFRlbk1vdmllcyA9IFtdXHJcbiAgfVxyXG5cclxuICBvbkdldFRvcFRlbk1vdmllc1N1Y2Nlc3MgKG1vdmllcykge1xyXG4gICAgdGhpcy50b3BUZW5Nb3ZpZXMgPSBtb3ZpZXNcclxuICB9XHJcblxyXG4gIG9uR2V0VG9wVGVuTW92aWVzRmFpbCAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmxvZygnQ291bGQgY29ubmVjdCB0byBEQicsIGVycilcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFsdC5jcmVhdGVTdG9yZShIb21lU3RvcmUpXHJcbiIsImltcG9ydCBhbHQgZnJvbSAnLi4vYWx0J1xyXG5pbXBvcnQgTW92aWVBZGRBY3Rpb25zIGZyb20gJy4uL2FjdGlvbnMvTW92aWVBZGRBY3Rpb25zJ1xyXG5pbXBvcnQgSGVscGVycyBmcm9tICcuLi91dGlsaXRpZXMvSGVscGVycydcclxuXHJcbmNsYXNzIE1vdmllQWRkU3RvcmUge1xyXG4gIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIHRoaXMuYmluZEFjdGlvbnMoTW92aWVBZGRBY3Rpb25zKVxyXG5cclxuICAgIHRoaXMubmFtZSA9ICcnXHJcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gJydcclxuICAgIHRoaXMuZ2VucmVzID0gW11cclxuICAgIHRoaXMubW92aWVQb3N0ZXJVcmwgPSAnJ1xyXG4gICAgdGhpcy5nZW5yZXNWYWxpZGF0aW9uU3RhdGUgPSAnJ1xyXG4gICAgdGhpcy5uYW1lVmFsaWRhdGlvblN0YXRlID0gJydcclxuICAgIHRoaXMuaGVscEJsb2NrID0gJydcclxuICB9XHJcblxyXG4gIG9uQWRkTW92aWVTdWNjZXNzICgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdBZGRlZCBtb3ZpZSEnKVxyXG4gIH1cclxuXHJcbiAgb25BZGRNb3ZpZUZhaWwgKGVycikge1xyXG4gICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBhZGQgbW92aWUnLCBlcnIpXHJcbiAgfVxyXG5cclxuICBvbkdldE1vdmllUG9zdGVyU3VjY2VzcyAoZGF0YSkge1xyXG4gICAgdGhpcy5tb3ZpZVBvc3RlclVybCA9IGRhdGEucG9zdGVyVXJsXHJcbiAgfVxyXG5cclxuICBvbkdldE1vdmllUG9zdGVyRmFpbCAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IGdldCBtb3ZpZSBwb3N0JywgZXJyKVxyXG4gIH1cclxuXHJcbiAgb25IYW5kbGVOYW1lQ2hhbmdlIChlKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBlLnRhcmdldC52YWx1ZVxyXG4gICAgdGhpcy5uYW1lVmFsaWRhdGlvblN0YXRlID0gJydcclxuICAgIHRoaXMuaGVscEJsb2NrID0gJydcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlRGVzY3JpcHRpb25DaGFuZ2UgKGUpIHtcclxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBlLnRhcmdldC52YWx1ZVxyXG4gICAgdGhpcy5nZW5yZXNWYWxpZGF0aW9uU3RhdGUgPSAnJ1xyXG4gICAgdGhpcy5oZWxwQmxvY2sgPSAnJ1xyXG4gIH1cclxuXHJcbiAgb25IYW5kbGVHZW5yZXNDaGFuZ2UgKGUpIHtcclxuICAgIGxldCBnZW5yZVZhbHVlID0gZS50YXJnZXQudmFsdWVcclxuICAgIGlmICh0aGlzLmdlbnJlcy5pbmRleE9mKGdlbnJlVmFsdWUpICE9PSAtMSkge1xyXG4gICAgICB0aGlzLmdlbnJlcyA9IEhlbHBlcnMucmVtb3ZlRnJvbUFycmF5KGdlbnJlVmFsdWUsIHRoaXMuZ2VucmVzKVxyXG4gICAgICBlLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCAndHJ1ZScpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmdlbnJlcyA9IEhlbHBlcnMuYXBwZW5kVG9BcnJheShnZW5yZVZhbHVlLCB0aGlzLmdlbnJlcylcclxuICAgICAgZS50YXJnZXQuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgJ2ZhbHNlJylcclxuICAgIH1cclxuICAgIHRoaXMuZ2VucmVzVmFsaWRhdGlvblN0YXRlID0gJydcclxuICAgIHRoaXMuaGVscEJsb2NrID0gJydcclxuICB9XHJcblxyXG4gIG9uTmFtZVZhbGlkYXRpb25GYWlsICgpIHtcclxuICAgIHRoaXMubmFtZVZhbGlkYXRpb25TdGF0ZSA9ICdoYXMtZXJyb3InXHJcbiAgICB0aGlzLmhlbHBCbG9jayA9ICdFbnRlciBtb3ZpZSBuYW1lJ1xyXG4gIH1cclxuXHJcbiAgb25HZW5yZXNWYWxpZGF0aW9uRmFpbCAoKSB7XHJcbiAgICB0aGlzLmdlbnJlc1ZhbGlkYXRpb25TdGF0ZSA9ICdoYXMtZXJyb3InXHJcbiAgICB0aGlzLmhlbHBCbG9jayA9ICdTZWxlY3QgYXQgbGVhc3Qgb25lIG1vdmllIGdlbnJlJ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWx0LmNyZWF0ZVN0b3JlKE1vdmllQWRkU3RvcmUpXHJcbiIsImltcG9ydCBhbHQgZnJvbSAnLi4vYWx0J1xyXG5pbXBvcnQgTmF2YmFyQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL05hdmJhckFjdGlvbnMnXHJcblxyXG5jbGFzcyBOYXZiYXJTdG9yZSB7XHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5iaW5kQWN0aW9ucyhOYXZiYXJBY3Rpb25zKVxyXG5cclxuICAgIHRoaXMuYWpheEFuaW1hdGlvbkNsYXNzID0gJydcclxuICB9XHJcblxyXG4gIG9uVXBkYXRlQWpheEFuaW1hdGlvbiAoYW5pbWF0aW9uQ2xhc3MpIHtcclxuICAgIHRoaXMuYWpheEFuaW1hdGlvbkNsYXNzID0gYW5pbWF0aW9uQ2xhc3NcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFsdC5jcmVhdGVTdG9yZShOYXZiYXJTdG9yZSlcclxuIiwiaW1wb3J0IGFsdCBmcm9tICcuLi9hbHQnXHJcbmltcG9ydCBVc2VyQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL1VzZXJBY3Rpb25zJ1xyXG5cclxuY2xhc3MgVXNlclN0b3JlIHtcclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICB0aGlzLmJpbmRBY3Rpb25zKFVzZXJBY3Rpb25zKVxyXG5cclxuICAgIHRoaXMubG9nZ2VkSW5Vc2VySWQgPSAnJ1xyXG4gICAgdGhpcy51c2VybmFtZSA9ICcnXHJcbiAgICB0aGlzLnJvbGVzID0gW11cclxuICB9XHJcblxyXG4gIG9uTG9naW5Vc2VyU3VjY2VzcyAodXNlcikge1xyXG4gICAgdGhpcy5sb2dnZWRJblVzZXJJZCA9IHVzZXIuX2lkXHJcbiAgICB0aGlzLnVzZXJuYW1lID0gdXNlci51c2VybmFtZVxyXG4gICAgdGhpcy5yb2xlcyA9IHVzZXIucm9sZXNcclxuICB9XHJcblxyXG4gIG9uTG9naW5Vc2VyRmFpbCAoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnRmFpbGVkIGxvZ2luIGF0dGVtcHQnKVxyXG4gIH1cclxuXHJcbiAgb25Mb2dvdXRVc2VyU3VjY2VzcyAoKSB7XHJcbiAgICB0aGlzLmxvZ2dlZEluVXNlcklkID0gJydcclxuICAgIHRoaXMudXNlcm5hbWUgPSAnJ1xyXG4gICAgdGhpcy5yb2xlcyA9IFtdXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhbHQuY3JlYXRlU3RvcmUoVXNlclN0b3JlKVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInXHJcblxyXG5pbXBvcnQgTW92aWVWb3RlUGFuZWwgZnJvbSAnLi4vY29tcG9uZW50cy9zdWItY29tcG9uZW50cy9Nb3ZpZVZvdGVQYW5lbCdcclxuaW1wb3J0IE1vdmllQ29tbWVudHNQYW5lbCBmcm9tICcuLi9jb21wb25lbnRzL3N1Yi1jb21wb25lbnRzL01vdmllQ29tbWVudHNQYW5lbCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlbHBlcnMge1xyXG4gIHN0YXRpYyBhcHBlbmRUb0FycmF5ICh2YWx1ZSwgYXJyYXkpIHtcclxuICAgIGFycmF5LnB1c2godmFsdWUpXHJcblxyXG4gICAgcmV0dXJuIGFycmF5XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcHJlcGVuZFRvQXJyYXkgKHZhbHVlLCBhcnJheSkge1xyXG4gICAgYXJyYXkudW5zaGlmdCh2YWx1ZSlcclxuXHJcbiAgICByZXR1cm4gYXJyYXlcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZW1vdmVGcm9tQXJyYXkgKHZhbHVlLCBhcnJheSkge1xyXG4gICAgbGV0IGluZGV4ID0gYXJyYXkuaW5kZXhPZih2YWx1ZSlcclxuICAgIGlmIChpbmRleCAhPT0gMSkge1xyXG4gICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbm9kZXNNb3ZpZUNhcmQgKHN0YXRlLCBwcm9wcywgdG9nZ2xlQ29tbWVudHNQYW5lbCwgdG9nZ2xlVm90ZVBhbmVsKSB7XHJcbiAgICBsZXQgbm9kZXMgPSB7fVxyXG4gICAgaWYgKHN0YXRlLnNob3dDb21tZW50c1BhbmVsKSB7XHJcbiAgICAgIG5vZGVzLmNvbW1lbnRzUGFuZWwgPSA8TW92aWVDb21tZW50c1BhbmVsIG1vdmllSWQ9e3Byb3BzLm1vdmllLl9pZH0gLz5cclxuICAgIH1cclxuICAgIGlmIChzdGF0ZS5zaG93Vm90ZVBhbmVsKSB7XHJcbiAgICAgIG5vZGVzLnZvdGVQYW5lbCA9IDxNb3ZpZVZvdGVQYW5lbCBtb3ZpZUlkPXtwcm9wcy5tb3ZpZS5faWR9IC8+XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZXMucGFuZWxUb2dnbGVzID0gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0ncHVsbC1yaWdodCBidG4tZ3JvdXAnPlxyXG4gICAgICAgIDxhIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5J1xyXG4gICAgICAgICAgb25DbGljaz17dG9nZ2xlQ29tbWVudHNQYW5lbH0gPlxyXG4gICAgICAgICAge3N0YXRlLnNob3dDb21tZW50c1BhbmVsID8gJ0hpZGUnIDogJ0NvbW1lbnRzJ31cclxuICAgICAgICA8L2E+XHJcbiAgICAgICAgPGEgY2xhc3NOYW1lPSdidG4gYnRuLXByaW1hcnknXHJcbiAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVWb3RlUGFuZWx9ID5cclxuICAgICAgICAgIHtzdGF0ZS5zaG93Vm90ZVBhbmVsID8gJ0hpZGUnIDogJ1ZvdGUnfVxyXG4gICAgICAgIDwvYT5cclxuICAgICAgICA8TGluayB0bz17YC9tb3ZpZS8ke3Byb3BzLm1vdmllLl9pZH0vcmV2aWV3L2FkZGB9IGNsYXNzTmFtZT0nYnRuIGJ0bi13YXJuaW5nJz5Xcml0ZSByZXZpZXc8L0xpbms+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxuICAgIG5vZGVzLmdlbnJlcyA9IHByb3BzLm1vdmllLmdlbnJlcy5tYXAoZ2VucmUgPT4ge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxzdHJvbmcga2V5PXtwcm9wcy5tb3ZpZS5faWQgKyBnZW5yZX0+e2dlbnJlfTwvc3Ryb25nPlxyXG4gICAgICApXHJcbiAgICB9KVxyXG5cclxuICAgIGlmIChwcm9wcy5tb3ZpZS5tb3ZpZVBvc3RlclVybCkge1xyXG4gICAgICBub2Rlcy5wb3N0ZXIgPSAoXHJcbiAgICAgICAgPGltZyBjbGFzc05hbWU9J21lZGlhLW9iamVjdCcgc3JjPXtwcm9wcy5tb3ZpZS5tb3ZpZVBvc3RlclVybH0gLz5cclxuICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBub2Rlc1xyXG4gIH1cclxufVxyXG4iLCJjb25zdCBBUElfS0VZID0gJzcxYWFiZDc5YzcwODJiY2FjYWJjOTY4NzdhYzcyMzhiJ1xyXG5jb25zdCBTRUFSQ0hfQkFTRV9VUkwgPSAnaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy9zZWFyY2gvbW92aWUnXHJcbmNvbnN0IFBPU1RFUl9CQVNFX1VSTCA9ICdodHRwczovL2ltYWdlLnRtZGIub3JnL3QvcC93NTAwJ1xyXG5jb25zdCBVTlZFUklGSUVEX01PVklFX1BPU1RFUl9VUkwgPSAnL2ltYWdlcy9tb3ZpZS11bnZlcmlmaWVkLnBuZydcclxuY29uc3QgTUlTU0lOR19EQVRBX1BPU1RFUl9VUkwgPSAnL2ltYWdlcy9tb3ZpZS1taXNzaW5nLWRhdGEuanBnJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWVzdGVyVE1EQiB7XHJcbiAgc3RhdGljIGdldE1vdmllUG9zdGVyIChtb3ZpZU5hbWUpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGxldCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICAgICAgdXJsOiBgJHtTRUFSQ0hfQkFTRV9VUkx9P2FwaV9rZXk9JHtBUElfS0VZfSZxdWVyeT0ke21vdmllTmFtZX1gXHJcbiAgICAgIH1cclxuICAgICAgJC5hamF4KHJlcXVlc3QpXHJcbiAgICAgICAgLmRvbmUodG1kYlJlc3BvbnNlID0+IHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdUTURCIHJlc3BvbnNlJywgdG1kYlJlc3BvbnNlKVxyXG4gICAgICAgICAgaWYgKHRtZGJSZXNwb25zZS50b3RhbF9yZXN1bHRzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoeyBwb3N0ZXJVcmw6IFVOVkVSSUZJRURfTU9WSUVfUE9TVEVSX1VSTCB9KVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBsZXQgcG9zdGVyUGF0aCA9IHRtZGJSZXNwb25zZS5yZXN1bHRzWzBdLnBvc3Rlcl9wYXRoXHJcbiAgICAgICAgICBpZiAocG9zdGVyUGF0aCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXNvbHZlKHsgcG9zdGVyVXJsOiBNSVNTSU5HX0RBVEFfUE9TVEVSX1VSTCB9KVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc29sdmUoeyBwb3N0ZXJVcmw6IGAke1BPU1RFUl9CQVNFX1VSTH0vJHtwb3N0ZXJQYXRofWAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5mYWlsKGVyciA9PiB7XHJcbiAgICAgICAgICByZWplY3Qoe1xyXG4gICAgICAgICAgICBjbGllbnRNZXNzYWdlOiAnUmVxdWVzdCBmYWlsZWQnLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxufSJdfQ=="}